#=======================================================================
#@V@:Note: File automatically generated by VIDE: (10:58:13 05 Feb 2002) (g++).
#  This file regenerated each time you run VIDE, so save under a
#    new name if you hand edit, or it will be overwritten.
#=======================================================================

# Target definition:
TGTROM 	= 	1		# flash rom compil.
#TGTROM = 				# simulator compil.


# Standard defines:
##################
# gcc completo...
#	xgcc.exe -c -mv850 -gstabs+ -O0 -mno-prolog-function -v -Wall -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I /cygdrive/c/gcc850/include -iprefix /cygdrive/c/gcc850/include -iwithprefix /g++ -iwithprefix /g++/std -iwithprefix /g++/v850-elf  main.cpp -o ./obj/main.o -Wa,-ahl > main.lst
##################
# ritagli vari
#	cc1plus.exe -mv850 -gstabs+ -O0 -mno-prolog-function -version -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I /cygdrive/c/gcc850/include -iprefix c:\gcc850\include -iwithprefix \g++ -iwithprefix \g++\std -iwithprefix \g++\v850-elf  main.cpp -o ./src/main.s
#	as.exe -v -mv850 ./src/main.s -o ./obj/main.o -ahl > ./lst/main.lst
# -Wa,-v -Wa,-mv850 -Wa, ./src/main.s -Wa, -o ./obj/main.o -Wa,-ahl > ./lst/main.lst
#	as.exe -mv850 ./src/main.s -o ./obj/main.o -ah > ./lst/main.lst
##################

ASM 	=	asm.bat
LK  	=	lkm.bat
LD  	=	ld.exe

GPP		=	cpp.exe 
GCC		=	cc1plus.exe 
GAS		=	as.exe 


#GASFILE = 	$< -o ./$@
#GPPASFILE = ./src/$(*F).s -o ./$@

#GASFULL = 	$< -o ./$@ -a > ./lst/$(*F).lst
#GPPASFULL=  ./src/$(*F).s -o ./$@ -a > ./lst/$(*F).lst


######################################################################
# Modalità TARGET ovvero codice in rom-microbo
######################################################################
ifdef TGTROM

CC  	=	ccr.bat
CC0		=   ccr0.bat
CCI  	=	cci.bat  
CCV  	=	ccv.bat
#CCO  	=	ccr.bat

GPPOPT	= 	-E -lang-c++ -MM -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include -undef 

IRQOPT	= 	-mv850 -g -O2 -mprolog-function -fno-exceptions -fno-rtti -fno-enforce-eh-specs -Wreturn-type -mdisable-callt -version -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include
GCCOPT	= 	-mv850 -g -O2 -mprolog-function -fno-exceptions -fno-rtti -fno-enforce-eh-specs -Wreturn-type -mdisable-callt -version -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include
GASOPT	= 	-mv850 -L -v
LDOPT	= 	-v -T SAU7000.LKR -warn-common -Map SAU7000.MAP -L c:\gcc850\lib

######################################################################
# Modalità DEBUG ovvero codice in ram-debug
######################################################################
else

CC  	=	ccm.bat
CC0		=   ccr0.bat
CCI  	=	cci.bat
CCV  	=	ccv.bat
#CCO  	=	cco.bat

GPPOPT	= 	-E -lang-c++ -M -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include

IRQOPT	= 	-mv850 -g -O1 -mprolog-function -fno-exceptions -fno-rtti -fno-enforce-eh-specs -Wreturn-type -mdisable-callt -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include
GCCOPT	= 	-mv850 -g -O1 -mno-prolog-function -fno-exceptions -fno-rtti -fno-enforce-eh-specs -Wreturn-type -mdisable-callt -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include
GCNOPT	= 	-mv850 -g -O0 -mno-prolog-function -fno-exceptions -fno-rtti -fno-enforce-eh-specs -Wreturn-type -mdisable-callt -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include
GASOPT	= 	-mv850 -L 
LDOPT	= 	-v -T SAU7000.LK -warn-common -Map SAU7000.MAP -L c:\gcc850\lib

endif

######################################################################
# Fine selezione opzioni 
######################################################################

WRES	=	windres

HOMEV	=
VPATH	=	$(HOMEV)/include
oDir	=	./obj
Bin	=	.
Src	=	.
libDirs	=	-L c:\gcc\lib
incDirs	=
LIBS	=
C_FLAGS	=


ASRC	=\
	$(Src)/STARTUP.S\
	$(Src)/CRT0.S\

CDEPS	=\
	$(oDir)/MAIN.d\

CSRC	=\
	$(Src)/CRT1.CPP\
	$(Src)/MAIN.CPP\
	$(Src)/IRQSG2.CPP\
	$(Src)/ERROR.CPP\
	$(Src)/ALLOC.CPP\
	$(Src)/NEW.CPP\
	$(Src)/STRCLASS.CPP\
	$(Src)/SWTIM.CPP\
	$(Src)/UTIL.CPP\
	$(Src)/PRINT.CPP\
	$(Src)/sioSG2.CPP\
	$(Src)/SOUND.CPP\
	$(Src)/KEYABSTRACT.CPP\
	$(Src)/KEYBOARD.CPP\
	$(Src)/ADCABSTRACT.CPP\
	$(Src)/ADC_NEC.CPP\
	$(Src)/ADC_SAU7000.CPP\
	$(Src)/UARTABSTRACT.CPP\
	$(Src)/UARTNEC.CPP\
	$(Src)/UARTFPGA.CPP\
	$(Src)/PROTOCOLSTDUART.CPP\
	$(Src)/PROTOCOLSAUANDPC.CPP\
	$(Src)/PROTOCOL_uC.CPP\
	$(Src)/PROTOCOLSAUANDEMGZ.CPP\
	$(Src)/iWRAP_BLUEGIGA.CPP\
	$(Stc)/iWRAP_BLUEGIGA_SPP.CPP\
	$(Src)/SAU7000_MANAGER.CPP\
	$(Src)/DPYDRV.CPP\
	$(Src)/CHRSET.CPP\
	$(Src)/GRAPH.CPP\
	$(Src)/APPMENU.CPP\
	$(Src)/ICONS.CPP\
	$(Src)/EEPROM_SPI.CPP\
	$(Src)/SAU7000_ADuC_SOURCE.CPP\
	$(Src)/PROTOCOLADuCfwUPGRADE.CPP\
	$(Src)/ADuC_UPGRADEMANAGER.CPP\
	$(Src)/TIMER_NEC.CPP\
	$(Src)/PWMABSTRACT.CPP\
	$(Src)/PWM_NEC.CPP\
	$(Src)/WTH.CPP\
	$(Src)/IR_Toshiba_protocol.CPP\
	$(Src)/IR_RC5_Standard_protocol.CPP\
	$(Src)/IR_REMOTE.CPP\
	$(Src)/SPI_ABSTRACT.CPP\
	$(Src)/SPI_NEC.CPP\
	$(Src)/TMC262_DRV.CPP\
	$(Src)/WTP.CPP\
	$(Src)/SSPIE_HARDWARE.CPP\
	$(Src)/SSPIE_CORE.CPP\
	$(Src)/SSPIE_INTRFACE.CPP\
	$(Src)/SSPIE_MAIN.CPP\
	$(Src)/SSPIE_SSPIEm.CPP\
	$(Src)/SSPIE_UTIL.CPP\
	$(Src)/ADuCSETTING.CPP
	
EXOBJS	=\
	$(oDir)/STARTUP.o\
	$(oDir)/CRT0.o\
	$(oDir)/CRT1.o\
	$(oDir)/MAIN.o\
	$(oDir)/IRQSG2.o\
	$(oDir)/ERROR.o\
	$(oDir)/ALLOC.o\
	$(oDir)/NEW.o\
	$(oDir)/STRCLASS.o\
	$(oDir)/SWTIM.o\
	$(oDir)/UTIL.o\
	$(oDir)/PRINT.o\
	$(oDir)/sioSG2.o\
	$(oDir)/SOUND.o\
	$(oDir)/KEYABSTRACT.o\
	$(oDir)/KEYBOARD.o\
	$(oDir)/ADCABSTRACT.o\
	$(oDir)/ADC_NEC.o\
	$(oDir)/ADC_SAU7000.o\
	$(oDir)/UARTABSTRACT.o\
	$(oDir)/UARTNEC.o\
	$(oDir)/UARTFPGA.o\
	$(oDir)/PROTOCOLSTDUART.o\
	$(oDir)/PROTOCOLSAUANDPC.o\
	$(oDir)/PROTOCOL_uC.o\
	$(oDir)/PROTOCOLSAUANDEMGZ.o\
	$(oDir)/iWRAP_BLUEGIGA.o\
	$(oDir)/iWRAP_BLUEGIGA_SPP.o\
	$(oDir)/SAU7000_MANAGER.o\
	$(oDir)/DPYDRV.o\
	$(oDir)/CHRSET.o\
	$(oDir)/GRAPH.o\
	$(oDir)/APPMENU.o\
	$(oDir)/ICONS.o\
	$(oDir)/EEPROM_SPI.o\
	$(oDir)/SAU7000_ADuC_SOURCE.o\
	$(oDir)/PROTOCOLADuCfwUPGRADE.o\
	$(oDir)/ADuC_UPGRADEMANAGER.o\
	$(oDir)/TIMER_NEC.o\
	$(oDir)/PWMABSTRACT.o\
	$(oDir)/PWM_NEC.o\
	$(oDir)/WTH.o\
	$(oDir)/IR_Toshiba_protocol.o\
	$(oDir)/IR_RC5_Standard_protocol.o\
	$(oDir)/IR_REMOTE.o\
	$(oDir)/SPI_ABSTRACT.o\
	$(oDir)/SPI_NEC.o\
	$(oDir)/TMC262_DRV.o\
	$(oDir)/WTP.o\
	$(oDir)/SSPIE_HARDWARE.o\
	$(oDir)/SSPIE_CORE.o\
	$(oDir)/SSPIE_INTRFACE.o\
	$(oDir)/SSPIE_MAIN.o\
	$(oDir)/SSPIE_SSPIEm.o\
	$(oDir)/SSPIE_UTIL.o\
	$(oDir)/ADuCSETTING.o
	
ALLOBJS	=	$(EXOBJS) 

ALLBIN	=	$(Bin)/SAU7000.OUT
ALLTGT	=	$(Bin)/SAU7000.OUT

# User defines:


#@# Targets follow ---------------------------------

all:	$(ALLTGT)

objs:	$(ALLOBJS) $(CDEPS)

cleanobjs:
	rm -f $(ALLOBJS)


# Automatically generate C source code dependencies. 
# (Code originally taken from the GNU make user manual and modified (See README.txt Credits).)
# Note that this will work with sh (bash) and sed that is shipped with WinAVR (see the SHELL variable defined above).
# This may not work with other shells or other seds.
cleanbin:
	rm -f $(ALLBIN)

clean:	cleanobjs cleanbin

cleanall:	cleanobjs cleanbin

#@# User Targets follow ---------------------------------


#@# Dependency rules follow -----------------------------

# File .bin per il loader su scheda
ifdef TGTROM

$(Bin)/SAU7000.OUT: $(EXOBJS) SAU7000.LKR SAU7000.MAK
	$(LK) SAU7000.LKR SAU7000.MAP
#	$(LD) $(LDOPT)
#	objcopy -v -I elf32-v850 -O binary -x --set-start=0x0000 VLOAD.OUR VLOAD.BIN
#	objcopy -v -I elf32-v850 -O binary -x VLOAD.OUR VLOAD.BIN
#	putchk.exe SG2.BIN CARDICHK.BIN
#	objcopy -v -I elf32-v850 -O binary -x SAU7000.OUR C:/DELTOS/CDSC.BIN
	objcopy -v -I elf32-v850 -O binary -x SAU7000.OUR SAU7000.BIN
	objcopy -v -I elf32-v850 -O binary -x SAU7000.OUR SAU7000.HEX
	objcopy -v -I elf32-v850 -O srec -x SAU7000.OUR SAU7000.REC
	size --target=elf32-v850 SAU7000.OUR


else

# File .out con simboli per simulatore
$(Bin)/SAU7000.OUT: $(EXOBJS) SAU7000.LK SAU7000.MAK
#	$(LK) SAU7000.LK SAU7000.MAP
	$(LD) $(LDOPT)
	size --target=elf32-v850 SAU7000.OUT
endif


$(oDir)/STARTUP.o : STARTUP.S V850SG2.INC
	$(ASM) $(*F)
	
$(oDir)/CRT0.o : CRT0.S
	$(ASM) $(*F) 

# Compile: create object files from C source files.
#$(oDir)/%.d: %.CPP
#	$(GPP) 	$(GPPOPT) $< -o $@ 

$(oDir)/CRT1.o : CRT1.CPP
	$(CC)  $(*F)

$(oDir)/MAIN.o : MAIN.CPP global.h v850sg2.h main.h
	$(CC)  $(*F)

$(oDir)/IRQSG2.o : IRQSG2.CPP global.h error.h IRQSG2.h
	$(CCI)  $(*F)
	
$(oDir)/ERROR.o : ERROR.CPP global.h v850sg2.h ERROR.h
	$(CC)  $(*F)

$(oDir)/ALLOC.o : ALLOC.CPP global.h error.h ALLOC.h
	$(CC)  $(*F)
	
$(oDir)/NEW.o : NEW.CPP global.h v850sg2.h NEW.h
	$(CC)  $(*F)
		
$(oDir)/STRCLASS.o : STRCLASS.CPP global.h v850sg2.h STRCLASS.h
	$(CC)  $(*F)
	
$(oDir)/SWTIM.o : SWTIM.CPP global.h v850sg2.h SWTIM.h
	$(CC)  $(*F)

$(oDir)/UTIL.o : UTIL.CPP global.h v850sg2.h UTIL.h
	$(CC)  $(*F)
	
$(oDir)/PRINT.o : PRINT.CPP global.h v850sg2.h PRINT.h
	$(CC)  $(*F)

$(oDir)/sioSG2.o : sioSG2.CPP global.h sioSG2.h 
	$(CC)  $(*F)		

$(oDir)/SOUND.o : SOUND.CPP global.h SOUND.h 
	$(CC)  $(*F)	

$(oDir)/KEYABSTRACT.o : KEYABSTRACT.CPP global.h KEYABSTRACT.h 
	$(CC)  $(*F)
	
$(oDir)/KEYBOARD.o : KEYBOARD.CPP global.h KEYBOARD.h 
	$(CC)  $(*F)	

$(oDir)/ADCABSTRACT.o : ADCABSTRACT.CPP global.h ADCABSTRACT.h 
	$(CC)  $(*F)	

$(oDir)/ADC_NEC.o : ADC_NEC.CPP global.h ADC_NEC.h 
	$(CC)  $(*F)	

$(oDir)/ADC_SAU7000.o : ADC_SAU7000.CPP global.h ADC_SAU7000.h 
	$(CC)  $(*F)	

$(oDir)/UARTABSTRACT.o : UARTABSTRACT.CPP global.h UARTABSTRACT.h
	$(CC)  $(*F)		

$(oDir)/UARTNEC.o : UARTNEC.CPP global.h UARTNEC.h
	$(CC)  $(*F)		

$(oDir)/UARTFPGA.o : UARTFPGA.CPP global.h UARTFPGA.h
	$(CC)  $(*F)		

$(oDir)/PROTOCOLSTDUART.o : PROTOCOLSTDUART.CPP global.h PROTOCOLSTDUART.h
	$(CC)  $(*F)	

$(oDir)/PROTOCOLSAUANDPC.o : PROTOCOLSAUANDPC.CPP global.h PROTOCOLSAUANDPC.h
	$(CC)  $(*F)	

$(oDir)/PROTOCOL_uC.o : PROTOCOL_uC.CPP global.h PROTOCOL_uC.h
	$(CC)  $(*F)	

$(oDir)/PROTOCOLSAUANDEMGZ.o : PROTOCOLSAUANDEMGZ.CPP global.h PROTOCOLSAUANDEMGZ.h
	$(CC)  $(*F)

$(oDir)/iWRAP_BLUEGIGA.o : iWRAP_BLUEGIGA.CPP global.h iWRAP_BLUEGIGA.h
	$(CC)  $(*F)	

$(oDir)/iWRAP_BLUEGIGA_SPP.o : iWRAP_BLUEGIGA_SPP.CPP global.h iWRAP_BLUEGIGA_SPP.h
	$(CC)  $(*F)
	
$(oDir)/SAU7000_MANAGER.o : SAU7000_MANAGER.CPP global.h SAU7000_MANAGER.h
	$(CC)  $(*F)		

$(oDir)/DPYDRV.o : DPYDRV.CPP global.h DPYDRV.h
	$(CC)  $(*F)

$(oDir)/CHRSET.o : CHRSET.CPP global.h CHRSET.h
	$(CC)  $(*F)	

$(oDir)/GRAPH.o : GRAPH.CPP global.h GRAPH.h
	$(CC)  $(*F)	

$(oDir)/APPMENU.o : APPMENU.CPP global.h APPMENU.h
	$(CC)  $(*F)	

$(oDir)/ICONS.o : ICONS.CPP global.h ICONS.h
	$(CC)  $(*F)	

$(oDir)/EEPROM_SPI.o : EEPROM_SPI.CPP global.h EEPROM_SPI.h
	$(CC)  $(*F)	

$(oDir)/SAU7000_ADuC_SOURCE.o : SAU7000_ADuC_SOURCE.CPP global.h SAU7000_ADuC_SOURCE.h
	$(CC)  $(*F)	

$(oDir)/PROTOCOLADuCfwUPGRADE.o : PROTOCOLADuCfwUPGRADE.CPP global.h PROTOCOLADuCfwUPGRADE.h
	$(CC)  $(*F)	

$(oDir)/ADuC_UPGRADEMANAGER.o : ADuC_UPGRADEMANAGER.CPP global.h ADuC_UPGRADEMANAGER.h
	$(CC)  $(*F)	

$(oDir)/TIMER_NEC.o : TIMER_NEC.CPP global.h TIMER_NEC.h
	$(CC)  $(*F)
	
$(oDir)/PWMABSTRACT.o : PWMABSTRACT.CPP global.h PWMABSTRACT.h
	$(CC)  $(*F)
	
$(oDir)/PWM_NEC.o : PWM_NEC.CPP global.h PWM_NEC.h
	$(CC)  $(*F)

$(oDir)/WTH.o : WTH.CPP global.h WTH.h
	$(CC)  $(*F)

$(oDir)/IR_Toshiba_protocol.o : IR_Toshiba_protocol.CPP global.h IR_Toshiba_protocol.h
	$(CC)  $(*F)

$(oDir)/IR_RC5_Standard_protocol.o : IR_RC5_Standard_protocol.CPP global.h IR_RC5_Standard_protocol.h
	$(CC)  $(*F)

$(oDir)/IR_REMOTE.o : IR_REMOTE.CPP global.h IR_REMOTE.h
	$(CC)  $(*F)

$(oDir)/SPI_ABSTRACT.o : SPI_ABSTRACT.CPP global.h SPI_ABSTRACT.h
	$(CC)  $(*F)

$(oDir)/SPI_NEC.o : SPI_NEC.CPP global.h SPI_NEC.h
	$(CC)  $(*F)

$(oDir)/TMC262_DRV.o : TMC262_DRV.CPP global.h TMC262_DRV.h
	$(CC)  $(*F)
	
$(oDir)/WTP.o : WTP.CPP global.h WTP.h
	$(CC)  $(*F)

$(oDir)/SSPIE_HARDWARE.o : SSPIE_HARDWARE.CPP global.h SSPIE_HARDWARE.h
	$(CC)  $(*F)
	
$(oDir)/SSPIE_CORE.o : SSPIE_CORE.CPP global.h SSPIE_CORE.h
	$(CC)  $(*F)
	
$(oDir)/SSPIE_INTRFACE.o : SSPIE_INTRFACE.CPP global.h SSPIE_INTRFACE.h
	$(CC)  $(*F)
	
$(oDir)/SSPIE_MAIN.o : SSPIE_MAIN.CPP global.h SSPIE_MAIN.h
	$(CC)  $(*F)
	
$(oDir)/SSPIE_SSPIEm.o : SSPIE_SSPIEm.CPP global.h SSPIE_SSPIEm.h
	$(CC)  $(*F)
	
$(oDir)/SSPIE_UTIL.o : SSPIE_UTIL.CPP global.h SSPIE_UTIL.h
	$(CC)  $(*F)
	
$(oDir)/ADuCSETTING.o : ADuCSETTING.CPP global.h ADuCSETTING.h
	$(CC)  $(*F)












