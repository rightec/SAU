Archive member included because of file (symbol)

c:\gcc850\lib\libc.a(lib_a-atoi.o)
                              obj/util.o (_atoi)
c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
                              obj/PRINT.o (_isxdigit)
c:\gcc850\lib\libc.a(lib_a-memcpy.o)
                              obj/util.o (_memcpy)
c:\gcc850\lib\libc.a(lib_a-strcat.o)
                              obj/iWRAP_BLUEGIGA.o (_strcat)
c:\gcc850\lib\libc.a(lib_a-strcmp.o)
                              obj/STRCLASS.o (_strcmp)
c:\gcc850\lib\libc.a(lib_a-strcpy.o)
                              obj/STRCLASS.o (_strcpy)
c:\gcc850\lib\libc.a(lib_a-strlen.o)
                              obj/STRCLASS.o (_strlen)
c:\gcc850\lib\libc.a(lib_a-strncpy.o)
                              obj/iWRAP_BLUEGIGA_SPP.o (_strncpy)
c:\gcc850\lib\libc.a(lib_a-strtol.o)
                              c:\gcc850\lib\libc.a(lib_a-atoi.o) (__strtol_r)
c:\gcc850\lib\libc.a(lib_a-toupper.o)
                              obj/PRINT.o (_toupper)
c:\gcc850\lib\libc.a(lib_a-ctype_.o)
                              c:\gcc850\lib\libc.a(lib_a-isxdigit.o) (___ctype_ptr__)
c:\gcc850\lib\libc.a(lib_a-impure.o)
                              c:\gcc850\lib\libc.a(lib_a-strtol.o) (__impure_ptr)
c:\gcc850\lib\libgcc.a(_mulsi3.o)
                              obj/PRINT.o (___mulsi3)
c:\gcc850\lib\libgcc.a(_divsi3.o)
                              obj/util.o (___divsi3)
c:\gcc850\lib\libgcc.a(_udivsi3.o)
                              obj/main.o (___udivsi3)
c:\gcc850\lib\libgcc.a(_modsi3.o)
                              obj/PRINT.o (___modsi3)
c:\gcc850\lib\libgcc.a(_umodsi3.o)
                              obj/main.o (___umodsi3)
c:\gcc850\lib\libgcc.a(_save_31c.o)
                              c:\gcc850\lib\libc.a(lib_a-atoi.o) (__save_r31)
c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
                              obj/SOUND.o (___fixunssfsi)
c:\gcc850\lib\libgcc.a(_addsub_sf.o)
                              obj/SOUND.o (___subsf3)
c:\gcc850\lib\libgcc.a(_mul_sf.o)
                              obj/main.o (___mulsf3)
c:\gcc850\lib\libgcc.a(_div_sf.o)
                              obj/PRINT.o (___divsf3)
c:\gcc850\lib\libgcc.a(_ne_sf.o)
                              obj/util.o (___nesf2)
c:\gcc850\lib\libgcc.a(_gt_sf.o)
                              obj/PROTOCOL_uC.o (___gtsf2)
c:\gcc850\lib\libgcc.a(_ge_sf.o)
                              obj/PROTOCOL_uC.o (___gesf2)
c:\gcc850\lib\libgcc.a(_lt_sf.o)
                              obj/PROTOCOL_uC.o (___ltsf2)
c:\gcc850\lib\libgcc.a(_le_sf.o)
                              obj/TIMER_NEC.o (___lesf2)
c:\gcc850\lib\libgcc.a(_si_to_sf.o)
                              obj/main.o (___floatsisf)
c:\gcc850\lib\libgcc.a(_sf_to_si.o)
                              obj/PRINT.o (___fixsfsi)
c:\gcc850\lib\libgcc.a(_thenan_sf.o)
                              c:\gcc850\lib\libgcc.a(_addsub_sf.o) (___thenan_sf)
c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
                              obj/SWTIM.o (___floatunsisf)
c:\gcc850\lib\libgcc.a(_save_26c.o)
                              c:\gcc850\lib\libgcc.a(_addsub_sf.o) (__save_r26_r31)
c:\gcc850\lib\libgcc.a(_save_27c.o)
                              c:\gcc850\lib\libgcc.a(_mul_sf.o) (__save_r27_r31)
c:\gcc850\lib\libgcc.a(_save_28c.o)
                              c:\gcc850\lib\libgcc.a(_fixunssfsi.o) (__save_r28_r31)
c:\gcc850\lib\libgcc.a(_muldi3.o)
                              c:\gcc850\lib\libgcc.a(_mul_sf.o) (___muldi3)
c:\gcc850\lib\libgcc.a(_clzsi2.o)
                              c:\gcc850\lib\libgcc.a(_si_to_sf.o) (___clzsi2)
c:\gcc850\lib\libgcc.a(_pack_sf.o)
                              c:\gcc850\lib\libgcc.a(_addsub_sf.o) (___pack_f)
c:\gcc850\lib\libgcc.a(_unpack_sf.o)
                              c:\gcc850\lib\libgcc.a(_addsub_sf.o) (___unpack_f)
c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
                              c:\gcc850\lib\libgcc.a(_ne_sf.o) (___fpcmp_parts_f)
c:\gcc850\lib\libgcc.a(_clz.o)
                              c:\gcc850\lib\libgcc.a(_clzsi2.o) (___clz_tab)

Discarded input sections

 .gnu.linkonce.t._ZN16KeyboardAbstract13getKeysNumberEv
                0x00000000        0x0 obj/KEYBOARD.o
 .gnu.linkonce.t._ZN11AdcAbstract8setPowerEb
                0x00000000        0x0 obj/ADC_NEC.o
 .gnu.linkonce.t._ZN11AdcAbstract9isPoweredEv
                0x00000000        0x0 obj/ADC_NEC.o
 .gnu.linkonce.t._ZN11AdcAbstract9setEnableEb
                0x00000000        0x0 obj/ADC_NEC.o
 .gnu.linkonce.t._ZN11AdcAbstract8isEnableEv
                0x00000000        0x0 obj/ADC_NEC.o
 .gnu.linkonce.r._ZTV11AdcAbstract
                0x00000000        0x0 obj/ADC_NEC.o
 .gnu.linkonce.t._ZN7Adc_NEC9isPoweredEv
                0x00000000        0x0 obj/ADC_SAU7000.o
 .gnu.linkonce.t._ZN7Adc_NEC8isEnableEv
                0x00000000        0x0 obj/ADC_SAU7000.o
 .gnu.linkonce.t._ZN18UartDeviceAbstract6TurnOnEv
                0x00000000        0x0 obj/UARTNEC.o
 .gnu.linkonce.t._ZN18UartDeviceAbstract7TurnOffEv
                0x00000000        0x0 obj/UARTNEC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/PROTOCOLSAUANDPC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/PROTOCOLSAUANDPC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x00000000        0x0 obj/PROTOCOL_uC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/PROTOCOL_uC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/PROTOCOL_uC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/PROTOCOLSAUANDEMGZ.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/PROTOCOLSAUANDEMGZ.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction6getMsgEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction6getMsgEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA_SPP.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA_SPP.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA_SPP.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x00000000        0x0 obj/PROTOCOLADuCfwUPGRADE.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/PROTOCOLADuCfwUPGRADE.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/PROTOCOLADuCfwUPGRADE.o
 .gnu.linkonce.t._ZN11pwmAbstract9getPwmFrqEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract12getPwmPeriodEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract13getPwmTonDutyEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract14getPwmToffDutyEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract9setEnableEb
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract9isEnabledEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract19pulseCountIsEnabledEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract20pulseCountingIsEndedEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract21setPulseCountingEndedEb
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract22pulseCountingEnded_ISREv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract7managerEv
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract11pop_IR_DataERNS_9IR_data_tE
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract11isDataEmpryEv
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract8setStateENS_18IR_decondingStatesE
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract17getDecodingStatusEv
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract25getPreviousDecodingStatusEv
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.r._ZTV19IR_protocolAbstract
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN11KeyAbstract9setEnableEbi
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract11getReadTimeEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract11setReadTimeEi
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract8isEnableEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract13setBeepEnableEb
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract12beepIsEnableEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract21setCountinuousReadingEbi
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract25continuousReadingIsEnableEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract21continuousReadingTimeEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract12setKeyNumberEi
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract9keyNumberEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract8keyStateEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract11setKeyStateENS_9keyStatesE
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract3popERNS_16keyReadingValuesE
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract4pushENS_16keyReadingValuesE
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract5clearEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract7managerEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN16KeyboardAbstract13getKeysNumberEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.r._ZTV11KeyAbstract
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN12SPI_Abstract4putcEt
                0x00000000        0x0 obj/SPI_NEC.o
 .gnu.linkonce.t._ZN12SPI_Abstract4getcEt
                0x00000000        0x0 obj/SPI_NEC.o
 .gnu.linkonce.t._ZN12SPI_Abstract4busyEv
                0x00000000        0x0 obj/SPI_NEC.o
 .gnu.linkonce.t._ZN13MotorAbstract7managerEv
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract11setVelocityEdb
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract11getVelocityEv
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract9setEnableEb
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract8isEnableEv
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract8isMovingEv
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract5powerEb
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract9isPoweredEv
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.r._ZTV13MotorAbstract
                0x00000000        0x0 obj/WTP.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00110000         0x00040000
rodata           0x00150000         0x00004000
message          0x00154000         0x00040000
usrstk           0x00194000         0x00000fff
data             0x03ff5000         0x00006000
stack            0x03ffb000         0x00004000
xdata            0x00180000         0x00000000
*default*        0x00000000         0xffffffff
ramcode          0x00000000         0xffffffff

Linker script and memory map

LOAD obj/startup.o

.init
 *(.init)

.plt
 *(.plt)

.text           0x00110000    0x33e50
                0x00110000                __stext = .
                0x00110000                __ctbp = .
 *(.call_table_data)
                0x00110000                . = ALIGN (0x10)
 *(.text)
 .text          0x00110000      0x7f4 obj/startup.o
                0x00110720                __return_interrupt
                0x001107e8                _cpu_initial
                0x00110000                _irqJump
                0x00110790                __restore_all_interrupt
                0x00110738                __save_all_interrupt
                0x00110700                __save_interrupt
 .text          0x001107f4       0x94 obj/crt0.o
                0x001107f4                _start
 .text          0x00110888       0x4e obj/crt1.o
                0x00110888                ___main
 .text          0x001108d6     0x3048 obj/main.o
                0x0011203c                UartProcol_init()
                0x001108d6                __wait(int)
                0x001131f2                wtp_Init()
                0x001133a4                hwsw_init()
                0x00110c04                fpga_pin_init()
                0x00110934                FlashLed()
                0x00111ce0                wth_Init()
                0x00111252                GrCpuMemTest(unsigned short*, unsigned short*)
                0x00110906                breakpoint()
                0x00111f16                page_init()
                0x001128fe                HwChannels_init()
                0x00110c4c                clearAllBuffers()
                0x0011157c                IR_remoteInit()
                0x001109b6                pin_init()
                0x00112e8c                fpga_config()
                0x00110cc6                _irq_INTUA0R_INTCB4R
                0x001127fe                KeyboardInit()
                0x00111172                Asciihex_to_num(char*)
                0x0011133a                adc_uC_init()
                0x001111a0                Num_to_Asciihex(unsigned short, char*)
                0x00110dba                _irq_INTUA0T_INTCB4T
                0x001136ba                _main
 .text          0x0011391e      0xa84 obj/IRQSG2.o
                0x001140ae                _irq_INTCB1R
                0x0011391e                _irq_init
                0x00113f88                _irq_INTTP4CC1
                0x00113fdc                _irq_INTTP5CC0
                0x00113b7e                _irq_INTP2
                0x00113bce                _irq_INTP4
                0x00113ee0                _irq_INTTP3CC0
                0x00113de4                _irq_INTTP1CC0
                0x00113d90                _irq_INTTP0CC1
                0x00113a3e                _irq_RESET
                0x00113d12                _irq_INTTQ0CC3
                0x001139b8                _irq_resetVect
                0x00113b56                _irq_INTP1
                0x001142fa                _irq_INTDMA3
                0x00113ade                _irq_ILGOP_TRAPDB
                0x0011412c                _irq_INTCB2T
                0x00114378                _irq_INTWT
                0x0011405a                _irq_INTCB0R_INTIIC1
                0x001142d0                _irq_INTDMA2
                0x00113d66                _irq_INTTP0CC0
                0x00113e62                _irq_INTTP2CC0
                0x00113f5e                _irq_INTTP4CC0
                0x00113b06                _irq_INTLVI
                0x00113fb2                _irq_INTTP5OV
                0x00113eb6                _irq_INTTP3OV
                0x0011427c                _irq_INTDMA0
                0x00114252                _irq_INTAD
                0x00114006                _irq_INTTP5CC1
                0x00113c1e                _irq_INTP6
                0x00113ba6                _irq_INTP3
                0x00113a66                _irq_NMI
                0x00114084                _irq_INTCB0T
                0x00113c6e                _irq_INTTQ0OV
                0x00113e0e                _irq_INTTP1CC1
                0x00114180                _irq_INTCB3T
                0x00114228                _irq_INTUA2T
                0x00114102                _irq_INTCB2R
                0x00113960                _irq_setVect
                0x00114324                _irq_INTKR
                0x00114030                _irq_INTTM0EQ0
                0x00113b2e                _irq_INTP0
                0x00113cbe                _irq_INTTQ0CC1
                0x001140d8                _irq_INTCB1T
                0x001139f0                _irq_chkErrors
                0x001141fe                _irq_INTUA2R_INTIIC0
                0x00113e8c                _irq_INTTP2CC1
                0x00114156                _irq_INTCB3R
                0x00113bf6                _irq_INTP5
                0x00113f0a                _irq_INTTP3CC1
                0x00113c46                _irq_INTP7
                0x00113a8e                _irq_TRAP0
                0x0011434e                _irq_INTWTI
                0x00113dba                _irq_INTTP1OV
                0x00113f34                _irq_INTTP4OV
                0x00113ab6                _irq_TRAP1
                0x001141d4                _irq_INTUA1T
                0x00113ce8                _irq_INTTQ0CC2
                0x00113e38                _irq_INTTP2OV
                0x001141aa                _irq_INTUA1R_INTIIC2
                0x00113d3c                _irq_INTTP0OV
                0x001142a6                _irq_INTDMA1
                0x00113c96                _irq_INTTQ0CC0
 .text          0x001143a2       0x1a obj/ERROR.o
                0x001143ac                _error_trace
                0x001143a2                _error_init
 .text          0x001143bc      0x254 obj/ALLOC.o
                0x001143bc                _mem_init
                0x0011446c                _mem_alloc
                0x0011442e                _mem_count
                0x00114448                _mem_left
                0x00114550                _mem_free
 .text          0x00114610       0xa0 obj/NEW.o
                0x00114632                operator delete(void*)
                0x00114654                operator new[](unsigned int)
                0x00114682                operator new(unsigned int)
                0x00114610                operator delete[](void*)
 .text          0x001146b0      0x400 obj/STRCLASS.o
                0x00114982                String::String(char const*)
                0x001146b0                String::String()
                0x001146d2                String::String()
                0x001146f4                String::operator=(char const*)
                0x001147a2                String::init(char*)
                0x00114846                String::String(String const&)
                0x001149f6                String::operator=(String const&)
                0x001148aa                String::String(String const&)
                0x0011490e                String::String(char const*)
 .text          0x00114ab0      0xaee obj/PRINT.o
                0x00115574                _sprintf
                0x00114f94                _vsprintf
                0x00114e4a                _abort
                0x00114e4c                __strtoul
 .text          0x0011559e       0xd0 obj/SWTIM.o
                0x0011559e                Timer::Timer()
                0x001155a8                Timer::Timer()
                0x001155f6                IncTimer::getMsec()
                0x001155b2                IncTimer::getTime()
                0x0011561c                DecTimer::Match()
 .text          0x0011566e      0x72a obj/util.o
                0x0011568e                strset(char*, int)
                0x001156aa                HexToInt(int&, char*, int)
                0x0011587a                skipWhites(unsigned char*)
                0x00115980                addstr(char*, char const*)
                0x00115924                fsumstr(char*, char*, int, int, int)
                0x001157fc                ltrim(char*)
                0x001157f8                matherr(exception*)
                0x00115c0e                cdaten(char*)
                0x001158f2                sumstr(char*, char*, int, int)
                0x00115bb4                cdate(char*)
                0x00115b54                chgext(char*, char*)
                0x00115846                rtrim(char*)
                0x00115774                windowFilter(short*, short*, int, int, int)
                0x001158b0                packWhites(unsigned char*)
                0x001159b0                fmtReal(long, int, int)
                0x0011566e                my_pow10(short)
                0x00115ad4                pperc(char*, double, double)
                0x00115cb8                IntToHex(int, char*, int)
 .text          0x00115d98      0x5ec obj/sioSG2.o
                0x001160a6                _sio_getc_ch1
                0x00115faa                _sio_disable_rx_interrupt_ch1
                0x00115ffa                _sio_disable_tx_interrupt_ch1
                0x00115f8c                _sio_enable_rx_interrupt_ch2
                0x0011610c                _sio_clocksel_ch2
                0x00115fdc                _sio_enable_tx_interrupt_ch2
                0x00116240                _sio_fill_ch3
                0x00115fd2                _sio_enable_tx_interrupt_ch1
                0x00115df6                _sio_init_ch1
                0x00115ff0                _sio_disable_tx_interrupt_ch0
                0x00116334                _sio_getw_ch3
                0x00116200                _sio_xfr_ch3
                0x00115fa0                _sio_disable_rx_interrupt_ch0
                0x00116166                _sio_xfr_ch2
                0x001161da                _sio_getc_ch3
                0x0011604c                _sio_getc_ch0
                0x0011607e                _sio_putc_ch1
                0x00115fbe                _sio_disable_rx_interrupt_ch3
                0x00115f96                _sio_enable_rx_interrupt_ch3
                0x00115f78                _sio_enable_rx_interrupt_ch0
                0x0011600e                _sio_disable_tx_interrupt_ch3
                0x00116140                _sio_getc_ch2
                0x00116004                _sio_disable_tx_interrupt_ch2
                0x001161ce                _sio_busy_ch3
                0x00115fe6                _sio_enable_tx_interrupt_ch3
                0x00116024                _sio_putc_ch0
                0x00116134                _sio_busy_ch2
                0x001162ba                _sio_read_ch3
                0x00116072                _sio_clocksel_ch1
                0x00116018                _sio_clocksel_ch0
                0x00116278                _sio_write_ch3
                0x0011609a                _sio_busy_ch1
                0x001162fe                _sio_putw_ch3
                0x001161b2                _sio_putc_ch3
                0x00115eb6                _sio_init_ch2
                0x00116040                _sio_busy_ch0
                0x00115f82                _sio_enable_rx_interrupt_ch1
                0x00115d98                _sio_init_ch0
                0x00115fc8                _sio_enable_tx_interrupt_ch0
                0x00115fb4                _sio_disable_rx_interrupt_ch2
                0x001161a6                _sio_clocksel_ch3
                0x001160cc                _sio_xfr_ch1
                0x00115f02                _sio_init_ch3
                0x00116118                _sio_putc_ch2
 .text          0x00116384      0x4c4 obj/SOUND.o
                0x00116562                _goBuzzer
                0x001163be                _shutBuzzer
                0x001163aa                _buzzer_isPlaying
                0x00116384                buzzer_stop()
                0x00116460                buzzer_start()
                0x001165e0                _buzzer_init
                0x001164de                _goBuzzerTimes
                0x00116748                _buzzerManager
                0x001163e4                setPWM(unsigned short, unsigned char)
                0x001163b4                _buzzerSound
 .text          0x00116848      0x466 obj/KEYABSTRACT.o
                0x00116c30                KeyboardAbstract::popKey(int, KeyAbstract::keyReadingValues&)
                0x001169b0                KeyboardAbstract::setEnable(int, bool, int)
                0x00116ab8                KeyboardAbstract::setBeepEnable(int, bool)
                0x00116b66                KeyboardAbstract::push(int)
                0x0011696a                KeyboardAbstract::isEnable(int)
                0x00116894                KeyboardAbstract::~KeyboardAbstract()
                0x00116c78                KeyboardAbstract::clearKey(int)
                0x001168f0                KeyboardAbstract::setKeyName(int, int)
                0x001168a2                KeyboardAbstract::~KeyboardAbstract()
                0x00116af4                KeyboardAbstract::clear()
                0x00116a72                KeyboardAbstract::beepIsEnable(int)
                0x00116848                KeyboardAbstract::KeyboardAbstract(int)
                0x00116bea                KeyboardAbstract::keyState(int)
                0x001169ee                KeyboardAbstract::continuousReadingIsEnable(int)
                0x001168b0                KeyboardAbstract::pop(int&)
                0x0011686e                KeyboardAbstract::KeyboardAbstract(int)
                0x00116a34                KeyboardAbstract::setCountinuousReading(int, bool, int)
                0x00116928                KeyboardAbstract::keyName(int)
 .text          0x00116cae      0x868 obj/KEYBOARD.o
                0x001173a4                Key::manager()
                0x00117224                Keyboard::Keyboard(int)
                0x00116f00                Key::pinValue()
                0x00117174                Keyboard::~Keyboard()
                0x00116dea                Key::~Key()
                0x001170c4                Keyboard::~Keyboard()
                0x00116e06                Key::setEnable(bool, int)
                0x00116e48                Key::pop(KeyAbstract::keyReadingValues&)
                0x00116f84                Keyboard::manager()
                0x00116e84                Key::push(KeyAbstract::keyReadingValues)
                0x00116e38                Key::setCountinuousReading(bool, int)
                0x00116d4c                Key::Key(unsigned char volatile*, unsigned char, kindOfKey)
                0x001172e4                Keyboard::Keyboard(int)
                0x00116f20                Keyboard::setKeyPin(int, unsigned char volatile*, unsigned char)
                0x00116cae                Key::Key(unsigned char volatile*, unsigned char, kindOfKey)
                0x00116df8                Key::~Key()
 .text          0x00117516       0x24 obj/ADCABSTRACT.o
                0x00117516                AdcSpiAbstract::AdcSpiAbstract(SPI_Abstract*)
                0x00117528                AdcSpiAbstract::AdcSpiAbstract(SPI_Abstract*)
 .text          0x0011753a      0x85a obj/ADC_NEC.o
                0x00117cae                Adc_NEC::Adc_NEC(adc_nec_t volatile*, adcConv_nec_t volatile*, adc_nec_interrupt_t volatile*)
                0x00117868                Adc_NEC::setConversionSpeed(Adc_NEC::ConversionSpeed, bool)
                0x00117a46                Adc_NEC::setInputChannel(Adc_NEC::AnalogInput, bool)
                0x00117728                Adc_NEC::setTriggerModeSpecification(Adc_NEC::TriggerModeSpec, bool)
                0x0011753a                Adc_NEC::setPower(bool)
                0x00117d44                Adc_NEC::setADIC_interrupt(bool, unsigned char)
                0x00117c18                Adc_NEC::Adc_NEC(adc_nec_t volatile*, adcConv_nec_t volatile*, adc_nec_interrupt_t volatile*)
                0x001177ba                Adc_NEC::setHwTriggerSource(Adc_NEC::HwTriggerSource, bool)
                0x001178fa                Adc_NEC::setConversionTime(Adc_NEC::ConversionTime, bool)
                0x00117564                Adc_NEC::setEnable(bool)
                0x00117660                Adc_NEC::setSpecificationOnExternalTrigger(Adc_NEC::SpecOfExtTrigger, bool)
                0x00117598                Adc_NEC::setConversionMode(Adc_NEC::ConversionMode, bool)
 .text          0x00117d94     0x1806 obj/ADC_SAU7000.o
                0x00119160                Adc_NEC_SAU7000::manager()
                0x00117e2c                Adc_NEC_SAU7000::getCurrentAdcData(unsigned short*)
                0x00117d94                Adc_NEC_SAU7000::getVoltageAdcData(unsigned short*)
                0x001188a4                Adc_NEC_SAU7000::Adc_NEC_SAU7000(adc_nec_t volatile*, adcConv_nec_t volatile*, adc_nec_interrupt_t volatile*)
                0x00117f56                Adc_NEC_SAU7000::pushCurrentAdcDataToChan(int, unsigned short)
                0x00117ec4                Adc_NEC_SAU7000::pushVoltageAdcDataToChan(int, unsigned short)
                0x00117fe8                Adc_NEC_SAU7000::Adc_NEC_SAU7000(adc_nec_t volatile*, adcConv_nec_t volatile*, adc_nec_interrupt_t volatile*)
 .text          0x0011959a      0xb6c obj/UARTABSTRACT.o
                0x00119b60                UartRingBuffer::read_isr(char*, int)
                0x00119af4                UartDeviceAbstract::TransmitData(unsigned char const*, int)
                0x001198be                UartDeviceAbstract::usec_delay(int)
                0x00119c68                UartRingBuffer::read(char*, int)
                0x0011a066                UartDeviceAbstract::UartDeviceAbstract(int, int)
                0x0011a0f0                UartRingBuffer::UartRingBuffer(int)
                0x00119ebe                UartDeviceAbstract::~UartDeviceAbstract()
                0x0011964a                UartRingBuffer::puts_isr(char*)
                0x00119754                UartDeviceAbstract::SetStopBits(UartDeviceAbstract::UARTStopBits, bool)
                0x00119f82                UartRingBuffer::resize(int)
                0x00119fc6                UartRingBuffer::UartRingBuffer(int)
                0x001198ce                UartRingBuffer::write_isr(char const*, int)
                0x001195ec                UartRingBuffer::puts(char*)
                0x001195d6                UartRingBuffer::zeroIndex()
                0x00119b2a                UartDeviceAbstract::TransmitString(char const*)
                0x00119dae                UartRingBuffer::destroy()
                0x00119d78                UartDeviceAbstract::ReceiveData(unsigned char*, int&)
                0x0011959a                UartRingBuffer::UartRingBuffer()
                0x00119778                UartDeviceAbstract::SetBaudRate(UartDeviceAbstract::UARTBaudRate, bool)
                0x00119730                UartDeviceAbstract::SetFrameBits(UartDeviceAbstract::UARTFrameBits, bool)
                0x00119f12                UartRingBuffer::~UartRingBuffer()
                0x00119794                UartDeviceAbstract::SetHwFlwCtl(UartDeviceAbstract::UARThwFlwCnt, bool)
                0x0011970c                UartDeviceAbstract::SetParity(UartDeviceAbstract::UARTParity, bool)
                0x00119e6a                UartDeviceAbstract::~UartDeviceAbstract()
                0x00119898                UartDeviceAbstract::ClearReceptionBuffer()
                0x00119f30                UartRingBuffer::alloc(int)
                0x001196a8                UartRingBuffer::used()
                0x00119df2                UartRingBuffer::~UartRingBuffer()
                0x001199d8                UartRingBuffer::write(char const*, int)
                0x001197b8                UartDeviceAbstract::TransmitData(unsigned char)
                0x001195b8                UartRingBuffer::UartRingBuffer()
                0x00119848                UartDeviceAbstract::ReceiveData(char&)
                0x001196de                UartRingBuffer::used_isr()
                0x00119fdc                UartDeviceAbstract::UartDeviceAbstract(int, int)
                0x00119e10                UartDeviceAbstract::~UartDeviceAbstract()
                0x00119826                UartDeviceAbstract::ClearTransmissionBuffer()
 .text          0x0011a106      0x5c0 obj/UARTNEC.o
                0x0011a516                UartNEC::UartNEC(uart_nec_t volatile*, UartDeviceAbstract::UARTParity, UartDeviceAbstract::UARTFrameBits, UartDeviceAbstract::UARTStopBits, UartDeviceAbstract::UARTBaudRate, int, int)
                0x0011a5ee                UartNEC::UartNEC(uart_nec_t volatile*, UartDeviceAbstract::UARTParity, UartDeviceAbstract::UARTFrameBits, UartDeviceAbstract::UARTStopBits, UartDeviceAbstract::UARTBaudRate, int, int)
                0x0011a39c                UartNEC::SetParity(UartDeviceAbstract::UARTParity, bool)
                0x0011a298                UartNEC::SetStopBits(UartDeviceAbstract::UARTStopBits, bool)
                0x0011a4ba                UartNEC::~UartNEC()
                0x0011a4e0                UartNEC::~UartNEC()
                0x0011a31a                UartNEC::SetFrameBits(UartDeviceAbstract::UARTFrameBits, bool)
                0x0011a130                UartNEC::SetBaudRate(UartDeviceAbstract::UARTBaudRate, bool)
                0x0011a106                UartNEC::HwInit()
                0x0011a494                UartNEC::~UartNEC()
 .text          0x0011a6c6      0x74a obj/UARTFPGA.o
                0x0011abee                UartFPGA::~UartFPGA()
                0x0011a6c6                UartFPGA::SetHwFlwCtl(UartDeviceAbstract::UARThwFlwCnt, bool)
                0x0011abb0                UartFPGA::~UartFPGA()
                0x0011a768                UartFPGA::SetBaudRate(UartDeviceAbstract::UARTBaudRate, bool)
                0x0011ac70                UartFPGA::UartFPGA(uart_fpga_t volatile*, UartDeviceAbstract::UARTParity, UartDeviceAbstract::UARTFrameBits, UartDeviceAbstract::UARTStopBits, UartDeviceAbstract::UARTBaudRate, UartDeviceAbstract::UARThwFlwCnt, int, int)
                0x0011aa2e                UartFPGA::HwInit()
                0x0011aad0                UartFPGA::TurnOff()
                0x0011ac2c                UartFPGA::~UartFPGA()
                0x0011ad40                UartFPGA::UartFPGA(uart_fpga_t volatile*, UartDeviceAbstract::UARTParity, UartDeviceAbstract::UARTFrameBits, UartDeviceAbstract::UARTStopBits, UartDeviceAbstract::UARTBaudRate, UartDeviceAbstract::UARThwFlwCnt, int, int)
                0x0011ab2e                UartFPGA::TurnOn()
                0x0011a8bc                UartFPGA::HwTransfer()
 .text          0x0011ae10      0xcc8 obj/PROTOCOLSTDUART.o
                0x0011af3c                stdUartProtocolAbstraction::stdUartProtocolAbstraction(UartDeviceAbstract*)
                0x0011b076                stdUartProtocolAbstraction::~stdUartProtocolAbstraction()
                0x0011b35a                stdUartProtocolAbstraction::addDataToReceivingBuffer(unsigned char, int)
                0x0011b570                stdUartProtocolAbstraction::calculateChecksum(unsigned char*, int)
                0x0011b902                stdUartProtocolAbstraction::checkTimeOutElapsed()
                0x0011b80a                stdUartProtocolAbstraction::setBypassMode(bool, UartDeviceAbstract*)
                0x0011b068                stdUartProtocolAbstraction::~stdUartProtocolAbstraction()
                0x0011b866                stdUartProtocolAbstraction::SendCommand(unsigned char*, int, int)
                0x0011b2fe                stdUartProtocolAbstraction::addDataToReceivingBuffer(unsigned char*, int, int)
                0x0011b29c                stdUartProtocolAbstraction::rstError()
                0x0011b486                stdUartProtocolAbstraction::popPacketReceived(int&)
                0x0011b084                stdUartProtocolAbstraction::restoreIntialCondition()
                0x0011b990                stdUartProtocolAbstraction::manager()
                0x0011b2f6                stdUartProtocolAbstraction::IsTransmissionAvailable()
                0x0011b092                stdUartProtocolAbstraction::setError(int, bool)
                0x0011b180                stdUartProtocolAbstraction::DataAnalyse()
                0x0011ae10                stdUartProtocolAbstraction::stdUartProtocolAbstraction(UartDeviceAbstract*)
                0x0011b594                stdUartProtocolAbstraction::popMultiMessage(unsigned char*, int&)
                0x0011b2b6                stdUartProtocolAbstraction::getLastError()
                0x0011b826                stdUartProtocolAbstraction::setLastDataReceivedBuffer(int)
                0x0011b6ca                stdUartProtocolAbstraction::pushMultiMessages(unsigned char*, int)
                0x0011b2fa                stdUartProtocolAbstraction::IsReceptionAvailable()
                0x0011b52c                stdUartProtocolAbstraction::getNewPacketReceived()
                0x0011b3a6                stdUartProtocolAbstraction::setReceivedOpCode(int)
                0x0011b2bc                stdUartProtocolAbstraction::popError()
                0x0011b532                stdUartProtocolAbstraction::rstNewPacketReceived()
 .text          0x0011bad8     0x227a obj/PROTOCOLSAUANDPC.o
                0x0011c52a                SauPcProtocol::sendSauPcWeightSamples(long*, int)
                0x0011d9be                SauPcProtocol::~SauPcProtocol()
                0x0011c6ac                SauPcProtocol::sendSauPcAcquisitionStopped(unsigned char)
                0x0011bc5c                SauPcProtocol::getMsg()
                0x0011c468                SauPcProtocol::sendSauPcEmgContactImpSamples(unsigned short*, int)
                0x0011c3ea                SauPcProtocol::sendSauPcWtp(unsigned short, unsigned char, unsigned char, unsigned long)
                0x0011c23e                SauPcProtocol::sendSauPcJumpedToLoader()
                0x0011c18c                SauPcProtocol::sendAcknowledge(unsigned char)
                0x0011c2f0                SauPcProtocol::sendSauPcBubble(unsigned char, unsigned char, bool, bool, bool, bool)
                0x0011bd90                SauPcProtocol::sendMotorsCalibrationValues(wtpCalibration_t*, unsigned char)
                0x0011c8aa                SauPcProtocol::sendSauPcEmgSamples(unsigned short*, int)
                0x0011bd06                SauPcProtocol::sendOverpressureInfo(short, overpressure_bitF_t, overpressure_bitF_t)
                0x0011c294                SauPcProtocol::sendSauPcRemoteKey(int)
                0x0011c94e                SauPcProtocol::sendSauPcGenSamples(unsigned short*, int)
                0x0011c02c                SauPcProtocol::sendPrsCalibrationValues(unsigned char)
                0x0011bbb8                SauPcProtocol::checksum(unsigned char, unsigned char)
                0x0011bad8                SauPcProtocol::sendEmgCalibrationValues(unsigned char)
                0x0011da0e                SauPcProtocol::~SauPcProtocol()
                0x0011da5e                SauPcProtocol::SauPcProtocol(UartDeviceAbstract*, int)
                0x0011c604                SauPcProtocol::sendSauPcErrors(unsigned char*, int)
                0x0011badc                SauPcProtocol::checkOpCode(unsigned char)
                0x0011c36c                SauPcProtocol::sendSauPcWth(unsigned char, unsigned short, unsigned char, unsigned char, unsigned short)
                0x0011c128                SauPcProtocol::sendDisplaySetting(unsigned char, unsigned char, unsigned char)
                0x0011c75e                SauPcProtocol::sendSauPcStatus(unsigned char*, int)
                0x0011bc98                SauPcProtocol::sendWtpSpeedCalibration(unsigned long, unsigned char)
                0x0011bf32                SauPcProtocol::sendWeightCalibrationValues(unsigned char)
                0x0011dbd8                SauPcProtocol::SauPcProtocol(UartDeviceAbstract*, int)
                0x0011c9f2                SauPcProtocol::sendSauPcInfo(unsigned short*, unsigned char, unsigned short, char*, char*, char*)
                0x0011bbec                SauPcProtocol::sendMsg(int)
                0x0011be5e                SauPcProtocol::sendGenericCalibrationValues(unsigned char)
                0x0011c708                SauPcProtocol::sendSauPcAcquisitionStarted()
                0x0011cc6a                SauPcProtocol::manager()
                0x0011d5be                SauPcProtocol::DataAnalyse()
                0x0011c806                SauPcProtocol::sendSauPcPrsSamples(short*, int)
                0x0011c1e8                SauPcProtocol::sendSauPc_emgz_JumpedToLoader()
 .text          0x0011dd52     0x2d34 obj/PROTOCOL_uC.o
                0x0011e99a                ADuC_PRS_protocol::packetLost_01_handler()
                0x0011df1e                uC_Protocol::__decode_StopAcquisitionCmd()
                0x0011e2e0                uC_Protocol::sendMsg(int)
                0x00120910                ADuC_GEN_protocol::ADuC_GEN_protocol(UartDeviceAbstract*, int)
                0x0011e21c                uC_Protocol::checkOpCode(unsigned char)
                0x0011f93e                uC_Protocol::__decode_Set_IEXC_Cmd()
                0x0011e4f8                ADuC_WEIGHT_protocol::samplePacket_01_decode()
                0x0011f5b4                uC_Protocol::sendRequest_Info()
                0x0011fd22                uC_Protocol::manager()
                0x0011e2c4                uC_Protocol::checkPacketsLost(unsigned char, unsigned char)
                0x0011ea02                ADuC_GEN_protocol::samplePacket_03_decode()
                0x0012096a                ADuC_PRS_protocol::ADuC_PRS_protocol(UartDeviceAbstract*, int)
                0x0011e9ce                ADuC_GEN_protocol::packetLost_03_handler()
                0x0011deb6                uC_Protocol::__decode_SatusCmd()
                0x0011dfcc                uC_Protocol::__decode_ErrorCmd()
                0x00120710                uC_Protocol::uC_Protocol(UartDeviceAbstract*, int)
                0x0012021a                uC_Protocol::DataAnalyse()
                0x0011f84e                uC_Protocol::__decode_Set_DAC_Cmd()
                0x0011df7a                uC_Protocol::__decode_NotAckCmd()
                0x0012056a                uC_Protocol::uC_Protocol(UartDeviceAbstract*, int)
                0x001208b6                ADuC_GEN_protocol::ADuC_GEN_protocol(UartDeviceAbstract*, int)
                0x0011e182                uC_Protocol::__decode_Sample_03_Cmd()
                0x0011ed40                ADuC_WEIGHT_protocol::ADuCDefaultSetting()
                0x0011dd52                uC_Protocol::__decode_InfoCmd()
                0x0011f616                uC_Protocol::__decode_Set_PWM_Cmd()
                0x0011f9ce                uC_Protocol::__decode_Set_ADC_Cmd()
                0x0011df4c                uC_Protocol::__decode_AckCmd()
                0x0011ebe0                ADuC_PRS_protocol::ADuCDefaultSetting()
                0x0011f2c4                uC_Protocol::sendRequest_Setting_PWM()
                0x0011f31c                uC_Protocol::sendRequest_Setting_DAC()
                0x0011e0f0                uC_Protocol::__decode_Sample_02_Cmd()
                0x00120a40                ADuC_WEIGHT_protocol::ADuC_WEIGHT_protocol(UartDeviceAbstract*, int)
                0x0011f160                uC_Protocol::sendSetting_ADC()
                0x0011e014                uC_Protocol::__decode_StartAcquisitionCmd()
                0x001209b2                ADuC_PRS_protocol::ADuC_PRS_protocol(UartDeviceAbstract*, int)
                0x0011e214                uC_Protocol::sendSetting()
                0x0011f374                uC_Protocol::sendRequest_Setting_IEXC()
                0x0011f47c                uC_Protocol::sendStartAcquisition()
                0x0012050c                uC_Protocol::~uC_Protocol()
                0x0011e700                ADuC_PRS_protocol::samplePacket_01_decode()
                0x0011f024                uC_Protocol::sendSetting_DAC()
                0x0011e6cc                ADuC_WEIGHT_protocol::packetLost_01_handler()
                0x0011f55c                uC_Protocol::sendRequest_Status()
                0x0011eea4                uC_Protocol::sendSetting_PWM()
                0x0011e38c                uC_Protocol::enableFrequencyCal(bool)
                0x0011e350                uC_Protocol::getMsg()
                0x001204ae                uC_Protocol::~uC_Protocol()
                0x0011f424                uC_Protocol::sendStopAcquisition()
                0x0011f4e0                uC_Protocol::sendRequestSelfTest(bool, int)
                0x0011e39c                uC_Protocol::calculateSamplingFrq()
                0x0011f3cc                uC_Protocol::sendRequest_Setting_ADC()
                0x0011ea78                ADuC_GEN_protocol::ADuCDefaultSetting()
                0x001209fa                ADuC_WEIGHT_protocol::ADuC_WEIGHT_protocol(UartDeviceAbstract*, int)
                0x0011e05e                uC_Protocol::__decode_Sample_01_Cmd()
                0x0011e290                uC_Protocol::checksum(unsigned char, unsigned char)
                0x0011f0d0                uC_Protocol::sendSetting_IEXC()
 .text          0x00120a86      0xa0a obj/PROTOCOLSAUANDEMGZ.o
                0x00120cc6                SauAndEmgzProtocol::sendFilteringSetting(unsigned char, unsigned char, unsigned char)
                0x00120b82                SauAndEmgzProtocol::getMsg()
                0x00120ec2                SauAndEmgzProtocol::DataAnalyse()
                0x00121210                SauAndEmgzProtocol::SauAndEmgzProtocol(UartDeviceAbstract*, int)
                0x00120d36                SauAndEmgzProtocol::sendStatusRequest()
                0x00120ade                SauAndEmgzProtocol::checksum(unsigned char, unsigned char)
                0x00120a86                SauAndEmgzProtocol::checkOpCode(unsigned char)
                0x00120e60                SauAndEmgzProtocol::sendInfoRequest()
                0x00120b12                SauAndEmgzProtocol::sendMsg(int)
                0x00121350                SauAndEmgzProtocol::SauAndEmgzProtocol(UartDeviceAbstract*, int)
                0x001211cc                SauAndEmgzProtocol::~SauAndEmgzProtocol()
                0x00120d98                SauAndEmgzProtocol::sendStopAcq()
                0x00120dfa                SauAndEmgzProtocol::sendStartAcq()
                0x00120bf4                SauAndEmgzProtocol::sendJumpedToLoaderRequest()
                0x00120bda                SauAndEmgzProtocol::getLastEmgzBoardErrors(unsigned short&, unsigned char&, unsigned short&)
                0x00120c56                SauAndEmgzProtocol::sendCheckContactImpedances(bool)
                0x001211ee                SauAndEmgzProtocol::~SauAndEmgzProtocol()
                0x00120bbe                SauAndEmgzProtocol::checkPacketsLost(unsigned char, unsigned char)
 .text          0x00121490     0x41fc obj/iWRAP_BLUEGIGA.o
                0x001225cc                iWRAP_BLUEGIGA_Protocol::NAME(char const*, int)
                0x00123e6a                iWRAP_BLUEGIGA_Protocol::CLOSE(int, int)
                0x00123a98                iWRAP_BLUEGIGA_Protocol::SET_BT_ROLE(iWRAP_BLUEGIGA_Protocol::master_slave_policy, iWRAP_BLUEGIGA_Protocol::link_policy, int, int)
                0x00122482                iWRAP_BLUEGIGA_Protocol::RESET(int)
                0x00123d18                iWRAP_BLUEGIGA_Protocol::INQUIRY(int, bool, iWRAP_BLUEGIGA_Protocol::inquiryAccessCode_LAP, int)
                0x00123c90                iWRAP_BLUEGIGA_Protocol::SELECT(int, int)
                0x0012297a                iWRAP_BLUEGIGA_Protocol::SCO_OPEN(int, int)
                0x00125460                iWRAP_BLUEGIGA_Protocol::~iWRAP_BLUEGIGA_Protocol()
                0x00121c1e                iWRAP_BLUEGIGA_Protocol::TESTMODE(int)
                0x00121cb6                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_INIT(char const*, int)
                0x0012559e                iWRAP_BLUEGIGA_Protocol::iWRAP_BLUEGIGA_Protocol(UartDeviceAbstract*, int)
                0x00121866                iWRAP_BLUEGIGA_Protocol::TEST(char const*, int)
                0x00122df6                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_MASTER(int, int)
                0x00123eec                iWRAP_BLUEGIGA_Protocol::CALL(char const*, char const*, iWRAP_BLUEGIGA_Protocol::conenct_mode, int, int)
                0x00121e62                iWRAP_BLUEGIGA_Protocol::SET_BT_AUTH(char const*, int)
                0x00122098                iWRAP_BLUEGIGA_Protocol::SET_BT_BDADDR(int)
                0x001254b0                iWRAP_BLUEGIGA_Protocol::iWRAP_BLUEGIGA_Protocol(UartDeviceAbstract*, int)
                0x00124d00                iWRAP_BLUEGIGA_Protocol::manager()
                0x00121fe2                iWRAP_BLUEGIGA_Protocol::SET_BT_NAME(char const*, int)
                0x00121a4e                iWRAP_BLUEGIGA_Protocol::SDP_ADD(char const*, char const*, int)
                0x00122c08                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_SNIFF(int, int, int)
                0x00121d6e                iWRAP_BLUEGIGA_Protocol::SET_BT_PAIR(char const*, char const*, int)
                0x001241aa                iWRAP_BLUEGIGA_Protocol::DataAnalyse()
                0x0012351c                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_BAUD(iWRAP_BLUEGIGA_Protocol::baud_rate, iWRAP_BLUEGIGA_Protocol::parity, iWRAP_BLUEGIGA_Protocol::stop_bits, int)
                0x001237e8                iWRAP_BLUEGIGA_Protocol::SET_BT_POWER(int, int, bool, int)
                0x001228f2                iWRAP_BLUEGIGA_Protocol::BOOT(iWRAP_BLUEGIGA_Protocol::boot_mode, int)
                0x00121726                iWRAP_BLUEGIGA_Protocol::ESCAPE_SEQUENCE(int)
                0x0012396a                iWRAP_BLUEGIGA_Protocol::SET_BT_SNIFF(int, int)
                0x00121920                iWRAP_BLUEGIGA_Protocol::SCO_ENABLE(int)
                0x001239f4                iWRAP_BLUEGIGA_Protocol::SET_BT_SNIFF(int, int, int, int, int)
                0x00122d3a                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_PARK(int, int, int, int)
                0x00123472                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_CD(unsigned char, bool, int)
                0x00125410                iWRAP_BLUEGIGA_Protocol::~iWRAP_BLUEGIGA_Protocol()
                0x00122ba6                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_MSC(int, char const*, int)
                0x00122d98                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_SLAVE(int, int)
                0x00121554                iWRAP_BLUEGIGA_Protocol::sendMsg(int)
                0x001236e4                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_AUTOCALL(char const*, int, char const*, int)
                0x00123b38                iWRAP_BLUEGIGA_Protocol::SET_BT_PAGEMODE(iWRAP_BLUEGIGA_Protocol::page_mode, int, iWRAP_BLUEGIGA_Protocol::page_scan_mode, int)
                0x00122794                iWRAP_BLUEGIGA_Protocol::PING(int, int)
                0x00122eb2                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_MSC(iWRAP_BLUEGIGA_Protocol::msc_mode, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, int)
                0x00122cd8                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_PARK(int, int, int)
                0x0012212c                iWRAP_BLUEGIGA_Protocol::SET_PROFILE(iWRAP_BLUEGIGA_Protocol::profile_name, char const*, int)
                0x00123356                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_ECHO(iWRAP_BLUEGIGA_Protocol::echo_mask, int)
                0x00121690                iWRAP_BLUEGIGA_Protocol::checkSyntaxErrorTimer()
                0x001223f4                iWRAP_BLUEGIGA_Protocol::INFO(int)
                0x001222b6                iWRAP_BLUEGIGA_Protocol::SET(int)
                0x001238d0                iWRAP_BLUEGIGA_Protocol::SET_BT_SSP(iWRAP_BLUEGIGA_Protocol::spp_capabilities, iWRAP_BLUEGIGA_Protocol::spp_mitm, int)
                0x00122aa2                iWRAP_BLUEGIGA_Protocol::RSSI(int, int)
                0x00124128                iWRAP_BLUEGIGA_Protocol::waitSyntaxErrorSyncroError(int)
                0x001219be                iWRAP_BLUEGIGA_Protocol::SLEEP(int)
                0x00122516                iWRAP_BLUEGIGA_Protocol::PAIR(char const*, int)
                0x0012308e                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_BIND(unsigned char, unsigned short, iWRAP_BLUEGIGA_Protocol::direction, char const*, int)
                0x0012320c                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_MUX(bool, int)
                0x0012161a                iWRAP_BLUEGIGA_Protocol::getMsg(iWRAP_BLUEGIGA_Protocol::iWRAP_msg_struct&)
                0x00122a10                iWRAP_BLUEGIGA_Protocol::TXPOWER(int, int)
                0x00121804                iWRAP_BLUEGIGA_Protocol::AT(int)
                0x0012281a                iWRAP_BLUEGIGA_Protocol::ECHO(int, char const*, int)
                0x00123bda                iWRAP_BLUEGIGA_Protocol::SET_BT_LAP(iWRAP_BLUEGIGA_Protocol::inquiryAccessCode_LAP, int)
                0x00121b3e                iWRAP_BLUEGIGA_Protocol::SDP(char const*, char const*, int)
                0x00121f24                iWRAP_BLUEGIGA_Protocol::SET_BT_CLASS(char const*, int)
                0x00121490                iWRAP_BLUEGIGA_Protocol::sendMsg(iWRAP_BLUEGIGA_Protocol::iWRAP_msg_struct)
                0x00122c6a                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_SNIFF(int, int, int, int, int, int)
                0x001233e4                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_CONFIG(iWRAP_BLUEGIGA_Protocol::configuration_values, int)
                0x00122b26                iWRAP_BLUEGIGA_Protocol::BER(int, int)
                0x00122684                iWRAP_BLUEGIGA_Protocol::LIST(int)
                0x001232b0                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_ESCAPE(char, unsigned short, iWRAP_BLUEGIGA_Protocol::dtr_mode, int)
                0x0012270e                iWRAP_BLUEGIGA_Protocol::IC(int)
                0x0012233e                iWRAP_BLUEGIGA_Protocol::AUTH(char const*, int)
                0x00122e54                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_ACTIVE(int, int)
 .text          0x0012568c     0x15ea obj/iWRAP_BLUEGIGA_SPP.o
                0x001259dc                iWRAP_BLUEGIGA_SPP::getMsg(iWRAP_BLUEGIGA_SPP::iWRAP_SSP_msg_struct&)
                0x00125b68                iWRAP_BLUEGIGA_SPP::BER()
                0x00125b6c                iWRAP_BLUEGIGA_SPP::RSSI()
                0x00126acc                iWRAP_BLUEGIGA_SPP::~iWRAP_BLUEGIGA_SPP()
                0x00126aaa                iWRAP_BLUEGIGA_SPP::~iWRAP_BLUEGIGA_SPP()
                0x00125aac                iWRAP_BLUEGIGA_SPP::RESET()
                0x00125c8c                iWRAP_BLUEGIGA_SPP::manager()
                0x00125ace                iWRAP_BLUEGIGA_SPP::SET_BT_NAME()
                0x00125a6e                iWRAP_BLUEGIGA_SPP::VERIFY_BAUD_RATE()
                0x00125b64                iWRAP_BLUEGIGA_SPP::SET_BT_POWER()
                0x00125b70                iWRAP_BLUEGIGA_SPP::TXPOWER()
                0x00125aec                iWRAP_BLUEGIGA_SPP::SET_PROFILE()
                0x00125b46                iWRAP_BLUEGIGA_SPP::SET_CONTROL_MSC()
                0x00125b74                iWRAP_BLUEGIGA_SPP::strMsg(char*, int&)
                0x00126bb2                iWRAP_BLUEGIGA_SPP::iWRAP_BLUEGIGA_SPP(UartDeviceAbstract*, int)
                0x00125ab0                iWRAP_BLUEGIGA_SPP::INFO()
                0x00126aee                iWRAP_BLUEGIGA_SPP::iWRAP_BLUEGIGA_SPP(UartDeviceAbstract*, int)
                0x00125b0a                iWRAP_BLUEGIGA_SPP::SET_BT_AUTH()
                0x00125a52                iWRAP_BLUEGIGA_SPP::changeStatus(iWRAP_BLUEGIGA_SPP::states)
                0x001256be                iWRAP_BLUEGIGA_SPP::iWRAP_timeout_and_error_handler(char*, int, bool)
                0x00125a8c                iWRAP_BLUEGIGA_SPP::CLOSE()
                0x00125b28                iWRAP_BLUEGIGA_SPP::SET_BT_SSP()
                0x00125852                iWRAP_BLUEGIGA_SPP::sendMsg(iWRAP_BLUEGIGA_SPP::iWRAP_SSP_msg_struct)
                0x00125c2c                iWRAP_BLUEGIGA_SPP::CALL(char*)
                0x0012568c                iWRAP_BLUEGIGA_SPP::reset_machinesState()
                0x00125916                iWRAP_BLUEGIGA_SPP::sendMsg(int)
 .text          0x00126c76     0x478e obj/SAU7000_MANAGER.o
                0x00126c76                SAU7000_Manager::~SAU7000_Manager()
                0x00128810                SAU7000_Manager::IR_remoteManager()
                0x00126ca2                SAU7000_Manager::checkADuCStatus(unsigned char)
                0x001277de                SAU7000_Manager::writeToEE_weightCalValue()
                0x00129298                SAU7000_Manager::manager()
                0x00127a22                SAU7000_Manager::changeBTcheckStatus(SAU7000_Manager::BTchk_status)
                0x00127718                SAU7000_Manager::writeToEE_genCalValue(int)
                0x0012734a                SAU7000_Manager::readToEE_genCalValue(int)
                0x00126c7a                SAU7000_Manager::rstPrsSamples()
                0x001288ce                SAU7000_Manager::stop_sampling_and_all_peripherals()
                0x00127aa0                SAU7000_Manager::changeSau7000status(SAU7000_Manager::Sau7000_Status)
                0x001275ba                SAU7000_Manager::readToEE_prsCalValue()
                0x00128542                SAU7000_Manager::getADuCsStatus()
                0x001278fe                SAU7000_Manager::writeToEE_prsCalValue()
                0x00128d0e                SAU7000_Manager::KeyboardManager()
                0x001271fe                SAU7000_Manager::stopWth()
                0x00128732                SAU7000_Manager::ADuCsNormalMode()
                0x001284f8                SAU7000_Manager::getADuCsInfo()
                0x00126c90                SAU7000_Manager::rstWeightSamples()
                0x0012805a                SAU7000_Manager::SAU7000_Manager(Keyboard*, SauPcProtocol*)
                0x0012717a                SAU7000_Manager::stopWtp()
                0x00129154                SAU7000_Manager::ADuC_startupChecks_Init()
                0x00126c78                SAU7000_Manager::~SAU7000_Manager()
                0x00127d74                SAU7000_Manager::SAU7000_Manager(Keyboard*, SauPcProtocol*)
                0x00128688                SAU7000_Manager::startADuCs()
                0x00126d02                SAU7000_Manager::setOverpressureAdcLimit()
                0x00128610                SAU7000_Manager::setADuCsAquisitionParameters()
                0x00129044                SAU7000_Manager::watchDogManager()
                0x00128340                SAU7000_Manager::sendErrorsMsg()
                0x00127468                SAU7000_Manager::readToEE_weightCalValue()
                0x0012858c                SAU7000_Manager::stopADuCs()
 .text          0x0012b404     0x26a6 obj/DPYDRV.o
                0x0012c986                _ST7565_waitIfBusy
                0x0012b45c                _display_testSignals
                0x0012b812                _drv_getTextBlock
                0x0012b42e                _drv_getGraphInfo
                0x0012b5d2                _drv_putTextChar
                0x0012bb60                _drv_vline
                0x0012b59a                _drv_setTextCursDir
                0x0012c69c                _drv_setCursDir
                0x0012be24                _drv_putimage
                0x0012c6b6                _drv_puticon
                0x0012c962                _ST7565_delay
                0x0012bada                _drv_putpixel
                0x0012cb84                _display_init
                0x0012b948                _drv_hline
                0x0012cee2                _drv_putForeChar
                0x0012b480                _display_brightness
                0x0012d166                _drv_putGraphChar
                0x0012b7be                _drv_setTextPointer
                0x0012bdc6                _drv_getpixel
                0x0012cb1e                _display_contrast
                0x0012c99e                _ST7565_data_wr
                0x0012b450                _display_chrsetLoad
                0x0012b908                _drv_putGraphBlock
                0x0012c982                _ST7565_data_rd
                0x0012b544                _drv_setTextCursPos
                0x0012b818                _drv_putTextBlock
                0x0012b5a4                _drv_setGraphCursPos
                0x0012b404                _drv_getTextInfo
                0x0012ca08                _ST7565_cmd_wr
                0x0012b8c8                _drv_getGraphBlock
                0x0012c698                _drv_putPcxPicture
                0x0012ca72                _display_update
                0x0012b876                _drv_fillGraphBlock
                0x0012b460                _display_backlight
                0x0012b7c8                _drv_fillTextBlock
                0x0012b7bc                _drv_scrollTextScreen
 .text          0x0012daaa      0x23e obj/CHRSET.o
                0x0012dbde                _charset_select
                0x0012db1c                _charset_width
                0x0012db48                _charset_getIndex
                0x0012dc8a                _charset_init
                0x0012daaa                _charset_getCurrent
                0x0012dab4                _charset_register
                0x0012db0a                _charset_height
                0x0012daf0                _charset_select_num
 .text          0x0012dce8      0xd62 obj/GRAPH.o
                0x0012e13a                _bar
                0x0012df5c                _getimage
                0x0012dd4a                _setbkcolor
                0x0012df0c                _setvisualpage
                0x0012deb6                _setfillstyle
                0x0012dd04                _getmaxx
                0x0012df0e                _setviewport
                0x0012df54                _settextjustify
                0x0012e3ee                _rectangle
                0x0012e496                _line
                0x0012dfee                _gprintf
                0x0012dd54                _getbkcolor
                0x0012e0cc                _putsmallicon
                0x0012e750                _moverel
                0x0012e9e2                _getarccoords
                0x0012e690                _fillpoly
                0x0012def2                _getaspectratio
                0x0012df0a                _setactivepage
                0x0012dee0                _getfillsettings
                0x0012dcf6                _gety
                0x0012def0                _setaspectratio
                0x0012e7be                _gprintfxy
                0x0012df64                _grapherrormsg
                0x0012df9a                _pieslice
                0x0012dd3c                _getmaxcolor
                0x0012e10e                _putpcxpicture
                0x0012dd2e                _getcolor
                0x0012df52                _settextstyle
                0x0012dee2                getfillpattern(unsigned char*)
                0x0012df9e                _fillellipse
                0x0012e5c8                drawpoly(int, int const*, int)
                0x0012e6fa                _linerel
                0x0012e3d8                _putpixel
                0x0012e124                _putimage
                0x0012df5a                _floodfill
                0x0012defc                _setrgbpalette
                0x0012df58                _arc
                0x0012e24c                _circle
                0x0012dd24                _setcolor
                0x0012df56                _setusercharsize
                0x0012e848                _outtextxy
                0x0012e822                _gputcxy
                0x0012e066                _textheight
                0x0012e03a                _gputc
                0x0012e0ee                _puticon
                0x0012e798                _gputsxy
                0x0012def4                _getpalettesize
                0x0012df10                _getviewsettings
                0x0012e96e                _getpixel
                0x0012defe                _setallpalette
                0x0012df9c                _sector
                0x0012dfa0                _gputs
                0x0012e984                _cleardevice
                0x0012dd14                _getmaxy
                0x0012df98                _ellipse
                0x0012dd64                _setlinestyle
                0x0012ea04                setfillpattern(unsigned char const*, int)
                0x0012e1ce                _bar3d
                0x0012def8                _setpalette
                0x0012e6a8                _lineto
                0x0012df62                _gettextsettings
                0x0012e782                _moveto
                0x0012e050                _textwidth
                0x0012e8fe                _clearviewport
                0x0012dd62                _setwritemode
                0x0012e07c                _outtext
                0x0012defa                _getpalette
                0x0012df00                _getdefaultpalette
                0x0012dce8                _getx
                0x0012df5e                _imagesize
                0x0012de94                _getlinesettings
 .text          0x0012ea4a     0x2402 obj/APPMENU.o
                0x0012eae4                CMenuPage::CMenuPage()
                0x0012fbee                CMenuSwitchOff::CMenuSwitchOff()
                0x0012fa64                CMenuMain::setWTPisMoving(bool)
                0x0012f7fa                CMenuGeneralInfo::setSAUstate(char const*)
                0x0012ea7e                CMenuList::CMenuList()
                0x001309ec                CMenuMessages::Draw()
                0x0012fb5a                CMenuGeneralInfo::CMenuGeneralInfo()
                0x001305ec                CMenuADuCfrqCal::Refresh()
                0x00130602                CMenuADuCstatus::Refresh()
                0x0012eb7e                CMenuLogo::Refresh()
                0x0012ec1e                CMenuPage::~CMenuPage()
                0x00130052                CMenuADuCfrqCal::CMenuADuCfrqCal()
                0x0012f1b6                CMenuMain::setWTPspeed(int)
                0x00130d78                CMenuList::Entry()
                0x001304a2                CMenuInfo::Refresh()
                0x0012f026                CMenuMain::setWTHspeed(int)
                0x00130b64                CMenuADuCstatus::Draw()
                0x0012fc72                CMenuSwitchOff::CMenuSwitchOff()
                0x0013095a                CMenuSwitchOff::Draw()
                0x0012fe4a                CMenuInfo::CMenuInfo()
                0x0012f984                CMenuMain::setLimitSwitch(CMenuMain::LmtSwStatus, CMenuMain::LmtSwStatus)
                0x0012f3a0                CMenuADuCfrqCal::setADuCinfo(int, char const*)
                0x00130346                CMenuGeneralInfo::Refresh()
                0x0012fba4                CMenuGeneralInfo::CMenuGeneralInfo()
                0x00130840                CMenuLogo::Draw()
                0x00130026                CMenuADuCfrqCal::CMenuADuCfrqCal()
                0x0012efc6                CMenuMain::writeWtpSpeed()
                0x0012ff38                CMenuInfo::CMenuInfo()
                0x0012f2d6                CMenuInfo::addStr(char const*)
                0x001307f8                CMenuList::ChangePage(CMenuPage*)
                0x0012edc6                CMenuMessages::setMessage(int, char const*)
                0x0012fda0                CMenuMessages::CMenuMessages()
                0x0012eb0c                CMenuPage::~CMenuPage()
                0x00130a7e                CMenuInfo::Draw()
                0x0012f924                CMenuMain::drawWthLimitSwitches()
                0x00130c4e                CMenuMain::Draw()
                0x0012eb4c                CMenuLogo::CMenuLogo()
                0x00130618                CMenuMain::Refresh()
                0x00130a94                CMenuADuCfrqCal::Draw()
                0x0012ec40                CMenuSwitchOff::setMessage(int, char const*)
                0x0013007e                CMenuADuCstatus::CMenuADuCstatus()
                0x0012eab2                CMenuList::BackPage()
                0x0012eb80                CMenuInfo::strClear()
                0x0012f5d8                CMenuADuCstatus::setADuCstate(int, char const*)
                0x0012fab2                CMenuGeneralInfo::setCOMMico(CMenuGeneralInfo::COMM_icoType, bool)
                0x001308dc                CMenuGeneralInfo::Draw()
                0x0012f8a2                CMenuMain::setWTHisMoving(bool)
                0x0012eafe                CMenuPage::~CMenuPage()
                0x0012ea4a                CMenuList::CMenuList()
                0x001300d6                CMenuMain::CMenuMain()
                0x0012eaca                CMenuPage::CMenuPage()
                0x0013048c                CMenuMessages::Refresh()
                0x001303f0                CMenuSwitchOff::Refresh()
                0x0012eb1a                CMenuLogo::CMenuLogo()
                0x0012ef4c                CMenuMain::writeWthSpeed()
                0x0013020e                CMenuMain::CMenuMain()
                0x001300aa                CMenuADuCstatus::CMenuADuCstatus()
                0x0012fcf6                CMenuMessages::CMenuMessages()
 .text          0x00130e4c        0x0 obj/ICONS.o
 .text          0x00130e4c      0x4c0 obj/EEPROM_SPI.o
                0x001312e0                init_eeprom_spi()
                0x00131214                ee_spi_read(unsigned char, unsigned char*, int)
                0x00130f8c                ee_spi_write(unsigned char, unsigned char*, int)
 .text          0x0013130c        0x0 obj/SAU7000_ADuC_SOURCE.o
 .text          0x0013130c      0x9d8 obj/PROTOCOLADuCfwUPGRADE.o
                0x00131c76                ADuCfwUpgrade_protocol::ADuCfwUpgrade_protocol(UartDeviceAbstract*, int)
                0x00131bc4                ADuCfwUpgrade_protocol::~ADuCfwUpgrade_protocol()
                0x0013174e                ADuCfwUpgrade_protocol::sendSyncro()
                0x0013130c                ADuCfwUpgrade_protocol::getMsg()
                0x00131c08                ADuCfwUpgrade_protocol::ADuCfwUpgrade_protocol(UartDeviceAbstract*, int)
                0x0013177a                ADuCfwUpgrade_protocol::DataAnalyse()
                0x001315c0                ADuCfwUpgrade_protocol::programFlash(unsigned long, unsigned char*, unsigned char)
                0x00131910                ADuCfwUpgrade_protocol::manager()
                0x00131be6                ADuCfwUpgrade_protocol::~ADuCfwUpgrade_protocol()
                0x001313b8                ADuCfwUpgrade_protocol::rstProtocol()
                0x00131690                ADuCfwUpgrade_protocol::erasePage(unsigned long, unsigned char, int)
                0x001314e2                ADuCfwUpgrade_protocol::verifyFlash(unsigned long, unsigned char*, unsigned char)
                0x00131720                ADuCfwUpgrade_protocol::eraseDevice()
                0x0013146a                ADuCfwUpgrade_protocol::runDevice()
                0x00131348                ADuCfwUpgrade_protocol::sendMsg(int)
                0x00131406                ADuCfwUpgrade_protocol::ADuC_upgr_getInfoCmdDecode()
 .text          0x00131ce4      0x624 obj/ADuC_UPGRADEMANAGER.o
                0x00131f76                ADuCUpgradeManger::upgrade()
                0x00132006                ADuCUpgradeManger::manager()
                0x00131d24                ADuCUpgradeManger::~ADuCUpgradeManger()
                0x00131fe0                ADuCUpgradeManger::erase()
                0x00131d4c                ADuCUpgradeManger::getLoaderRevision()
                0x0013222e                ADuCUpgradeManger::syncronize()
                0x00131eee                ADuCUpgradeManger::run()
                0x00131d04                ADuCUpgradeManger::ADuCUpgradeManger(ADuCfwUpgrade_protocol*)
                0x00131d26                ADuCUpgradeManger::~ADuCUpgradeManger()
                0x00131d28                ADuCUpgradeManger::getProductID()
                0x00131de2                ADuCUpgradeManger::ADuC_hwSerialLoader()
                0x00131f0c                ADuCUpgradeManger::verify()
                0x00131d5e                ADuCUpgradeManger::keepReset()
                0x00132254                ADuCUpgradeManger::abort()
                0x00131d3a                ADuCUpgradeManger::getMemorySize()
                0x00131ce4                ADuCUpgradeManger::ADuCUpgradeManger(ADuCfwUpgrade_protocol*)
                0x00132298                ADuCUpgradeManger::startUpgrade()
                0x00131ec0                ADuCUpgradeManger::cycle_delay(int)
                0x00131d6e                ADuCUpgradeManger::ADuC_hwReset()
                0x00131dcc                ADuCUpgradeManger::hwReset()
 .text          0x00132308     0x2984 obj/TIMER_NEC.o
                0x00132d2c                Timer_NEC_P024::setFrequency(double, Timer_NEC::CCRn)
                0x0013231a                Timer_NEC::Timer_NEC(NEC_timer_Generic_t volatile*)
                0x00133dfa                Timer_NEC_Q::setTxnOL3(Timer_NEC::TxnOL3, bool)
                0x00133da6                Timer_NEC_Q::setTxnOE2(Timer_NEC::TxnOE2, bool)
                0x00133226                Timer_NEC_P024::setPrescaler(Timer_NEC_P024::Prescalers, bool)
                0x001333b4                Timer_NEC_P024::setCCR1(unsigned short, bool, bool)
                0x001323d4                Timer_NEC::setTimerMode(Timer_NEC::TimerMode, bool)
                0x00132724                Timer_NEC::setValidEdgeExtCountTIxn1(Timer_NEC::ValidEdgeExtCountTIxn1, bool)
                0x00133f32                Timer_NEC_Q::setValidEdgeCaptureTrigTIxn3(Timer_NEC::ValidEdgeCaptureTrigTIxn3, bool)
                0x00132ca8                Timer_NEC_P024::Timer_NEC_P024(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x00132abe                Timer_NEC_P::setPeriod(double, Timer_NEC::CCRn)
                0x001338fe                Timer_NEC_P135::calculateFrequency(Timer_NEC::CCRn)
                0x00134456                Timer_NEC_Q::setPrescaler(Timer_NEC_Q::Prescalers, bool, bool)
                0x00133e50                Timer_NEC_Q::setTxnOE3(Timer_NEC::TxnOE3, bool)
                0x00132608                Timer_NEC::setValidEdgeCaptureTrigTIxn1(Timer_NEC::ValidEdgeCaptureTrigTIxn1, bool)
                0x00132a52                Timer_NEC_P::Timer_NEC_P(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x001325b4                Timer_NEC::setTxnOE0(Timer_NEC::TxnOE0, bool)
                0x0013351e                Timer_NEC_P135::setFrequency(double, Timer_NEC::CCRn)
                0x00132c58                Timer_NEC_P024::Timer_NEC_P024(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x0013419a                Timer_NEC_Q::setCCR2(unsigned short, bool, bool)
                0x0013250c                Timer_NEC::setTxnOE1(Timer_NEC::TxnOE1, bool)
                0x00134230                Timer_NEC_Q::setCCR3(unsigned short, bool, bool)
                0x00132560                Timer_NEC::setTxnOL0(Timer_NEC::TxnOL0, bool)
                0x00134366                Timer_NEC_Q::setCCIC1_interrupt(bool, unsigned char)
                0x00134104                Timer_NEC_Q::setCCR1(unsigned short, bool, bool)
                0x0013299c                Timer_NEC::setCCR(Timer_NEC::CCRn, unsigned short)
                0x0013232c                Timer_NEC::setTxnEST(Timer_NEC::TxnEST, bool)
                0x0013310c                Timer_NEC_P024::calculateFrequency(Timer_NEC::CCRn)
                0x00132cf8                Timer_NEC_P024::setEnable(bool)
                0x001324b8                Timer_NEC::setTxnOL1(Timer_NEC::TxnOL1, bool)
                0x0013406e                Timer_NEC_Q::setCCR0(unsigned short, bool, bool)
                0x00132894                Timer_NEC::setTxnCCR0_selection(Timer_NEC::TxnCCR0_selection, bool)
                0x00134316                Timer_NEC_Q::setCCIC0_interrupt(bool, unsigned char)
                0x00132308                Timer_NEC::Timer_NEC(NEC_timer_Generic_t volatile*)
                0x0013477e                Timer_NEC_Q::setFrequency(double, Timer_NEC::CCRn)
                0x001327b2                Timer_NEC::setValidEdgeExtCountTIxn0(Timer_NEC::ValidEdgeExtCountTIxn0, bool)
                0x00133d1e                Timer_NEC_Q::setEnable(bool)
                0x00134406                Timer_NEC_Q::setCCIC3_interrupt(bool, unsigned char)
                0x00134664                Timer_NEC_Q::calculateFrequency(Timer_NEC::CCRn)
                0x00132a88                Timer_NEC_P::Timer_NEC_P(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x00132380                Timer_NEC::setTxnEEE(Timer_NEC::TxnEEE, bool)
                0x00132b18                Timer_NEC_P::setCCR0(unsigned short, bool, bool)
                0x00133c72                Timer_NEC_Q::Timer_NEC_Q(NEC_timerQ_t volatile*, NEC_timerQ_Int_t volatile*)
                0x00133b10                Timer_NEC_P135::setCCR0(unsigned short, bool, bool)
                0x001343b6                Timer_NEC_Q::setCCIC2_interrupt(bool, unsigned char)
                0x00132696                Timer_NEC::setValidEdgeCaptureTrigTIxn0(Timer_NEC::ValidEdgeCaptureTrigTIxn0, bool)
                0x00132c08                Timer_NEC_P::setCCIC1_interrupt(bool, unsigned char)
                0x0013344a                Timer_NEC_P135::Timer_NEC_P135(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x0013331e                Timer_NEC_P024::setCCR0(unsigned short, bool, bool)
                0x00133a18                Timer_NEC_P135::setPrescaler(Timer_NEC_P135::Prescalers, bool)
                0x00133d52                Timer_NEC_Q::setTxnOL2(Timer_NEC::TxnOL2, bool)
                0x00132bb8                Timer_NEC_P::setCCIC0_interrupt(bool, unsigned char)
                0x00133ca8                Timer_NEC_Q::setPeriod(double, Timer_NEC::CCRn)
                0x001328e8                Timer_NEC::getCCR(Timer_NEC::CCRn)
                0x0013349a                Timer_NEC_P135::Timer_NEC_P135(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x001334ea                Timer_NEC_P135::setEnable(bool)
                0x00133c3c                Timer_NEC_Q::Timer_NEC_Q(NEC_timerQ_t volatile*, NEC_timerQ_Int_t volatile*)
                0x00133fc4                Timer_NEC_Q::setTxnCCR2_selection(Timer_NEC::TxnCCR2_selection, bool)
                0x00133ea4                Timer_NEC_Q::setValidEdgeCaptureTrigTIxn2(Timer_NEC::ValidEdgeCaptureTrigTIxn2, bool)
                0x001342c6                Timer_NEC_Q::setOVIC_interrupt(bool, unsigned char)
                0x00132840                Timer_NEC::setTxnCCR1_selection(Timer_NEC::TxnCCR1_selection, bool)
                0x00134018                Timer_NEC_Q::setTxnCCR3_selection(Timer_NEC::TxnCCR3_selection, bool)
                0x00133ba6                Timer_NEC_P135::setCCR1(unsigned short, bool, bool)
                0x00132b68                Timer_NEC_P::setOVIC_interrupt(bool, unsigned char)
                0x00132b40                Timer_NEC_P::setCCR1(unsigned short, bool, bool)
 .text          0x00134c8c      0x190 obj/PWMABSTRACT.o
                0x00134de0                pwmAbstract::setPwmTonDuty(unsigned short)
                0x00134dfe                pwmAbstract::setPwmToffDuty(unsigned short)
                0x00134cce                pwmAbstract::pwmAbstract(TimerAbstract*)
                0x00134d44                pwmAbstract::pwmAbstract(TimerAbstract*)
                0x00134c8c                pwmAbstract::~pwmAbstract()
                0x00134dba                pwmAbstract::setPwmPeriod(double)
                0x00134ca8                pwmAbstract::setPwmFrq(double)
                0x00134c9a                pwmAbstract::~pwmAbstract()
 .text          0x00134e1c      0xdb8 obj/PWM_NEC.o
                0x00135b40                NECpwmTimer::NECpwmTimer(Timer_NEC*, unsigned short)
                0x00134fc4                NECpwMeasurentTimer::getTime(unsigned long)
                0x001350cc                NECpwMeasurentTimer::rstTimerOverflow()
                0x00135940                NECpwmTimer::setPwmToffDuty(unsigned short)
                0x001357ec                NECpwMeasurentTimer::pulseMeasureAvailableHigh()
                0x0013593a                NECpwMeasurentTimer::setMeasurementState(pwMeasurementAbstract::MeasurementState)
                0x0013553e                NECpwMeasurentTimer::getPulseMeasurement(pwMeasurementAbstract::PulseWidthMeasurement&)
                0x001350fc                NECpwMeasurentTimer::setTimeBase(unsigned long, pwMeasurementAbstract::TimeUnit)
                0x001357f8                NECpwMeasurentTimer::manager()
                0x00134e1c                NECpwmTimer::setPwmFrq(double)
                0x00135382                NECpwMeasurentTimer::NECpwMeasurentTimer(Timer_NEC*, Timer_NEC::CCRn)
                0x00134f72                NECpwmTimer::setPulseCountEnable(bool)
                0x0013589c                NECpwMeasurentTimer::pushCountLow(unsigned long)
                0x001359d4                NECpwmTimer::setPwmTonDuty(unsigned short)
                0x00134e7a                NECpwmTimer::setPwmPeriod(double)
                0x00135898                NECpwMeasurentTimer::popCountLow(unsigned long&)
                0x00135aac                NECpwmTimer::NECpwmTimer(Timer_NEC*, unsigned short)
                0x00135a68                NECpwmTimer::~NECpwmTimer()
                0x00134fb6                NECpwMeasurentTimer::~NECpwMeasurentTimer()
                0x001357e0                NECpwMeasurentTimer::pulseMeasureAvailableLow()
                0x00134ed8                NECpwmTimer::setEnable(bool, bool)
                0x00134fa8                NECpwMeasurentTimer::~NECpwMeasurentTimer()
                0x00135690                NECpwMeasurentTimer::getPulseMeasurementLow(unsigned long&)
                0x00135934                NECpwMeasurentTimer::whatMeasuring()
                0x001350d2                NECpwMeasurentTimer::setEnable(bool)
                0x0013572c                NECpwMeasurentTimer::getPulseMeasurementHigh(unsigned long&)
                0x001357cc                NECpwMeasurentTimer::pulseMeasureAvailable()
                0x00135460                NECpwMeasurentTimer::NECpwMeasurentTimer(Timer_NEC*, Timer_NEC::CCRn)
                0x00135a8a                NECpwmTimer::~NECpwmTimer()
                0x001357fa                NECpwMeasurentTimer::popCountHigh(unsigned long&)
                0x001357fe                NECpwMeasurentTimer::pushCountHigh(unsigned long)
 .text          0x00135bd4      0xbf8 obj/WTH.o
                0x00136122                WthMenfis::checkLimitSwitchesStatus()
                0x00136116                WthMenfis::setLmtSwLowStatus(WthAbstract::LimitSwitchStatus)
                0x0013649a                WthMenfis::WthMenfis(pwmAbstract*, pwmAbstract*)
                0x00135be2                WthMenfis::~WthMenfis()
                0x00135bf0                WthMenfis::setLinearVelocity(double, bool)
                0x0013611c                WthMenfis::setLmtSwHighStatus(WthAbstract::LimitSwitchStatus)
                0x0013658c                WthMenfis::manger()
                0x00135d06                WthMenfis::setEnable(bool, bool)
                0x00135bd4                WthMenfis::~WthMenfis()
                0x00135ff2                WthMenfis::setStep(double)
                0x00135f8c                WthMenfis::power(bool)
                0x001363a8                WthMenfis::WthMenfis(pwmAbstract*, pwmAbstract*)
 .text          0x001367cc      0x8a6 obj/IR_Toshiba_protocol.o
                0x001369fa                Toshiba_IR_protocol::dcdData_bit_hadler(pwMeasurementAbstract::PulseWidthMeasurement)
                0x00136838                Toshiba_IR_protocol::Toshiba_IR_protocol(pwMeasurementAbstract*)
                0x001368b2                Toshiba_IR_protocol::~Toshiba_IR_protocol()
                0x00136936                Toshiba_IR_protocol::pushError(IR_protocolAbstract::IR_protocolErrors)
                0x001368a4                Toshiba_IR_protocol::~Toshiba_IR_protocol()
                0x00136c2a                Toshiba_IR_protocol::pushData(IR_protocolAbstract::IR_data_t)
                0x00136ee8                Toshiba_IR_protocol::manager()
                0x001368c0                Toshiba_IR_protocol::decodeBit(pwMeasurementAbstract::PulseWidthMeasurement)
                0x00136a60                Toshiba_IR_protocol::IRd_waitingStx_handler()
                0x001368ec                Toshiba_IR_protocol::pop_IR_Data(IR_protocolAbstract::IR_data_t&)
                0x001367cc                Toshiba_IR_protocol::Toshiba_IR_protocol(pwMeasurementAbstract*)
                0x00136c98                Toshiba_IR_protocol::IRd_decodingData_handler()
                0x00136df6                Toshiba_IR_protocol::IRd_waitingEtx_handler()
                0x001369b8                Toshiba_IR_protocol::bitError()
 .text          0x00137072      0x9f8 obj/IR_RC5_Standard_protocol.o
                0x001374d6                RC5_Standard_IR_protocol::IRd_waitingStx_handler()
                0x00137072                RC5_Standard_IR_protocol::RC5_Standard_IR_protocol(pwMeasurementAbstract*)
                0x00137462                RC5_Standard_IR_protocol::dcdData_bit_hadler()
                0x0013716a                RC5_Standard_IR_protocol::~RC5_Standard_IR_protocol()
                0x00137898                RC5_Standard_IR_protocol::manager()
                0x001377dc                RC5_Standard_IR_protocol::IRd_decodingData_handler()
                0x00137186                RC5_Standard_IR_protocol::decodeBit()
                0x00137178                RC5_Standard_IR_protocol::~RC5_Standard_IR_protocol()
                0x001370ee                RC5_Standard_IR_protocol::RC5_Standard_IR_protocol(pwMeasurementAbstract*)
                0x0013733e                RC5_Standard_IR_protocol::pop_IR_Data(IR_protocolAbstract::IR_data_t&)
                0x00137388                RC5_Standard_IR_protocol::pushError(IR_protocolAbstract::IR_protocolErrors)
                0x0013776e                RC5_Standard_IR_protocol::pushData(IR_protocolAbstract::IR_data_t)
                0x0013740a                RC5_Standard_IR_protocol::bitError()
 .text          0x00137a6a      0x9ba obj/IR_remote.o
                0x00137c26                IR_Key::IR_Key()
                0x00137d8e                IR_Remote::manager()
                0x00137ac6                IR_Key::setCountinuousReading(bool, int)
                0x00137b1c                IR_Key::setKeyState(KeyAbstract::keyStates)
                0x00137fce                IR_Remote::~IR_Remote()
                0x00137a6a                IR_Key::~IR_Key()
                0x001382ae                IR_Key::manager()
                0x00137b76                IR_Key::IR_Key()
                0x00137d12                IR_Key::push(KeyAbstract::keyReadingValues)
                0x00137cd6                IR_Key::pop(KeyAbstract::keyReadingValues&)
                0x00137a86                IR_Key::setEnable(bool, int)
                0x0013812e                IR_Remote::IR_Remote(int, IR_protocolAbstract*)
                0x001381ee                IR_Remote::IR_Remote(int, IR_protocolAbstract*)
                0x00137a78                IR_Key::~IR_Key()
                0x0013807e                IR_Remote::~IR_Remote()
 .text          0x00138424      0x118 obj/SPI_ABSTRACT.o
                0x001384d0                SPI_Abstract::setCommunicationType(SPI_Abstract::CommunicationType, bool)
                0x00138518                SPI_Abstract::setBitTransferLenght(SPI_Abstract::BitTransferLenght, bool)
                0x001384ac                SPI_Abstract::setTransferModeSpecification(SPI_Abstract::TransferModeSpecification, bool)
                0x001384f4                SPI_Abstract::setCommunicationClock(SPI_Abstract::CommunicationClock, bool)
                0x00138456                SPI_Abstract::SPI_Abstract()
                0x00138424                SPI_Abstract::SPI_Abstract()
                0x00138488                SPI_Abstract::setTransferModeDirection(SPI_Abstract::TransferModeDirection, bool)
 .text          0x0013853c      0xb1e obj/SPI_NEC.o
                0x00138ad0                SPI_NEC::setCommunicationClock(SPI_Abstract::CommunicationClock, bool)
                0x0013853c                SPI_NEC::setPowerEnable(bool)
                0x00138714                SPI_Interrupt_NEC::rx_getc(unsigned char&)
                0x00138e5a                SPI_NEC::SPI_NEC(spi_nec_t volatile*)
                0x00138670                SPI_Interrupt_NEC::setRxInterrupt(bool, unsigned char)
                0x001385a2                SPI_NEC::setReceptionEnable(bool)
                0x001388de                SPI_Interrupt_NEC::tx_write(unsigned char*, int)
                0x00138c8e                SPI_NEC::setTransferModeSpecification(SPI_Abstract::TransferModeSpecification, bool)
                0x001386c0                SPI_Interrupt_NEC::tx_getc_isr()
                0x00138f06                SPI_Interrupt_NEC::SPI_Interrupt_NEC(spi_nec_t volatile*, unsigned char volatile*, unsigned char volatile*, int, int)
                0x001387aa                SPI_Interrupt_NEC::busy()
                0x00138892                SPI_Interrupt_NEC::rx_read(unsigned char*, int)
                0x00138dae                SPI_NEC::SPI_NEC(spi_nec_t volatile*)
                0x00138570                SPI_NEC::setTransmissionEnable(bool)
                0x001385ee                SPI_Poller_NEC::getc(unsigned short)
                0x00138764                SPI_Interrupt_NEC::startTrasmission()
                0x00138bec                SPI_NEC::setCommunicationType(SPI_Abstract::CommunicationType, bool)
                0x00138610                SPI_Poller_NEC::busy()
                0x00138986                SPI_NEC::setBitTransferLenght(SPI_Abstract::BitTransferLenght, bool)
                0x001387e8                SPI_Interrupt_NEC::tx_putc(unsigned char)
                0x00138fb0                SPI_Interrupt_NEC::SPI_Interrupt_NEC(spi_nec_t volatile*, unsigned char volatile*, unsigned char volatile*, int, int)
                0x001385d4                SPI_Poller_NEC::putc(unsigned short)
                0x001386f4                SPI_Interrupt_NEC::tx_isempty_isr()
                0x00138d1e                SPI_NEC::setTransferModeDirection(SPI_Abstract::TransferModeDirection, bool)
                0x00138620                SPI_Interrupt_NEC::setTxInterrupt(bool, unsigned char)
                0x001387ba                SPI_Interrupt_NEC::rx_putc_isr(unsigned char)
 .text          0x0013905a      0x854 obj/TMC262_DRV.o
                0x00139868                TMC262_StepperDriver::read_DRVSTARTUS(TMC262_StepperDriver::DRVCONF_ValueToRead)
                0x0013952e                TMC262_StepperDriver::write_DRVCTRL()
                0x0013905a                TMC262_StepperDriver::Init()
                0x0013949c                TMC262_StepperDriver::write_DRVCONF()
                0x001395ea                TMC262_StepperDriver::write_CHOPCONF()
                0x001396fa                TMC262_StepperDriver::write_SMARTEN()
                0x001393ec                TMC262_StepperDriver::decodeDRVSTATUS(unsigned long)
                0x00139318                TMC262_StepperDriver::setEnable(bool)
                0x0013912c                TMC262_StepperDriver::TMC262_StepperDriver(SPI_Abstract*)
                0x00139222                TMC262_StepperDriver::TMC262_StepperDriver(SPI_Abstract*)
                0x0013931e                TMC262_StepperDriver::transmitData(unsigned long)
                0x00139772                TMC262_StepperDriver::write_SGSFCONF()
                0x001397d2                TMC262_StepperDriver::manager()
 .text          0x001398ae      0xc34 obj/WTP.o
                0x001398ae                WtpMenfis::driverInit()
                0x00139962                WtpMenfis::accRampInitialParameters()
                0x0013a31a                WtpMenfis::setEnable(bool)
                0x0013a410                WtpMenfis::manager()
                0x00139a2a                WtpMenfis::accelerationRamp()
                0x0013a054                WtpMenfis::setVelocityPulse(unsigned long)
                0x00139cde                WtpMenfis::WtpMenfis(pwmAbstract*, TMC262_StepperDriver*, Timer_NEC*)
                0x00139adc                WtpMenfis::readCalibrationValue()
                0x00139942                WtpMenfis::power(bool)
                0x0013a10c                WtpMenfis::setVelocity(double, bool)
                0x00139fbe                WtpMenfis::writeCalibrationValue(wtpCalibration_t*)
                0x00139e4e                WtpMenfis::WtpMenfis(pwmAbstract*, TMC262_StepperDriver*, Timer_NEC*)
 .text          0x0013a4e2      0x730 obj/SSPIE_HARDWARE.o
                0x0013a4fa                wait(int)
                0x0013a4e6                SPI_final()
                0x0013a52a                TRANS_starttranx(unsigned char)
                0x0013abdc                dbgu_putint(int, int)
                0x0013a570                TRANS_cstoggle(unsigned char)
                0x0013a540                TRANS_endtranx()
                0x0013a78a                TRANS_transceive_stream(int, unsigned char*, int, int, unsigned char*, int, unsigned char*)
                0x0013a554                TRANS_runClk()
                0x0013a694                TRANS_receiveBytes(unsigned char*, int)
                0x0013a4e2                dbgu_init()
                0x0013a59e                TRANS_transmitBytes(unsigned char*, int)
                0x0013abc4                SPI_init()
 .text          0x0013ac12     0x13d6 obj/SSPIE_CORE.o
                0x0013adda                SSPIEm_process(unsigned char*, unsigned int)
                0x0013ac12                getCurrentChannel()
                0x0013ac68                VME_getNumber(unsigned char*, unsigned int, unsigned int*, unsigned int*)
                0x0013ad2c                proc_HCOMMENT(unsigned char*, unsigned int, unsigned int*, checksum*)
                0x0013ac1c                VME_getByte(unsigned char*, unsigned char*, unsigned int, unsigned int*)
                0x0013b098                proc_LOOP(unsigned char*, unsigned int, unsigned int*, unsigned int)
                0x0013bb28                SSPIEm_init(unsigned int)
                0x0013b4a0                proc_TRANS(unsigned char*, unsigned int, unsigned int*, unsigned char, unsigned char)
                0x0013b298                proc_REPEAT(unsigned char*, unsigned int, unsigned int*, unsigned int)
 .text          0x0013bfe8      0xdea obj/SSPIE_INTRFACE.o
                0x0013c122                get_compression()
                0x0013c118                set_compression(unsigned char)
                0x0013c12c                dataGetByte(unsigned char*, short, checksum*)
                0x0013c01c                algoInit()
                0x0013bfe8                algoPreset(unsigned char*, unsigned int)
                0x0013c3ca                dataLoadTOC(short)
                0x0013c080                algoFinal()
                0x0013c044                algoGetByte(unsigned char*)
                0x0013c09c                dataPreset(unsigned char*, unsigned int)
                0x0013c10e                getRequestNewData()
                0x0013c5e6                dataReadthroughComment()
                0x0013c0f2                dataFinal()
                0x0013c20a                decomp_getByte(unsigned char*)
                0x0013c74e                dataRequestSet(unsigned char)
                0x0013c8e2                HLDataGetByte(unsigned char, unsigned char*, unsigned int)
                0x0013c66e                dataReset(unsigned char)
                0x0013cc82                dataInit()
                0x0013c2f8                decomp_initFrame(int)
                0x0013c1c8                decomp_getNum()
 .text          0x0013cdd2      0x330 obj/SSPIE_MAIN.o
                0x0013cfde                SSPIE_main()
                0x0013cdd2                printError(int)
 .text          0x0013d102       0x58 obj/SSPIE_SSPIEm.o
                0x0013d124                SSPIEm_preset(unsigned char*, unsigned int, unsigned char*, unsigned int)
                0x0013d102                SSPIEm(unsigned int)
 .text          0x0013d15a      0x17a obj/SSPIE_UTIL.o
                0x0013d19e                setMessage(int, char const*)
                0x0013d168                getCheckSum(checksum*)
                0x0013d268                print_out_string(char const*)
                0x0013d180                putChunk(checksum*, unsigned int)
                0x0013d15a                init_CS(checksum*, short, short)
 .text          0x0013d2d4      0x7f0 obj/ADuCSETTING.o
                0x0013d9e4                ADuCsetting::checkSettingConsistency_DAC()
                0x0013d4aa                ADuCsetting::Init_DAC()
                0x0013d2d8                ADuCsetting::Init_ADC()
                0x0013d414                ADuCsetting::ADuCsetting()
                0x0013d4d0                ADuCsetting::Init_PWM()
                0x0013da84                ADuCsetting::get_ADC_P_NumBytesToSend()
                0x0013d4fa                ADuCsetting::checkSettingConsistency_ADC()
                0x0013d394                ADuCsetting::ADuCsetting()
                0x0013d9e0                ADuCsetting::checkSettingConsistency_IEXC()
                0x0013d494                ADuCsetting::Init_IEXC()
                0x0013da24                ADuCsetting::checkSettingConsistency()
                0x0013d2d6                ADuCsetting::~ADuCsetting()
                0x0013daa4                ADuCsetting::get_ADC_A_NumBytesToSend()
                0x0013da20                ADuCsetting::checkSettingConsistency_PWM()
                0x0013d2d4                ADuCsetting::~ADuCsetting()
 .text          0x0013dac4       0x20 c:\gcc850\lib\libc.a(lib_a-atoi.o)
                0x0013dad4                _atoi
                0x0013dac4                __atoi_r
 .text          0x0013dae4       0x14 c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
                0x0013dae4                _isxdigit
 .text          0x0013daf8       0x20 c:\gcc850\lib\libc.a(lib_a-memcpy.o)
                0x0013daf8                _memcpy
 .text          0x0013db18       0x38 c:\gcc850\lib\libc.a(lib_a-strcat.o)
                0x0013db18                _strcat
 .text          0x0013db50       0x34 c:\gcc850\lib\libc.a(lib_a-strcmp.o)
                0x0013db50                _strcmp
 .text          0x0013db84       0x20 c:\gcc850\lib\libc.a(lib_a-strcpy.o)
                0x0013db84                _strcpy
 .text          0x0013dba4       0x1a c:\gcc850\lib\libc.a(lib_a-strlen.o)
                0x0013dba4                _strlen
 .text          0x0013dbbe       0x4e c:\gcc850\lib\libc.a(lib_a-strncpy.o)
                0x0013dbbe                _strncpy
 .text          0x0013dc0c      0x226 c:\gcc850\lib\libc.a(lib_a-strtol.o)
                0x0013de18                _strtol
                0x0013dc0c                __strtol_r
 .text          0x0013de32       0x18 c:\gcc850\lib\libc.a(lib_a-toupper.o)
                0x0013de32                _toupper
 .text          0x0013de4a        0x0 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
 .text          0x0013de4a        0x0 c:\gcc850\lib\libc.a(lib_a-impure.o)
 .text          0x0013de4a       0x3e c:\gcc850\lib\libgcc.a(_mulsi3.o)
                0x0013de4a                ___mulsi3
 .text          0x0013de88       0x32 c:\gcc850\lib\libgcc.a(_divsi3.o)
                0x0013de88                ___divsi3
 .text          0x0013deba       0x36 c:\gcc850\lib\libgcc.a(_udivsi3.o)
                0x0013deba                ___udivsi3
 .text          0x0013def0       0x2a c:\gcc850\lib\libgcc.a(_modsi3.o)
                0x0013def0                ___modsi3
 .text          0x0013df1a       0x2a c:\gcc850\lib\libgcc.a(_umodsi3.o)
                0x0013df1a                ___umodsi3
 .text          0x0013df44       0x18 c:\gcc850\lib\libgcc.a(_save_31c.o)
                0x0013df50                __return_r31
                0x0013df44                __save_r31
 .text          0x0013df5c       0x36 c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
                0x0013df5c                ___fixunssfsi
 .text          0x0013df92      0x25e c:\gcc850\lib\libgcc.a(_addsub_sf.o)
                0x0013e138                ___subsf3
                0x0013e19a                ___addsf3
 .text          0x0013e1f0      0x174 c:\gcc850\lib\libgcc.a(_mul_sf.o)
                0x0013e1f0                ___mulsf3
 .text          0x0013e364      0x11c c:\gcc850\lib\libgcc.a(_div_sf.o)
                0x0013e364                ___divsf3
 .text          0x0013e480       0x66 c:\gcc850\lib\libgcc.a(_ne_sf.o)
                0x0013e480                ___nesf2
 .text          0x0013e4e6       0x60 c:\gcc850\lib\libgcc.a(_gt_sf.o)
                0x0013e4e6                ___gtsf2
 .text          0x0013e546       0x60 c:\gcc850\lib\libgcc.a(_ge_sf.o)
                0x0013e546                ___gesf2
 .text          0x0013e5a6       0x66 c:\gcc850\lib\libgcc.a(_lt_sf.o)
                0x0013e5a6                ___ltsf2
 .text          0x0013e60c       0x66 c:\gcc850\lib\libgcc.a(_le_sf.o)
                0x0013e60c                ___lesf2
 .text          0x0013e672       0x70 c:\gcc850\lib\libgcc.a(_si_to_sf.o)
                0x0013e672                ___floatsisf
 .text          0x0013e6e2       0x82 c:\gcc850\lib\libgcc.a(_sf_to_si.o)
                0x0013e6e2                ___fixsfsi
 .text          0x0013e764        0x0 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
 .text          0x0013e764       0x7a c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
                0x0013e764                ___floatunsisf
 *fill*         0x0013e7de        0x2 00
 .text          0x0013e7e0       0x38 c:\gcc850\lib\libgcc.a(_save_26c.o)
                0x0013e7fc                __return_r26_r31
                0x0013e7e0                __save_r26_r31
 .text          0x0013e818       0x30 c:\gcc850\lib\libgcc.a(_save_27c.o)
                0x0013e818                __save_r27_r31
                0x0013e830                __return_r27_r31
 .text          0x0013e848       0x28 c:\gcc850\lib\libgcc.a(_save_28c.o)
                0x0013e848                __save_r28_r31
                0x0013e85c                __return_r28_r31
 .text          0x0013e870       0xde c:\gcc850\lib\libgcc.a(_muldi3.o)
                0x0013e870                ___muldi3
 .text          0x0013e94e       0x58 c:\gcc850\lib\libgcc.a(_clzsi2.o)
                0x0013e94e                ___clzsi2
 .text          0x0013e9a6      0x118 c:\gcc850\lib\libgcc.a(_pack_sf.o)
                0x0013e9a6                ___pack_f
 .text          0x0013eabe       0xaa c:\gcc850\lib\libgcc.a(_unpack_sf.o)
                0x0013eabe                ___unpack_f
 .text          0x0013eb68       0x8c c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
                0x0013eb68                ___fpcmp_parts_f
 .text          0x0013ebf4        0x0 c:\gcc850\lib\libgcc.a(_clz.o)
                0x0013ec00                . = ALIGN (0x10)
 *fill*         0x0013ebf4        0xc 00
 *(.call_table_text)
 *(.gnu.warning)
 *(.gnu.linkonce.t*)
 .gnu.linkonce.t._ZN9HwChannelIsLi40EE13physicalValueEs
                0x0013ec00       0x3a obj/main.o
                0x0013ec00                HwChannel<short, 40>::physicalValue(short)
 .gnu.linkonce.t._ZN9HwChannelIlLi4EE13physicalValueEl
                0x0013ec3a       0x36 obj/main.o
                0x0013ec3a                HwChannel<long, 4>::physicalValue(long)
 .gnu.linkonce.t._ZN16PrsHwChanManagerIsLi40EE14getChannelTypeEv
                0x0013ec70        0xe obj/main.o
                0x0013ec70                PrsHwChanManager<short, 40>::getChannelType()
 .gnu.linkonce.t._ZN13HwChanManagerIsLi40EE14getChannelTypeEv
                0x0013ec7e        0x4 obj/main.o
                0x0013ec7e                HwChanManager<short, 40>::getChannelType()
 .gnu.linkonce.t._ZN13HwChanManagerIlLi4EE14getChannelTypeEv
                0x0013ec82        0x4 obj/main.o
                0x0013ec82                HwChanManager<long, 4>::getChannelType()
 .gnu.linkonce.t._ZN6StringD0Ev
                0x0013ec86       0x4e obj/STRCLASS.o
                0x0013ec86                String::~String()
 .gnu.linkonce.t._ZN6StringD1Ev
                0x0013ecd4       0x28 obj/STRCLASS.o
                0x0013ecd4                String::~String()
 .gnu.linkonce.t._ZN16KeyboardAbstract7managerEv
                0x0013ecfc        0x2 obj/KEYABSTRACT.o
                0x0013ecfc                KeyboardAbstract::manager()
 .gnu.linkonce.t._ZN16KeyboardAbstract13getKeysNumberEv
                0x0013ecfe        0x6 obj/KEYABSTRACT.o
                0x0013ecfe                KeyboardAbstract::getKeysNumber()
 .gnu.linkonce.t._ZN11KeyAbstract9setEnableEbi
                0x0013ed04        0xa obj/KEYBOARD.o
                0x0013ed04                KeyAbstract::setEnable(bool, int)
 .gnu.linkonce.t._ZN11KeyAbstract11getReadTimeEv
                0x0013ed0e        0x6 obj/KEYBOARD.o
                0x0013ed0e                KeyAbstract::getReadTime()
 .gnu.linkonce.t._ZN11KeyAbstract11setReadTimeEi
                0x0013ed14        0x6 obj/KEYBOARD.o
                0x0013ed14                KeyAbstract::setReadTime(int)
 .gnu.linkonce.t._ZN11KeyAbstract8isEnableEv
                0x0013ed1a        0x6 obj/KEYBOARD.o
                0x0013ed1a                KeyAbstract::isEnable()
 .gnu.linkonce.t._ZN11KeyAbstract13setBeepEnableEb
                0x0013ed20        0x6 obj/KEYBOARD.o
                0x0013ed20                KeyAbstract::setBeepEnable(bool)
 .gnu.linkonce.t._ZN11KeyAbstract12beepIsEnableEv
                0x0013ed26        0x6 obj/KEYBOARD.o
                0x0013ed26                KeyAbstract::beepIsEnable()
 .gnu.linkonce.t._ZN11KeyAbstract21setCountinuousReadingEbi
                0x0013ed2c       0x10 obj/KEYBOARD.o
                0x0013ed2c                KeyAbstract::setCountinuousReading(bool, int)
 .gnu.linkonce.t._ZN11KeyAbstract25continuousReadingIsEnableEv
                0x0013ed3c        0x6 obj/KEYBOARD.o
                0x0013ed3c                KeyAbstract::continuousReadingIsEnable()
 .gnu.linkonce.t._ZN11KeyAbstract21continuousReadingTimeEv
                0x0013ed42        0x6 obj/KEYBOARD.o
                0x0013ed42                KeyAbstract::continuousReadingTime()
 .gnu.linkonce.t._ZN11KeyAbstract12setKeyNumberEi
                0x0013ed48        0x6 obj/KEYBOARD.o
                0x0013ed48                KeyAbstract::setKeyNumber(int)
 .gnu.linkonce.t._ZN11KeyAbstract9keyNumberEv
                0x0013ed4e        0x6 obj/KEYBOARD.o
                0x0013ed4e                KeyAbstract::keyNumber()
 .gnu.linkonce.t._ZN11KeyAbstract8keyStateEv
                0x0013ed54        0x6 obj/KEYBOARD.o
                0x0013ed54                KeyAbstract::keyState()
 .gnu.linkonce.t._ZN11KeyAbstract11setKeyStateENS_9keyStatesE
                0x0013ed5a        0x6 obj/KEYBOARD.o
                0x0013ed5a                KeyAbstract::setKeyState(KeyAbstract::keyStates)
 .gnu.linkonce.t._ZN11KeyAbstract3popERNS_16keyReadingValuesE
                0x0013ed60        0x4 obj/KEYBOARD.o
                0x0013ed60                KeyAbstract::pop(KeyAbstract::keyReadingValues&)
 .gnu.linkonce.t._ZN11KeyAbstract4pushENS_16keyReadingValuesE
                0x0013ed64        0x4 obj/KEYBOARD.o
                0x0013ed64                KeyAbstract::push(KeyAbstract::keyReadingValues)
 .gnu.linkonce.t._ZN11KeyAbstract5clearEv
                0x0013ed68       0x1a obj/KEYBOARD.o
                0x0013ed68                KeyAbstract::clear()
 .gnu.linkonce.t._ZN11KeyAbstract7managerEv
                0x0013ed82        0x2 obj/KEYBOARD.o
                0x0013ed82                KeyAbstract::manager()
 .gnu.linkonce.t._ZN11AdcAbstract8setPowerEb
                0x0013ed84        0x6 obj/ADCABSTRACT.o
                0x0013ed84                AdcAbstract::setPower(bool)
 .gnu.linkonce.t._ZN11AdcAbstract9isPoweredEv
                0x0013ed8a        0x6 obj/ADCABSTRACT.o
                0x0013ed8a                AdcAbstract::isPowered()
 .gnu.linkonce.t._ZN11AdcAbstract9setEnableEb
                0x0013ed90        0x6 obj/ADCABSTRACT.o
                0x0013ed90                AdcAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN11AdcAbstract8isEnableEv
                0x0013ed96        0x6 obj/ADCABSTRACT.o
                0x0013ed96                AdcAbstract::isEnable()
 .gnu.linkonce.t._ZN7Adc_NEC9isPoweredEv
                0x0013ed9c        0x6 obj/ADC_NEC.o
                0x0013ed9c                Adc_NEC::isPowered()
 .gnu.linkonce.t._ZN7Adc_NEC8isEnableEv
                0x0013eda2        0x6 obj/ADC_NEC.o
                0x0013eda2                Adc_NEC::isEnable()
 .gnu.linkonce.t._ZN9HwChannelItLi16EE13physicalValueEt
                0x0013eda8       0x3a obj/ADC_SAU7000.o
                0x0013eda8                HwChannel<unsigned short, 16>::physicalValue(unsigned short)
 .gnu.linkonce.t._ZN9HwChannelItLi5EE13physicalValueEt
                0x0013ede2       0x3a obj/ADC_SAU7000.o
                0x0013ede2                HwChannel<unsigned short, 5>::physicalValue(unsigned short)
 .gnu.linkonce.t._ZN20CurrentHwChanManagerItLi16EE14getChannelTypeEv
                0x0013ee1c        0xe obj/ADC_SAU7000.o
                0x0013ee1c                CurrentHwChanManager<unsigned short, 16>::getChannelType()
 .gnu.linkonce.t._ZN20VoltageHwChanManagerItLi16EE14getChannelTypeEv
                0x0013ee2a        0xe obj/ADC_SAU7000.o
                0x0013ee2a                VoltageHwChanManager<unsigned short, 16>::getChannelType()
 .gnu.linkonce.t._ZN13HwChanManagerItLi16EE14getChannelTypeEv
                0x0013ee38        0x4 obj/ADC_SAU7000.o
                0x0013ee38                HwChanManager<unsigned short, 16>::getChannelType()
 .gnu.linkonce.t._ZN20CurrentHwChanManagerItLi5EE14getChannelTypeEv
                0x0013ee3c        0xe obj/ADC_SAU7000.o
                0x0013ee3c                CurrentHwChanManager<unsigned short, 5>::getChannelType()
 .gnu.linkonce.t._ZN20VoltageHwChanManagerItLi5EE14getChannelTypeEv
                0x0013ee4a        0xe obj/ADC_SAU7000.o
                0x0013ee4a                VoltageHwChanManager<unsigned short, 5>::getChannelType()
 .gnu.linkonce.t._ZN13HwChanManagerItLi5EE14getChannelTypeEv
                0x0013ee58        0x4 obj/ADC_SAU7000.o
                0x0013ee58                HwChanManager<unsigned short, 5>::getChannelType()
 .gnu.linkonce.t._ZN18UartDeviceAbstract6TurnOnEv
                0x0013ee5c        0x8 obj/UARTABSTRACT.o
                0x0013ee5c                UartDeviceAbstract::TurnOn()
 .gnu.linkonce.t._ZN18UartDeviceAbstract7TurnOffEv
                0x0013ee64        0x6 obj/UARTABSTRACT.o
                0x0013ee64                UartDeviceAbstract::TurnOff()
 .gnu.linkonce.t._ZN18UartDeviceAbstract6HwInitEv
                0x0013ee6a        0x8 obj/UARTABSTRACT.o
                0x0013ee6a                UartDeviceAbstract::HwInit()
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction7sendMsgEi
                0x0013ee72        0x4 obj/PROTOCOLSTDUART.o
                0x0013ee72                stdUartProtocolAbstraction::sendMsg(int)
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction6getMsgEv
                0x0013ee76        0x4 obj/PROTOCOLSTDUART.o
                0x0013ee76                stdUartProtocolAbstraction::getMsg()
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction6TurnOnEv
                0x0013ee7a       0x2a obj/PROTOCOLSTDUART.o
                0x0013ee7a                stdUartProtocolAbstraction::TurnOn()
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction7TurnOffEv
                0x0013eea4       0x2a obj/PROTOCOLSTDUART.o
                0x0013eea4                stdUartProtocolAbstraction::TurnOff()
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x0013eece       0x28 obj/PROTOCOLSTDUART.o
                0x0013eece                stdUartProtocolAbstraction::SetBaudRate(UartDeviceAbstract::UARTBaudRate)
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x0013eef6       0x1a obj/PROTOCOLSTDUART.o
                0x0013eef6                stdUartProtocolAbstraction::ClearReceptionBuffer()
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x0013ef10       0x1a obj/PROTOCOLSTDUART.o
                0x0013ef10                stdUartProtocolAbstraction::ClearTransmissionBuffer()
 .gnu.linkonce.t._ZN13SauPcProtocol6TurnOnEv
                0x0013ef2a       0x2a obj/PROTOCOLSAUANDPC.o
                0x0013ef2a                SauPcProtocol::TurnOn()
 .gnu.linkonce.t._ZN13SauPcProtocol7TurnOffEv
                0x0013ef54       0x2a obj/PROTOCOLSAUANDPC.o
                0x0013ef54                SauPcProtocol::TurnOff()
 .gnu.linkonce.t._ZN13SauPcProtocol13setUartDeviceEP18UartDeviceAbstract
                0x0013ef7e        0x6 obj/PROTOCOLSAUANDPC.o
                0x0013ef7e                SauPcProtocol::setUartDevice(UartDeviceAbstract*)
 .gnu.linkonce.t._ZN13SauPcProtocol11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x0013ef84       0x28 obj/PROTOCOLSAUANDPC.o
                0x0013ef84                SauPcProtocol::SetBaudRate(UartDeviceAbstract::UARTBaudRate)
 .gnu.linkonce.t._ZN13SauPcProtocol11SetHwFlwCtlEN18UartDeviceAbstract12UARThwFlwCntE
                0x0013efac       0x2c obj/PROTOCOLSAUANDPC.o
                0x0013efac                SauPcProtocol::SetHwFlwCtl(UartDeviceAbstract::UARThwFlwCnt)
 .gnu.linkonce.t._ZN11uC_Protocol6TurnOnEv
                0x0013efd8       0x2a obj/PROTOCOL_uC.o
                0x0013efd8                uC_Protocol::TurnOn()
 .gnu.linkonce.t._ZN11uC_Protocol7TurnOffEv
                0x0013f002       0x2a obj/PROTOCOL_uC.o
                0x0013f002                uC_Protocol::TurnOff()
 .gnu.linkonce.t._ZN11uC_Protocol30acquisitionStartedPackedDecodeEv
                0x0013f02c        0x4 obj/PROTOCOL_uC.o
                0x0013f02c                uC_Protocol::acquisitionStartedPackedDecode()
 .gnu.linkonce.t._ZN11uC_Protocol22samplePacket_01_decodeEv
                0x0013f030        0x4 obj/PROTOCOL_uC.o
                0x0013f030                uC_Protocol::samplePacket_01_decode()
 .gnu.linkonce.t._ZN11uC_Protocol22samplePacket_02_decodeEv
                0x0013f034        0x4 obj/PROTOCOL_uC.o
                0x0013f034                uC_Protocol::samplePacket_02_decode()
 .gnu.linkonce.t._ZN11uC_Protocol22samplePacket_03_decodeEv
                0x0013f038        0x4 obj/PROTOCOL_uC.o
                0x0013f038                uC_Protocol::samplePacket_03_decode()
 .gnu.linkonce.t._ZN11uC_Protocol21packetLost_01_handlerEv
                0x0013f03c        0x4 obj/PROTOCOL_uC.o
                0x0013f03c                uC_Protocol::packetLost_01_handler()
 .gnu.linkonce.t._ZN11uC_Protocol21packetLost_02_handlerEv
                0x0013f040        0x4 obj/PROTOCOL_uC.o
                0x0013f040                uC_Protocol::packetLost_02_handler()
 .gnu.linkonce.t._ZN11uC_Protocol21packetLost_03_handlerEv
                0x0013f044        0x4 obj/PROTOCOL_uC.o
                0x0013f044                uC_Protocol::packetLost_03_handler()
 .gnu.linkonce.t._ZN11uC_Protocol18ADuCDefaultSettingEv
                0x0013f048        0x2 obj/PROTOCOL_uC.o
                0x0013f048                uC_Protocol::ADuCDefaultSetting()
 .gnu.linkonce.t._ZN18SauAndEmgzProtocol6TurnOnEv
                0x0013f04a       0x2a obj/PROTOCOLSAUANDEMGZ.o
                0x0013f04a                SauAndEmgzProtocol::TurnOn()
 .gnu.linkonce.t._ZN18SauAndEmgzProtocol7TurnOffEv
                0x0013f074       0x2a obj/PROTOCOLSAUANDEMGZ.o
                0x0013f074                SauAndEmgzProtocol::TurnOff()
 .gnu.linkonce.t._ZN18SauAndEmgzProtocol11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x0013f09e       0x28 obj/PROTOCOLSAUANDEMGZ.o
                0x0013f09e                SauAndEmgzProtocol::SetBaudRate(UartDeviceAbstract::UARTBaudRate)
 .gnu.linkonce.t._ZN18SauAndEmgzProtocol7managerEv
                0x0013f0c6      0x81e obj/PROTOCOLSAUANDEMGZ.o
                0x0013f0c6                SauAndEmgzProtocol::manager()
 .gnu.linkonce.t._ZN23iWRAP_BLUEGIGA_Protocol6TurnOnEv
                0x0013f8e4       0x2a obj/iWRAP_BLUEGIGA.o
                0x0013f8e4                iWRAP_BLUEGIGA_Protocol::TurnOn()
 .gnu.linkonce.t._ZN23iWRAP_BLUEGIGA_Protocol7TurnOffEv
                0x0013f90e       0x2a obj/iWRAP_BLUEGIGA.o
                0x0013f90e                iWRAP_BLUEGIGA_Protocol::TurnOff()
 .gnu.linkonce.t._ZN23iWRAP_BLUEGIGA_Protocol11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x0013f938       0x28 obj/iWRAP_BLUEGIGA.o
                0x0013f938                iWRAP_BLUEGIGA_Protocol::SetBaudRate(UartDeviceAbstract::UARTBaudRate)
 .gnu.linkonce.t._ZN18iWRAP_BLUEGIGA_SPP6TurnOnEv
                0x0013f960       0x2a obj/iWRAP_BLUEGIGA_SPP.o
                0x0013f960                iWRAP_BLUEGIGA_SPP::TurnOn()
 .gnu.linkonce.t._ZN18iWRAP_BLUEGIGA_SPP7TurnOffEv
                0x0013f98a       0x2a obj/iWRAP_BLUEGIGA_SPP.o
                0x0013f98a                iWRAP_BLUEGIGA_SPP::TurnOff()
 .gnu.linkonce.t._ZN18iWRAP_BLUEGIGA_SPP11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x0013f9b4       0x28 obj/iWRAP_BLUEGIGA_SPP.o
                0x0013f9b4                iWRAP_BLUEGIGA_SPP::SetBaudRate(UartDeviceAbstract::UARTBaudRate)
 .gnu.linkonce.t._ZN15SAU7000_Manager21checkSauAduCsMessagesEv
                0x0013f9dc      0x770 obj/SAU7000_MANAGER.o
                0x0013f9dc                SAU7000_Manager::checkSauAduCsMessages()
 .gnu.linkonce.t._ZN15SAU7000_Manager16checkCOMM_statusEv
                0x0014014c      0x39c obj/SAU7000_MANAGER.o
                0x0014014c                SAU7000_Manager::checkCOMM_status()
 .gnu.linkonce.t._ZN15SAU7000_Manager31SauPcMsg_stopAcquisitionHandlerEh
                0x001404e8       0xd0 obj/SAU7000_MANAGER.o
                0x001404e8                SAU7000_Manager::SauPcMsg_stopAcquisitionHandler(unsigned char)
 .gnu.linkonce.t._ZN15SAU7000_Manager26Sau7000status_idle_HandlerEv
                0x001405b8       0xbe obj/SAU7000_MANAGER.o
                0x001405b8                SAU7000_Manager::Sau7000status_idle_Handler()
 .gnu.linkonce.t._ZN15SAU7000_Manager24checkSauEmgBoardMessagesEv
                0x00140676      0x76a obj/SAU7000_MANAGER.o
                0x00140676                SAU7000_Manager::checkSauEmgBoardMessages()
 .gnu.linkonce.t._ZN15SAU7000_Manager30checkBluetoothProtocolMessagesEv
                0x00140de0      0x590 obj/SAU7000_MANAGER.o
                0x00140de0                SAU7000_Manager::checkBluetoothProtocolMessages()
 .gnu.linkonce.t._ZN15SAU7000_Manager35Sau7000status_startupChecks_HandlerEv
                0x00141370      0x658 obj/SAU7000_MANAGER.o
                0x00141370                SAU7000_Manager::Sau7000status_startupChecks_Handler()
 .gnu.linkonce.t._ZN15SAU7000_Manager40Sau7000status_checkADuCfwUpgrade_HandlerEv
                0x001419c8      0x3ca obj/SAU7000_MANAGER.o
                0x001419c8                SAU7000_Manager::Sau7000status_checkADuCfwUpgrade_Handler()
 .gnu.linkonce.t._ZN15SAU7000_Manager26checkSauPcProtocolMessagesEv
                0x00141d92     0x1834 obj/SAU7000_MANAGER.o
                0x00141d92                SAU7000_Manager::checkSauPcProtocolMessages()
 .gnu.linkonce.t._ZN9CMenuPage4DrawEv
                0x001435c6        0x2 obj/APPMENU.o
                0x001435c6                CMenuPage::Draw()
 .gnu.linkonce.t._ZN9CMenuPage7RefreshEv
                0x001435c8        0x2 obj/APPMENU.o
                0x001435c8                CMenuPage::Refresh()
 .gnu.linkonce.t._ZN16CMenuGeneralInfoD1Ev
                0x001435ca        0xe obj/APPMENU.o
                0x001435ca                CMenuGeneralInfo::~CMenuGeneralInfo()
 .gnu.linkonce.t._ZN14CMenuSwitchOffD1Ev
                0x001435d8        0xe obj/APPMENU.o
                0x001435d8                CMenuSwitchOff::~CMenuSwitchOff()
 .gnu.linkonce.t._ZN13CMenuMessagesD1Ev
                0x001435e6        0xe obj/APPMENU.o
                0x001435e6                CMenuMessages::~CMenuMessages()
 .gnu.linkonce.t._ZN9CMenuInfoD1Ev
                0x001435f4        0xe obj/APPMENU.o
                0x001435f4                CMenuInfo::~CMenuInfo()
 .gnu.linkonce.t._ZN15CMenuADuCfrqCalD1Ev
                0x00143602        0xe obj/APPMENU.o
                0x00143602                CMenuADuCfrqCal::~CMenuADuCfrqCal()
 .gnu.linkonce.t._ZN15CMenuADuCstatusD1Ev
                0x00143610        0xe obj/APPMENU.o
                0x00143610                CMenuADuCstatus::~CMenuADuCstatus()
 .gnu.linkonce.t._ZN9CMenuMainD1Ev
                0x0014361e        0xe obj/APPMENU.o
                0x0014361e                CMenuMain::~CMenuMain()
 .gnu.linkonce.t._ZN9CMenuLogoD1Ev
                0x0014362c        0xe obj/APPMENU.o
                0x0014362c                CMenuLogo::~CMenuLogo()
 .gnu.linkonce.t._ZN16CMenuGeneralInfoD0Ev
                0x0014363a       0x22 obj/APPMENU.o
                0x0014363a                CMenuGeneralInfo::~CMenuGeneralInfo()
 .gnu.linkonce.t._ZN9CMenuLogoD0Ev
                0x0014365c       0x22 obj/APPMENU.o
                0x0014365c                CMenuLogo::~CMenuLogo()
 .gnu.linkonce.t._ZN9CMenuMainD0Ev
                0x0014367e       0x22 obj/APPMENU.o
                0x0014367e                CMenuMain::~CMenuMain()
 .gnu.linkonce.t._ZN15CMenuADuCstatusD0Ev
                0x001436a0       0x22 obj/APPMENU.o
                0x001436a0                CMenuADuCstatus::~CMenuADuCstatus()
 .gnu.linkonce.t._ZN15CMenuADuCfrqCalD0Ev
                0x001436c2       0x22 obj/APPMENU.o
                0x001436c2                CMenuADuCfrqCal::~CMenuADuCfrqCal()
 .gnu.linkonce.t._ZN9CMenuInfoD0Ev
                0x001436e4       0x22 obj/APPMENU.o
                0x001436e4                CMenuInfo::~CMenuInfo()
 .gnu.linkonce.t._ZN13CMenuMessagesD0Ev
                0x00143706       0x22 obj/APPMENU.o
                0x00143706                CMenuMessages::~CMenuMessages()
 .gnu.linkonce.t._ZN14CMenuSwitchOffD0Ev
                0x00143728       0x22 obj/APPMENU.o
                0x00143728                CMenuSwitchOff::~CMenuSwitchOff()
 .gnu.linkonce.t._ZN22ADuCfwUpgrade_protocol6TurnOnEv
                0x0014374a       0x2a obj/PROTOCOLADuCfwUPGRADE.o
                0x0014374a                ADuCfwUpgrade_protocol::TurnOn()
 .gnu.linkonce.t._ZN22ADuCfwUpgrade_protocol7TurnOffEv
                0x00143774       0x2a obj/PROTOCOLADuCfwUPGRADE.o
                0x00143774                ADuCfwUpgrade_protocol::TurnOff()
 .gnu.linkonce.t._ZN13TimerAbstract9setEnableEb
                0x0014379e        0x6 obj/TIMER_NEC.o
                0x0014379e                TimerAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN13TimerAbstract8isEnableEv
                0x001437a4        0x6 obj/TIMER_NEC.o
                0x001437a4                TimerAbstract::isEnable()
 .gnu.linkonce.t._ZN13TimerAbstract16setBaseFrequencyEd
                0x001437aa        0x6 obj/TIMER_NEC.o
                0x001437aa                TimerAbstract::setBaseFrequency(double)
 .gnu.linkonce.t._ZN13TimerAbstract16getBaseFrequencyEv
                0x001437b0        0x6 obj/TIMER_NEC.o
                0x001437b0                TimerAbstract::getBaseFrequency()
 .gnu.linkonce.t._ZN13TimerAbstract12setFrequencyEd
                0x001437b6       0x46 obj/TIMER_NEC.o
                0x001437b6                TimerAbstract::setFrequency(double)
 .gnu.linkonce.t._ZN13TimerAbstract12getFrequencyEv
                0x001437fc        0x6 obj/TIMER_NEC.o
                0x001437fc                TimerAbstract::getFrequency()
 .gnu.linkonce.t._ZN13TimerAbstract9setPeriodEd
                0x00143802       0x46 obj/TIMER_NEC.o
                0x00143802                TimerAbstract::setPeriod(double)
 .gnu.linkonce.t._ZN13TimerAbstract9getPeriodEv
                0x00143848        0x6 obj/TIMER_NEC.o
                0x00143848                TimerAbstract::getPeriod()
 .gnu.linkonce.t._ZN9Timer_NEC9setEnableEb
                0x0014384e        0x6 obj/TIMER_NEC.o
                0x0014384e                Timer_NEC::setEnable(bool)
 .gnu.linkonce.t._ZN9Timer_NEC8isEnableEv
                0x00143854        0x6 obj/TIMER_NEC.o
                0x00143854                Timer_NEC::isEnable()
 .gnu.linkonce.t._ZN9Timer_NEC16setBaseFrequencyEd
                0x0014385a        0x6 obj/TIMER_NEC.o
                0x0014385a                Timer_NEC::setBaseFrequency(double)
 .gnu.linkonce.t._ZN9Timer_NEC16getBaseFrequencyEv
                0x00143860        0x6 obj/TIMER_NEC.o
                0x00143860                Timer_NEC::getBaseFrequency()
 .gnu.linkonce.t._ZN9Timer_NEC12setFrequencyEdNS_4CCRnE
                0x00143866       0x46 obj/TIMER_NEC.o
                0x00143866                Timer_NEC::setFrequency(double, Timer_NEC::CCRn)
 .gnu.linkonce.t._ZN9Timer_NEC12getFrequencyEv
                0x001438ac        0x6 obj/TIMER_NEC.o
                0x001438ac                Timer_NEC::getFrequency()
 .gnu.linkonce.t._ZN9Timer_NEC18calculateFrequencyENS_4CCRnE
                0x001438b2        0x6 obj/TIMER_NEC.o
                0x001438b2                Timer_NEC::calculateFrequency(Timer_NEC::CCRn)
 .gnu.linkonce.t._ZN9Timer_NEC9setPeriodEdNS_4CCRnE
                0x001438b8       0x46 obj/TIMER_NEC.o
                0x001438b8                Timer_NEC::setPeriod(double, Timer_NEC::CCRn)
 .gnu.linkonce.t._ZN9Timer_NEC9getPeriodEv
                0x001438fe        0x6 obj/TIMER_NEC.o
                0x001438fe                Timer_NEC::getPeriod()
 .gnu.linkonce.t._ZN9Timer_NEC7setCCR0Etbb
                0x00143904        0x4 obj/TIMER_NEC.o
                0x00143904                Timer_NEC::setCCR0(unsigned short, bool, bool)
 .gnu.linkonce.t._ZN9Timer_NEC7getCCR0Ev
                0x00143908        0x4 obj/TIMER_NEC.o
                0x00143908                Timer_NEC::getCCR0()
 .gnu.linkonce.t._ZN9Timer_NEC7setCCR1Etbb
                0x0014390c        0x4 obj/TIMER_NEC.o
                0x0014390c                Timer_NEC::setCCR1(unsigned short, bool, bool)
 .gnu.linkonce.t._ZN9Timer_NEC7getCCR1Ev
                0x00143910        0x4 obj/TIMER_NEC.o
                0x00143910                Timer_NEC::getCCR1()
 .gnu.linkonce.t._ZN9Timer_NEC7setCCR2Etbb
                0x00143914        0x4 obj/TIMER_NEC.o
                0x00143914                Timer_NEC::setCCR2(unsigned short, bool, bool)
 .gnu.linkonce.t._ZN9Timer_NEC7getCCR2Ev
                0x00143918        0x4 obj/TIMER_NEC.o
                0x00143918                Timer_NEC::getCCR2()
 .gnu.linkonce.t._ZN9Timer_NEC7setCCR3Etbb
                0x0014391c        0x4 obj/TIMER_NEC.o
                0x0014391c                Timer_NEC::setCCR3(unsigned short, bool, bool)
 .gnu.linkonce.t._ZN9Timer_NEC7getCCR3Ev
                0x00143920        0x4 obj/TIMER_NEC.o
                0x00143920                Timer_NEC::getCCR3()
 .gnu.linkonce.t._ZN9Timer_NEC6getCNTEv
                0x00143924        0x4 obj/TIMER_NEC.o
                0x00143924                Timer_NEC::getCNT()
 .gnu.linkonce.t._ZN9Timer_NEC17setOVIC_interruptEbh
                0x00143928        0x2 obj/TIMER_NEC.o
                0x00143928                Timer_NEC::setOVIC_interrupt(bool, unsigned char)
 .gnu.linkonce.t._ZN9Timer_NEC18setCCIC0_interruptEbh
                0x0014392a        0x2 obj/TIMER_NEC.o
                0x0014392a                Timer_NEC::setCCIC0_interrupt(bool, unsigned char)
 .gnu.linkonce.t._ZN9Timer_NEC18setCCIC1_interruptEbh
                0x0014392c        0x2 obj/TIMER_NEC.o
                0x0014392c                Timer_NEC::setCCIC1_interrupt(bool, unsigned char)
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnESTEv
                0x0014392e        0x6 obj/TIMER_NEC.o
                0x0014392e                Timer_NEC::getTxnEST()
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnEEEEv
                0x00143934        0x6 obj/TIMER_NEC.o
                0x00143934                Timer_NEC::getTxnEEE()
 .gnu.linkonce.t._ZN9Timer_NEC12getTimerModeEv
                0x0014393a        0x6 obj/TIMER_NEC.o
                0x0014393a                Timer_NEC::getTimerMode()
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnOL1Ev
                0x00143940        0x6 obj/TIMER_NEC.o
                0x00143940                Timer_NEC::getTxnOL1()
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnOE1Ev
                0x00143946        0x6 obj/TIMER_NEC.o
                0x00143946                Timer_NEC::getTxnOE1()
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnOL0Ev
                0x0014394c        0x6 obj/TIMER_NEC.o
                0x0014394c                Timer_NEC::getTxnOL0()
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnOE0Ev
                0x00143952        0x6 obj/TIMER_NEC.o
                0x00143952                Timer_NEC::getTxnOE0()
 .gnu.linkonce.t._ZN9Timer_NEC28getValidEdgeCaptureTrigTIxn1Ev
                0x00143958        0x6 obj/TIMER_NEC.o
                0x00143958                Timer_NEC::getValidEdgeCaptureTrigTIxn1()
 .gnu.linkonce.t._ZN9Timer_NEC28getValidEdgeCaptureTrigTIxn0Ev
                0x0014395e        0x6 obj/TIMER_NEC.o
                0x0014395e                Timer_NEC::getValidEdgeCaptureTrigTIxn0()
 .gnu.linkonce.t._ZN11Timer_NEC_P9setEnableEb
                0x00143964        0x6 obj/TIMER_NEC.o
                0x00143964                Timer_NEC_P::setEnable(bool)
 .gnu.linkonce.t._ZN11Timer_NEC_P12setFrequencyEdN9Timer_NEC4CCRnE
                0x0014396a       0x46 obj/TIMER_NEC.o
                0x0014396a                Timer_NEC_P::setFrequency(double, Timer_NEC::CCRn)
 .gnu.linkonce.t._ZN11Timer_NEC_P18calculateFrequencyEN9Timer_NEC4CCRnE
                0x001439b0        0x6 obj/TIMER_NEC.o
                0x001439b0                Timer_NEC_P::calculateFrequency(Timer_NEC::CCRn)
 .gnu.linkonce.t._ZN11Timer_NEC_P7getCCR0Ev
                0x001439b6        0xa obj/TIMER_NEC.o
                0x001439b6                Timer_NEC_P::getCCR0()
 .gnu.linkonce.t._ZN11Timer_NEC_P7getCCR1Ev
                0x001439c0        0xa obj/TIMER_NEC.o
                0x001439c0                Timer_NEC_P::getCCR1()
 .gnu.linkonce.t._ZN11Timer_NEC_P6getCNTEv
                0x001439ca        0xa obj/TIMER_NEC.o
                0x001439ca                Timer_NEC_P::getCNT()
 .gnu.linkonce.t._ZN14Timer_NEC_P02412getPrescalerEv
                0x001439d4        0x6 obj/TIMER_NEC.o
                0x001439d4                Timer_NEC_P024::getPrescaler()
 .gnu.linkonce.t._ZN14Timer_NEC_P13512getPrescalerEv
                0x001439da        0x6 obj/TIMER_NEC.o
                0x001439da                Timer_NEC_P135::getPrescaler()
 .gnu.linkonce.t._ZN11Timer_NEC_Q12getPrescalerEv
                0x001439e0        0x6 obj/TIMER_NEC.o
                0x001439e0                Timer_NEC_Q::getPrescaler()
 .gnu.linkonce.t._ZN11Timer_NEC_Q7getCCR0Ev
                0x001439e6        0xa obj/TIMER_NEC.o
                0x001439e6                Timer_NEC_Q::getCCR0()
 .gnu.linkonce.t._ZN11Timer_NEC_Q7getCCR1Ev
                0x001439f0        0xa obj/TIMER_NEC.o
                0x001439f0                Timer_NEC_Q::getCCR1()
 .gnu.linkonce.t._ZN11Timer_NEC_Q7getCCR2Ev
                0x001439fa        0xa obj/TIMER_NEC.o
                0x001439fa                Timer_NEC_Q::getCCR2()
 .gnu.linkonce.t._ZN11Timer_NEC_Q7getCCR3Ev
                0x00143a04        0xa obj/TIMER_NEC.o
                0x00143a04                Timer_NEC_Q::getCCR3()
 .gnu.linkonce.t._ZN11Timer_NEC_Q6getCNTEv
                0x00143a0e        0xa obj/TIMER_NEC.o
                0x00143a0e                Timer_NEC_Q::getCNT()
 .gnu.linkonce.t._ZN11pwmAbstract7managerEv
                0x00143a18        0x2 obj/PWMABSTRACT.o
                0x00143a18                pwmAbstract::manager()
 .gnu.linkonce.t._ZN11pwmAbstract9getPwmFrqEv
                0x00143a1a       0x26 obj/PWMABSTRACT.o
                0x00143a1a                pwmAbstract::getPwmFrq()
 .gnu.linkonce.t._ZN11pwmAbstract12getPwmPeriodEv
                0x00143a40       0x26 obj/PWMABSTRACT.o
                0x00143a40                pwmAbstract::getPwmPeriod()
 .gnu.linkonce.t._ZN11pwmAbstract13getPwmTonDutyEv
                0x00143a66        0x6 obj/PWMABSTRACT.o
                0x00143a66                pwmAbstract::getPwmTonDuty()
 .gnu.linkonce.t._ZN11pwmAbstract14getPwmToffDutyEv
                0x00143a6c        0x6 obj/PWMABSTRACT.o
                0x00143a6c                pwmAbstract::getPwmToffDuty()
 .gnu.linkonce.t._ZN11pwmAbstract9setEnableEb
                0x00143a72       0x2a obj/PWMABSTRACT.o
                0x00143a72                pwmAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN11pwmAbstract9isEnabledEv
                0x00143a9c       0x26 obj/PWMABSTRACT.o
                0x00143a9c                pwmAbstract::isEnabled()
 .gnu.linkonce.t._ZN11pwmAbstract19pulseCountIsEnabledEv
                0x00143ac2        0x6 obj/PWMABSTRACT.o
                0x00143ac2                pwmAbstract::pulseCountIsEnabled()
 .gnu.linkonce.t._ZN11pwmAbstract19setPulseCountEnableEb
                0x00143ac8        0xa obj/PWMABSTRACT.o
                0x00143ac8                pwmAbstract::setPulseCountEnable(bool)
 .gnu.linkonce.t._ZN11pwmAbstract20pulseCountingIsEndedEv
                0x00143ad2        0x6 obj/PWMABSTRACT.o
                0x00143ad2                pwmAbstract::pulseCountingIsEnded()
 .gnu.linkonce.t._ZN11pwmAbstract21setPulseCountingEndedEb
                0x00143ad8        0x6 obj/PWMABSTRACT.o
                0x00143ad8                pwmAbstract::setPulseCountingEnded(bool)
 .gnu.linkonce.t._ZN11pwmAbstract22pulseCountingEnded_ISREv
                0x00143ade        0x8 obj/PWMABSTRACT.o
                0x00143ade                pwmAbstract::pulseCountingEnded_ISR()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract9setEnableEb
                0x00143ae6       0x2a obj/PWM_NEC.o
                0x00143ae6                pwMeasurementAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract8isEnableEv
                0x00143b10       0x26 obj/PWM_NEC.o
                0x00143b10                pwMeasurementAbstract::isEnable()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract11setTimeBaseEmNS_8TimeUnitE
                0x00143b36        0xa obj/PWM_NEC.o
                0x00143b36                pwMeasurementAbstract::setTimeBase(unsigned long, pwMeasurementAbstract::TimeUnit)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract11getBaseTimeEv
                0x00143b40        0x6 obj/PWM_NEC.o
                0x00143b40                pwMeasurementAbstract::getBaseTime()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract11getTimeUnitEv
                0x00143b46        0x6 obj/PWM_NEC.o
                0x00143b46                pwMeasurementAbstract::getTimeUnit()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract19getPulseMeasurementERNS_21PulseWidthMeasurementE
                0x00143b4c        0x4 obj/PWM_NEC.o
                0x00143b4c                pwMeasurementAbstract::getPulseMeasurement(pwMeasurementAbstract::PulseWidthMeasurement&)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract22getPulseMeasurementLowERm
                0x00143b50        0x4 obj/PWM_NEC.o
                0x00143b50                pwMeasurementAbstract::getPulseMeasurementLow(unsigned long&)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract23getPulseMeasurementHighERm
                0x00143b54        0x4 obj/PWM_NEC.o
                0x00143b54                pwMeasurementAbstract::getPulseMeasurementHigh(unsigned long&)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract21pulseMeasureAvailableEv
                0x00143b58        0x4 obj/PWM_NEC.o
                0x00143b58                pwMeasurementAbstract::pulseMeasureAvailable()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract24pulseMeasureAvailableLowEv
                0x00143b5c        0x4 obj/PWM_NEC.o
                0x00143b5c                pwMeasurementAbstract::pulseMeasureAvailableLow()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract25pulseMeasureAvailableHighEv
                0x00143b60        0x4 obj/PWM_NEC.o
                0x00143b60                pwMeasurementAbstract::pulseMeasureAvailableHigh()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract5clearEv
                0x00143b64        0x2 obj/PWM_NEC.o
                0x00143b64                pwMeasurementAbstract::clear()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract7managerEv
                0x00143b66        0x2 obj/PWM_NEC.o
                0x00143b66                pwMeasurementAbstract::manager()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract16timeUnitToSecondENS_8TimeUnitE
                0x00143b68       0x50 obj/PWM_NEC.o
                0x00143b68                pwMeasurementAbstract::timeUnitToSecond(pwMeasurementAbstract::TimeUnit)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract12popCountHighERm
                0x00143bb8        0x4 obj/PWM_NEC.o
                0x00143bb8                pwMeasurementAbstract::popCountHigh(unsigned long&)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract13pushCountHighEm
                0x00143bbc        0x4 obj/PWM_NEC.o
                0x00143bbc                pwMeasurementAbstract::pushCountHigh(unsigned long)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract11popCountLowERm
                0x00143bc0        0x4 obj/PWM_NEC.o
                0x00143bc0                pwMeasurementAbstract::popCountLow(unsigned long&)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract12pushCountLowEm
                0x00143bc4        0x4 obj/PWM_NEC.o
                0x00143bc4                pwMeasurementAbstract::pushCountLow(unsigned long)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract13whatMeasuringEv
                0x00143bc8        0x6 obj/PWM_NEC.o
                0x00143bc8                pwMeasurementAbstract::whatMeasuring()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract19setMeasurementStateENS_16MeasurementStateE
                0x00143bce        0x6 obj/PWM_NEC.o
                0x00143bce                pwMeasurementAbstract::setMeasurementState(pwMeasurementAbstract::MeasurementState)
 .gnu.linkonce.t._ZN11NECpwmTimer7managerEv
                0x00143bd4        0x2 obj/PWM_NEC.o
                0x00143bd4                NECpwmTimer::manager()
 .gnu.linkonce.t._ZN19NECpwMeasurentTimer16newTimerOverFlowEv
                0x00143bd6        0xc obj/PWM_NEC.o
                0x00143bd6                NECpwMeasurentTimer::newTimerOverFlow()
 .gnu.linkonce.t._ZN19NECpwMeasurentTimer16getTimerOverFlowEv
                0x00143be2        0x6 obj/PWM_NEC.o
                0x00143be2                NECpwMeasurentTimer::getTimerOverFlow()
 .gnu.linkonce.t._ZN19NECpwMeasurentTimer5clearEv
                0x00143be8       0x32 obj/PWM_NEC.o
                0x00143be8                NECpwMeasurentTimer::clear()
 .gnu.linkonce.t._ZN13MotorAbstract7managerEv
                0x00143c1a        0x2 obj/WTH.o
                0x00143c1a                MotorAbstract::manager()
 .gnu.linkonce.t._ZN13MotorAbstract11setVelocityEdb
                0x00143c1c        0x8 obj/WTH.o
                0x00143c1c                MotorAbstract::setVelocity(double, bool)
 .gnu.linkonce.t._ZN13MotorAbstract11getVelocityEv
                0x00143c24        0x6 obj/WTH.o
                0x00143c24                MotorAbstract::getVelocity()
 .gnu.linkonce.t._ZN13MotorAbstract9setEnableEb
                0x00143c2a        0x6 obj/WTH.o
                0x00143c2a                MotorAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN13MotorAbstract8isEnableEv
                0x00143c30        0x6 obj/WTH.o
                0x00143c30                MotorAbstract::isEnable()
 .gnu.linkonce.t._ZN13MotorAbstract8isMovingEv
                0x00143c36       0x4c obj/WTH.o
                0x00143c36                MotorAbstract::isMoving()
 .gnu.linkonce.t._ZN13MotorAbstract5powerEb
                0x00143c82        0x6 obj/WTH.o
                0x00143c82                MotorAbstract::power(bool)
 .gnu.linkonce.t._ZN13MotorAbstract9isPoweredEv
                0x00143c88        0x6 obj/WTH.o
                0x00143c88                MotorAbstract::isPowered()
 .gnu.linkonce.t._ZN11WthAbstract6mangerEv
                0x00143c8e        0x2 obj/WTH.o
                0x00143c8e                WthAbstract::manger()
 .gnu.linkonce.t._ZN11WthAbstract17setLinearVelocityEdb
                0x00143c90        0x8 obj/WTH.o
                0x00143c90                WthAbstract::setLinearVelocity(double, bool)
 .gnu.linkonce.t._ZN11WthAbstract17getLinearVelocityEv
                0x00143c98        0x6 obj/WTH.o
                0x00143c98                WthAbstract::getLinearVelocity()
 .gnu.linkonce.t._ZN11WthAbstract9setEnableEb
                0x00143c9e        0x6 obj/WTH.o
                0x00143c9e                WthAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN11WthAbstract8isEnableEv
                0x00143ca4        0x6 obj/WTH.o
                0x00143ca4                WthAbstract::isEnable()
 .gnu.linkonce.t._ZN11WthAbstract8isMovingEv
                0x00143caa       0x4c obj/WTH.o
                0x00143caa                WthAbstract::isMoving()
 .gnu.linkonce.t._ZN11WthAbstract7setStepEd
                0x00143cf6        0x6 obj/WTH.o
                0x00143cf6                WthAbstract::setStep(double)
 .gnu.linkonce.t._ZN11WthAbstract7getStepEv
                0x00143cfc        0x6 obj/WTH.o
                0x00143cfc                WthAbstract::getStep()
 .gnu.linkonce.t._ZN11WthAbstract17getLmtSwLowStatusEv
                0x00143d02        0x6 obj/WTH.o
                0x00143d02                WthAbstract::getLmtSwLowStatus()
 .gnu.linkonce.t._ZN11WthAbstract18getLmtSwHighStatusEv
                0x00143d08        0x6 obj/WTH.o
                0x00143d08                WthAbstract::getLmtSwHighStatus()
 .gnu.linkonce.t._ZN11WthAbstract5powerEb
                0x00143d0e        0x6 obj/WTH.o
                0x00143d0e                WthAbstract::power(bool)
 .gnu.linkonce.t._ZN11WthAbstract9isPoweredEv
                0x00143d14        0x6 obj/WTH.o
                0x00143d14                WthAbstract::isPowered()
 .gnu.linkonce.t._ZN11WthAbstract17setLmtSwLowStatusENS_17LimitSwitchStatusE
                0x00143d1a        0x6 obj/WTH.o
                0x00143d1a                WthAbstract::setLmtSwLowStatus(WthAbstract::LimitSwitchStatus)
 .gnu.linkonce.t._ZN11WthAbstract18setLmtSwHighStatusENS_17LimitSwitchStatusE
                0x00143d20        0x6 obj/WTH.o
                0x00143d20                WthAbstract::setLmtSwHighStatus(WthAbstract::LimitSwitchStatus)
 .gnu.linkonce.t._ZN19IR_protocolAbstract7managerEv
                0x00143d26        0x2 obj/IR_Toshiba_protocol.o
                0x00143d26                IR_protocolAbstract::manager()
 .gnu.linkonce.t._ZN19IR_protocolAbstract11pop_IR_DataERNS_9IR_data_tE
                0x00143d28        0x4 obj/IR_Toshiba_protocol.o
                0x00143d28                IR_protocolAbstract::pop_IR_Data(IR_protocolAbstract::IR_data_t&)
 .gnu.linkonce.t._ZN19IR_protocolAbstract11isDataEmpryEv
                0x00143d2c        0xc obj/IR_Toshiba_protocol.o
                0x00143d2c                IR_protocolAbstract::isDataEmpry()
 .gnu.linkonce.t._ZN19IR_protocolAbstract8setStateENS_18IR_decondingStatesE
                0x00143d38       0x1a obj/IR_Toshiba_protocol.o
                0x00143d38                IR_protocolAbstract::setState(IR_protocolAbstract::IR_decondingStates)
 .gnu.linkonce.t._ZN19IR_protocolAbstract17getDecodingStatusEv
                0x00143d52        0x6 obj/IR_Toshiba_protocol.o
                0x00143d52                IR_protocolAbstract::getDecodingStatus()
 .gnu.linkonce.t._ZN19IR_protocolAbstract25getPreviousDecodingStatusEv
                0x00143d58        0x6 obj/IR_Toshiba_protocol.o
                0x00143d58                IR_protocolAbstract::getPreviousDecodingStatus()
 .gnu.linkonce.t._ZN12SPI_Abstract14setPowerEnableEb
                0x00143d5e        0x6 obj/SPI_ABSTRACT.o
                0x00143d5e                SPI_Abstract::setPowerEnable(bool)
 .gnu.linkonce.t._ZN12SPI_Abstract13isPowerEnableEv
                0x00143d64        0x6 obj/SPI_ABSTRACT.o
                0x00143d64                SPI_Abstract::isPowerEnable()
 .gnu.linkonce.t._ZN12SPI_Abstract21setTransmissionEnableEb
                0x00143d6a        0x6 obj/SPI_ABSTRACT.o
                0x00143d6a                SPI_Abstract::setTransmissionEnable(bool)
 .gnu.linkonce.t._ZN12SPI_Abstract20isTransmissionEnableEv
                0x00143d70        0x6 obj/SPI_ABSTRACT.o
                0x00143d70                SPI_Abstract::isTransmissionEnable()
 .gnu.linkonce.t._ZN12SPI_Abstract18setReceptionEnableEb
                0x00143d76        0x6 obj/SPI_ABSTRACT.o
                0x00143d76                SPI_Abstract::setReceptionEnable(bool)
 .gnu.linkonce.t._ZN12SPI_Abstract17isReceptionEnableEv
                0x00143d7c        0x6 obj/SPI_ABSTRACT.o
                0x00143d7c                SPI_Abstract::isReceptionEnable()
 .gnu.linkonce.t._ZN12SPI_Abstract24getTransferModeDirectionEv
                0x00143d82        0x6 obj/SPI_ABSTRACT.o
                0x00143d82                SPI_Abstract::getTransferModeDirection()
 .gnu.linkonce.t._ZN12SPI_Abstract28getTransferModeSpecificationEv
                0x00143d88        0x6 obj/SPI_ABSTRACT.o
                0x00143d88                SPI_Abstract::getTransferModeSpecification()
 .gnu.linkonce.t._ZN12SPI_Abstract20getCommunicationTypeEv
                0x00143d8e        0x6 obj/SPI_ABSTRACT.o
                0x00143d8e                SPI_Abstract::getCommunicationType()
 .gnu.linkonce.t._ZN12SPI_Abstract21getCommunicationClockEv
                0x00143d94        0x6 obj/SPI_ABSTRACT.o
                0x00143d94                SPI_Abstract::getCommunicationClock()
 .gnu.linkonce.t._ZN12SPI_Abstract20getBitTransferLenghtEv
                0x00143d9a        0x6 obj/SPI_ABSTRACT.o
                0x00143d9a                SPI_Abstract::getBitTransferLenght()
 .gnu.linkonce.t._ZN12SPI_Abstract4putcEt
                0x00143da0        0x4 obj/SPI_ABSTRACT.o
                0x00143da0                SPI_Abstract::putc(unsigned short)
 .gnu.linkonce.t._ZN12SPI_Abstract4getcEt
                0x00143da4        0x4 obj/SPI_ABSTRACT.o
                0x00143da4                SPI_Abstract::getc(unsigned short)
 .gnu.linkonce.t._ZN12SPI_Abstract4busyEv
                0x00143da8        0x4 obj/SPI_ABSTRACT.o
                0x00143da8                SPI_Abstract::busy()
 .gnu.linkonce.t._ZN7SPI_NEC13isPowerEnableEv
                0x00143dac        0x6 obj/SPI_NEC.o
                0x00143dac                SPI_NEC::isPowerEnable()
 .gnu.linkonce.t._ZN7SPI_NEC20isTransmissionEnableEv
                0x00143db2        0x6 obj/SPI_NEC.o
                0x00143db2                SPI_NEC::isTransmissionEnable()
 .gnu.linkonce.t._ZN7SPI_NEC17isReceptionEnableEv
                0x00143db8        0x6 obj/SPI_NEC.o
                0x00143db8                SPI_NEC::isReceptionEnable()
 .gnu.linkonce.t._ZN7SPI_NEC24getTransferModeDirectionEv
                0x00143dbe        0x6 obj/SPI_NEC.o
                0x00143dbe                SPI_NEC::getTransferModeDirection()
 .gnu.linkonce.t._ZN7SPI_NEC28getTransferModeSpecificationEv
                0x00143dc4        0x6 obj/SPI_NEC.o
                0x00143dc4                SPI_NEC::getTransferModeSpecification()
 .gnu.linkonce.t._ZN7SPI_NEC20getCommunicationTypeEv
                0x00143dca        0x6 obj/SPI_NEC.o
                0x00143dca                SPI_NEC::getCommunicationType()
 .gnu.linkonce.t._ZN7SPI_NEC21getCommunicationClockEv
                0x00143dd0        0x6 obj/SPI_NEC.o
                0x00143dd0                SPI_NEC::getCommunicationClock()
 .gnu.linkonce.t._ZN7SPI_NEC20getBitTransferLenghtEv
                0x00143dd6        0x6 obj/SPI_NEC.o
                0x00143dd6                SPI_NEC::getBitTransferLenght()
 .gnu.linkonce.t._ZN11WtpAbstract7managerEv
                0x00143ddc        0x2 obj/WTP.o
                0x00143ddc                WtpAbstract::manager()
 .gnu.linkonce.t._ZN11WtpAbstract11setVelocityEdb
                0x00143dde        0x8 obj/WTP.o
                0x00143dde                WtpAbstract::setVelocity(double, bool)
 .gnu.linkonce.t._ZN11WtpAbstract11getVelocityEv
                0x00143de6        0x6 obj/WTP.o
                0x00143de6                WtpAbstract::getVelocity()
 .gnu.linkonce.t._ZN11WtpAbstract9setEnableEb
                0x00143dec        0x6 obj/WTP.o
                0x00143dec                WtpAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN11WtpAbstract8isEnableEv
                0x00143df2        0x6 obj/WTP.o
                0x00143df2                WtpAbstract::isEnable()
 .gnu.linkonce.t._ZN11WtpAbstract8isMovingEv
                0x00143df8       0x4c obj/WTP.o
                0x00143df8                WtpAbstract::isMoving()
 .gnu.linkonce.t._ZN11WtpAbstract5powerEb
                0x00143e44        0x6 obj/WTP.o
                0x00143e44                WtpAbstract::power(bool)
 .gnu.linkonce.t._ZN11WtpAbstract9isPoweredEv
                0x00143e4a        0x6 obj/WTP.o
                0x00143e4a                WtpAbstract::isPowered()

.ctors          0x00143e50        0x8
                0x00143e50                . = ALIGN (0x10)
                0x00143e50                ___ctors = .
 *(.ctors)
 .ctors         0x00143e50        0x4 obj/SWTIM.o
 .ctors         0x00143e54        0x4 obj/SOUND.o
                0x00143e58                ___ctors_end = .

.dtors          0x00143e58        0x0
                0x00143e58                ___dtors = .
 *(.dtors)
                0x00143e58                ___dtors_end = .
                0x00144000                . = ALIGN (0x1000)
                0x00144000                __etext = .
                0x00144000                PROVIDE (_etext, .)

.ramcode        0x00000000        0x0 load address 0x00144000
                0x00000000                __ramcode_start = .
 *(.ramcode)
                0x00000000                . = ALIGN (0x4)
                0x00000000                __ramcode_end = .

.rodata         0x00150000     0x2014
                0x00150000                . = ALIGN (0x4)
                0x00150000                __rodata_start = .
 *(.rodata)
 .rodata        0x00150000      0x1e4 obj/main.o
                0x0015011f                _sAppName
                0x00150128                _sAppRevision
                0x0015013a                _sAppDate
                0x00150146                _fpgaWantedBitstream
                0x00150131                _sHwVersion
                0x00150154                _sAppDateLength
                0x00150150                _sHwVersionLength
                0x0015014c                _sAppRevisionLength
                0x00150148                _sAppNameLength
 .rodata        0x001501e4        0x1 obj/STRCLASS.o
 *fill*         0x001501e5        0x1 00
 .rodata        0x001501e6       0x5c obj/PRINT.o
 *fill*         0x00150242        0x2 00
 .rodata        0x00150244       0xb8 obj/util.o
 .rodata        0x001502fc       0x11 obj/PROTOCOLSAUANDPC.o
 .rodata        0x0015030d       0x33 obj/PROTOCOL_uC.o
 .rodata        0x00150340      0x3c7 obj/iWRAP_BLUEGIGA.o
 .rodata        0x00150707       0x1d obj/iWRAP_BLUEGIGA_SPP.o
 .rodata        0x00150724      0x2ab obj/SAU7000_MANAGER.o
 *fill*         0x001509cf        0x1 00
 .rodata        0x001509d0       0x24 obj/CHRSET.o
 .rodata        0x001509f4       0x33 obj/GRAPH.o
 .rodata        0x00150a27       0xaa obj/APPMENU.o
 .rodata        0x00150ad1       0x18 obj/SSPIE_HARDWARE.o
 .rodata        0x00150ae9        0x3 obj/SSPIE_CORE.o
 .rodata        0x00150aec      0x212 obj/SSPIE_MAIN.o
 .rodata        0x00150cfe        0x8 obj/SSPIE_UTIL.o
 .rodata        0x00150d06      0x281 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
                0x00150d06                __ctype_
 .rodata        0x00150f87        0x2 c:\gcc850\lib\libc.a(lib_a-impure.o)
 *fill*         0x00150f89        0x3 00
 .rodata        0x00150f8c       0x10 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
                0x00150f8c                ___thenan_sf
 .rodata        0x00150f9c      0x100 c:\gcc850\lib\libgcc.a(_clz.o)
                0x00150f9c                ___clz_tab
 *(.gnu.linkonce.r*)
 .gnu.linkonce.r._ZTV20GenericHwChanManagerIlLi4EE
                0x0015109c        0xc obj/main.o
                0x0015109c                vtable for GenericHwChanManager<long, 4>
 .gnu.linkonce.r._ZTV13HwChanManagerIlLi4EE
                0x001510a8        0xc obj/main.o
                0x001510a8                vtable for HwChanManager<long, 4>
 .gnu.linkonce.r._ZTV16GenericHwChannelIlLi4EE
                0x001510b4        0xc obj/main.o
                0x001510b4                vtable for GenericHwChannel<long, 4>
 .gnu.linkonce.r._ZTV9HwChannelIlLi4EE
                0x001510c0        0xc obj/main.o
                0x001510c0                vtable for HwChannel<long, 4>
 .gnu.linkonce.r._ZTV16PrsHwChanManagerIsLi40EE
                0x001510cc        0xc obj/main.o
                0x001510cc                vtable for PrsHwChanManager<short, 40>
 .gnu.linkonce.r._ZTV13HwChanManagerIsLi40EE
                0x001510d8        0xc obj/main.o
                0x001510d8                vtable for HwChanManager<short, 40>
 .gnu.linkonce.r._ZTV12PrsHwChannelIsLi40EE
                0x001510e4        0xc obj/main.o
                0x001510e4                vtable for PrsHwChannel<short, 40>
 .gnu.linkonce.r._ZTV9HwChannelIsLi40EE
                0x001510f0        0xc obj/main.o
                0x001510f0                vtable for HwChannel<short, 40>
 .gnu.linkonce.r._ZTV6String
                0x001510fc       0x10 obj/STRCLASS.o
                0x001510fc                vtable for String
 .gnu.linkonce.r._ZTV16KeyboardAbstract
                0x0015110c       0x48 obj/KEYABSTRACT.o
                0x0015110c                vtable for KeyboardAbstract
 .gnu.linkonce.r._ZTV8Keyboard
                0x00151154       0x48 obj/KEYBOARD.o
                0x00151154                vtable for Keyboard
 .gnu.linkonce.r._ZTV3Key
                0x0015119c       0x4c obj/KEYBOARD.o
                0x0015119c                vtable for Key
 .gnu.linkonce.r._ZTV11KeyAbstract
                0x001511e8       0x4c obj/KEYBOARD.o
                0x001511e8                vtable for KeyAbstract
 .gnu.linkonce.r._ZTV14AdcSpiAbstract
                0x00151234       0x18 obj/ADCABSTRACT.o
                0x00151234                vtable for AdcSpiAbstract
 .gnu.linkonce.r._ZTV11AdcAbstract
                0x0015124c       0x18 obj/ADCABSTRACT.o
                0x0015124c                vtable for AdcAbstract
 .gnu.linkonce.r._ZTV7Adc_NEC
                0x00151264       0x18 obj/ADC_NEC.o
                0x00151264                vtable for Adc_NEC
 .gnu.linkonce.r._ZTV15Adc_NEC_SAU7000
                0x0015127c       0x18 obj/ADC_SAU7000.o
                0x0015127c                vtable for Adc_NEC_SAU7000
 .gnu.linkonce.r._ZTV20VoltageHwChanManagerItLi5EE
                0x00151294        0xc obj/ADC_SAU7000.o
                0x00151294                vtable for VoltageHwChanManager<unsigned short, 5>
 .gnu.linkonce.r._ZTV13HwChanManagerItLi5EE
                0x001512a0        0xc obj/ADC_SAU7000.o
                0x001512a0                vtable for HwChanManager<unsigned short, 5>
 .gnu.linkonce.r._ZTV16VoltageHwChannelItLi5EE
                0x001512ac        0xc obj/ADC_SAU7000.o
                0x001512ac                vtable for VoltageHwChannel<unsigned short, 5>
 .gnu.linkonce.r._ZTV9HwChannelItLi5EE
                0x001512b8        0xc obj/ADC_SAU7000.o
                0x001512b8                vtable for HwChannel<unsigned short, 5>
 .gnu.linkonce.r._ZTV20CurrentHwChanManagerItLi5EE
                0x001512c4        0xc obj/ADC_SAU7000.o
                0x001512c4                vtable for CurrentHwChanManager<unsigned short, 5>
 .gnu.linkonce.r._ZTV16CurrentHwChannelItLi5EE
                0x001512d0        0xc obj/ADC_SAU7000.o
                0x001512d0                vtable for CurrentHwChannel<unsigned short, 5>
 .gnu.linkonce.r._ZTV20VoltageHwChanManagerItLi16EE
                0x001512dc        0xc obj/ADC_SAU7000.o
                0x001512dc                vtable for VoltageHwChanManager<unsigned short, 16>
 .gnu.linkonce.r._ZTV13HwChanManagerItLi16EE
                0x001512e8        0xc obj/ADC_SAU7000.o
                0x001512e8                vtable for HwChanManager<unsigned short, 16>
 .gnu.linkonce.r._ZTV16VoltageHwChannelItLi16EE
                0x001512f4        0xc obj/ADC_SAU7000.o
                0x001512f4                vtable for VoltageHwChannel<unsigned short, 16>
 .gnu.linkonce.r._ZTV9HwChannelItLi16EE
                0x00151300        0xc obj/ADC_SAU7000.o
                0x00151300                vtable for HwChannel<unsigned short, 16>
 .gnu.linkonce.r._ZTV20CurrentHwChanManagerItLi16EE
                0x0015130c        0xc obj/ADC_SAU7000.o
                0x0015130c                vtable for CurrentHwChanManager<unsigned short, 16>
 .gnu.linkonce.r._ZTV16CurrentHwChannelItLi16EE
                0x00151318        0xc obj/ADC_SAU7000.o
                0x00151318                vtable for CurrentHwChannel<unsigned short, 16>
 .gnu.linkonce.r._ZTV18UartDeviceAbstract
                0x00151324       0x30 obj/UARTABSTRACT.o
                0x00151324                vtable for UartDeviceAbstract
 .gnu.linkonce.r._ZTV7UartNEC
                0x00151354       0x30 obj/UARTNEC.o
                0x00151354                vtable for UartNEC
 .gnu.linkonce.r._ZTV8UartFPGA
                0x00151384       0x30 obj/UARTFPGA.o
                0x00151384                vtable for UartFPGA
 .gnu.linkonce.r._ZTV26stdUartProtocolAbstraction
                0x001513b4       0x38 obj/PROTOCOLSTDUART.o
                0x001513b4                vtable for stdUartProtocolAbstraction
 .gnu.linkonce.r._ZTV13SauPcProtocol
                0x001513ec       0x40 obj/PROTOCOLSAUANDPC.o
                0x001513ec                vtable for SauPcProtocol
 .gnu.linkonce.r._ZTV17ADuC_GEN_protocol
                0x0015142c       0x5c obj/PROTOCOL_uC.o
                0x0015142c                vtable for ADuC_GEN_protocol
 .gnu.linkonce.r._ZTV17ADuC_PRS_protocol
                0x00151488       0x5c obj/PROTOCOL_uC.o
                0x00151488                vtable for ADuC_PRS_protocol
 .gnu.linkonce.r._ZTV20ADuC_WEIGHT_protocol
                0x001514e4       0x5c obj/PROTOCOL_uC.o
                0x001514e4                vtable for ADuC_WEIGHT_protocol
 .gnu.linkonce.r._ZTV11uC_Protocol
                0x00151540       0x5c obj/PROTOCOL_uC.o
                0x00151540                vtable for uC_Protocol
 .gnu.linkonce.r._ZTV18SauAndEmgzProtocol
                0x0015159c       0x38 obj/PROTOCOLSAUANDEMGZ.o
                0x0015159c                vtable for SauAndEmgzProtocol
 .gnu.linkonce.r._ZTV23iWRAP_BLUEGIGA_Protocol
                0x001515d4       0x40 obj/iWRAP_BLUEGIGA.o
                0x001515d4                vtable for iWRAP_BLUEGIGA_Protocol
 .gnu.linkonce.r._ZTV18iWRAP_BLUEGIGA_SPP
                0x00151614       0x40 obj/iWRAP_BLUEGIGA_SPP.o
                0x00151614                vtable for iWRAP_BLUEGIGA_SPP
 .gnu.linkonce.r._ZTV14CMenuSwitchOff
                0x00151654       0x18 obj/APPMENU.o
                0x00151654                vtable for CMenuSwitchOff
 .gnu.linkonce.r._ZTV13CMenuMessages
                0x0015166c       0x18 obj/APPMENU.o
                0x0015166c                vtable for CMenuMessages
 .gnu.linkonce.r._ZTV9CMenuInfo
                0x00151684       0x18 obj/APPMENU.o
                0x00151684                vtable for CMenuInfo
 .gnu.linkonce.r._ZTV15CMenuADuCfrqCal
                0x0015169c       0x18 obj/APPMENU.o
                0x0015169c                vtable for CMenuADuCfrqCal
 .gnu.linkonce.r._ZTV15CMenuADuCstatus
                0x001516b4       0x18 obj/APPMENU.o
                0x001516b4                vtable for CMenuADuCstatus
 .gnu.linkonce.r._ZTV9CMenuMain
                0x001516cc       0x18 obj/APPMENU.o
                0x001516cc                vtable for CMenuMain
 .gnu.linkonce.r._ZTV9CMenuLogo
                0x001516e4       0x18 obj/APPMENU.o
                0x001516e4                vtable for CMenuLogo
 .gnu.linkonce.r._ZTV16CMenuGeneralInfo
                0x001516fc       0x18 obj/APPMENU.o
                0x001516fc                vtable for CMenuGeneralInfo
 .gnu.linkonce.r._ZTV9CMenuPage
                0x00151714       0x18 obj/APPMENU.o
                0x00151714                vtable for CMenuPage
 .gnu.linkonce.r._ZTV22ADuCfwUpgrade_protocol
                0x0015172c       0x38 obj/PROTOCOLADuCfwUPGRADE.o
                0x0015172c                vtable for ADuCfwUpgrade_protocol
 .gnu.linkonce.r._ZTV11Timer_NEC_Q
                0x00151764       0xd0 obj/TIMER_NEC.o
                0x00151764                vtable for Timer_NEC_Q
 .gnu.linkonce.r._ZTV14Timer_NEC_P135
                0x00151834       0xc8 obj/TIMER_NEC.o
                0x00151834                vtable for Timer_NEC_P135
 .gnu.linkonce.r._ZTV14Timer_NEC_P024
                0x001518fc       0xc8 obj/TIMER_NEC.o
                0x001518fc                vtable for Timer_NEC_P024
 .gnu.linkonce.r._ZTV11Timer_NEC_P
                0x001519c4       0xc0 obj/TIMER_NEC.o
                0x001519c4                vtable for Timer_NEC_P
 .gnu.linkonce.r._ZTV9Timer_NEC
                0x00151a84       0xc0 obj/TIMER_NEC.o
                0x00151a84                vtable for Timer_NEC
 .gnu.linkonce.r._ZTV13TimerAbstract
                0x00151b44       0x28 obj/TIMER_NEC.o
                0x00151b44                vtable for TimerAbstract
 .gnu.linkonce.r._ZTV11pwmAbstract
                0x00151b6c       0x48 obj/PWMABSTRACT.o
                0x00151b6c                vtable for pwmAbstract
 .gnu.linkonce.r._ZTV19NECpwMeasurentTimer
                0x00151bb4       0x64 obj/PWM_NEC.o
                0x00151bb4                vtable for NECpwMeasurentTimer
 .gnu.linkonce.r._ZTV11NECpwmTimer
                0x00151c18       0x4c obj/PWM_NEC.o
                0x00151c18                vtable for NECpwmTimer
 .gnu.linkonce.r._ZTV21pwMeasurementAbstract
                0x00151c64       0x58 obj/PWM_NEC.o
                0x00151c64                vtable for pwMeasurementAbstract
 .gnu.linkonce.r._ZTV9WthMenfis
                0x00151cbc       0x50 obj/WTH.o
                0x00151cbc                vtable for WthMenfis
 .gnu.linkonce.r._ZTV11WthAbstract
                0x00151d0c       0x4c obj/WTH.o
                0x00151d0c                vtable for WthAbstract
 .gnu.linkonce.r._ZTV13MotorAbstract
                0x00151d58       0x28 obj/WTH.o
                0x00151d58                vtable for MotorAbstract
 .gnu.linkonce.r._ZTV19Toshiba_IR_protocol
                0x00151d80       0x20 obj/IR_Toshiba_protocol.o
                0x00151d80                vtable for Toshiba_IR_protocol
 .gnu.linkonce.r._ZTV19IR_protocolAbstract
                0x00151da0       0x20 obj/IR_Toshiba_protocol.o
                0x00151da0                vtable for IR_protocolAbstract
 .gnu.linkonce.r._ZTV24RC5_Standard_IR_protocol
                0x00151dc0       0x20 obj/IR_RC5_Standard_protocol.o
                0x00151dc0                vtable for RC5_Standard_IR_protocol
 .gnu.linkonce.r._ZTV9IR_Remote
                0x00151de0       0x48 obj/IR_remote.o
                0x00151de0                vtable for IR_Remote
 .gnu.linkonce.r._ZTV6IR_Key
                0x00151e28       0x4c obj/IR_remote.o
                0x00151e28                vtable for IR_Key
 .gnu.linkonce.r._ZTV12SPI_Abstract
                0x00151e74       0x54 obj/SPI_ABSTRACT.o
                0x00151e74                vtable for SPI_Abstract
 .gnu.linkonce.r._ZTV17SPI_Interrupt_NEC
                0x00151ec8       0x54 obj/SPI_NEC.o
                0x00151ec8                vtable for SPI_Interrupt_NEC
 .gnu.linkonce.r._ZTV14SPI_Poller_NEC
                0x00151f1c       0x54 obj/SPI_NEC.o
                0x00151f1c                vtable for SPI_Poller_NEC
 .gnu.linkonce.r._ZTV7SPI_NEC
                0x00151f70       0x54 obj/SPI_NEC.o
                0x00151f70                vtable for SPI_NEC
 .gnu.linkonce.r._ZTV9WtpMenfis
                0x00151fc4       0x28 obj/WTP.o
                0x00151fc4                vtable for WtpMenfis
 .gnu.linkonce.r._ZTV11WtpAbstract
                0x00151fec       0x28 obj/WTP.o
                0x00151fec                vtable for WtpAbstract
 *(.gcc_except_table)
                0x00152014                . = ALIGN (0x4)

.rodata.cst4    0x00152014       0x34
                0x00152014                __rodata.cst4_start = .
                0x00152014                . = ALIGN (0x4)
 *(.rodata.cst4)
 .rodata.cst4   0x00152014        0x4 obj/PRINT.o
 .rodata.cst4   0x00152018        0x4 obj/PROTOCOLSAUANDPC.o
 .rodata.cst4   0x0015201c       0x14 obj/iWRAP_BLUEGIGA.o
 .rodata.cst4   0x00152030       0x10 obj/SAU7000_MANAGER.o
 .rodata.cst4   0x00152040        0x8 obj/DPYDRV.o
                0x00152048                . = ALIGN (0x4)
                0x00152048                __rodata_end = .

.message        0x00154000    0x2aea4
                0x00154000                __message_start = .
 *(.message)
 .message       0x00154000     0x2208 obj/main.o
 .message       0x00156208      0x240 obj/DPYDRV.o
 .message       0x00156448       0x40 obj/CHRSET.o
 .message       0x00156488       0x68 obj/GRAPH.o
 .message       0x001564f0      0xdea obj/ICONS.o
                0x00156c08                _icoWTH_01
                0x001568a8                _icoWTP_01
                0x00156a2e                _icoWTP_04
                0x00156b32                _icoLMTSW_NOT_REACHED
                0x00156d8c                _icoWTH_03
                0x00156f10                _icoWTH_05
                0x001569ac                _icoWTP_03
                0x0015675e                _icoUSB
                0x00156cca                _icoWTH_02
                0x001564f0                _pictLogo
                0x00156b46                _icoWTH_00
                0x00156b3c                _icoLMTSW_REACHED
                0x00157156                _icoWTH_08
                0x00156790                _icoNO_USB
                0x00157218                _icoWTH_09
                0x0015692a                _icoWTP_02
                0x00156fd2                _icoWTH_06
                0x00156826                _icoWTP_00
                0x00156ab0                _icoWTP_05
                0x00157094                _icoWTH_07
                0x001567f4                _icoBLANK_24x10
                0x001567c2                _icoBT
                0x00156e4e                _icoWTH_04
 *fill*         0x001572da        0x2 00
 .message       0x001572dc     0x7498 obj/SAU7000_ADuC_SOURCE.o
                0x001572e4                _ADuC_Source
                0x001572e0                _ADuC_Source_size
                0x001572dc                _ADuC_REV_MAJOR
                0x001572dd                _ADuC_REV_MINOR
 .message       0x0015e774    0x2072d obj/SSPIE_MAIN.o
                0x0017eea4                . = ALIGN (0x4)
 *fill*         0x0017eea1        0x3 00
                0x0017eea4                __message_end = .
                0x0017eea4                PROVIDE (_intflash_end, __message_end)

.usrstk         0x00194000        0x0
                0x00194000                __base_heap = .
                0x00194000                PROVIDE (_base_heap, .)
                0x00194000                __end_heap = .
                0x00194000                PROVIDE (_end_heap, .)
 *(.user_stack)
                0x00194000                __user_stack = .

.data           0x03ff5000      0x42c load address 0x00152048
                0x03ff5000                . = ALIGN (0x10)
                0x03ff5000                __data_start = .
 *(.data)
 .data          0x03ff5000        0x0 obj/startup.o
 .data          0x03ff5000        0x0 obj/crt0.o
 .data          0x03ff5000        0x0 obj/crt1.o
 .data          0x03ff5000        0x0 obj/main.o
 .data          0x03ff5000        0x2 obj/IRQSG2.o
 .data          0x03ff5002        0x0 obj/ERROR.o
 *fill*         0x03ff5002        0x2 00
 .data          0x03ff5004        0x8 obj/ALLOC.o
 .data          0x03ff500c        0x0 obj/NEW.o
 .data          0x03ff500c        0x0 obj/STRCLASS.o
 .data          0x03ff500c        0x4 obj/PRINT.o
                0x03ff500c                _sprintfMaxCount
 .data          0x03ff5010        0x0 obj/SWTIM.o
 .data          0x03ff5010        0x0 obj/util.o
 .data          0x03ff5010        0x0 obj/sioSG2.o
 .data          0x03ff5010        0x0 obj/SOUND.o
 .data          0x03ff5010        0x0 obj/KEYABSTRACT.o
 .data          0x03ff5010        0x0 obj/KEYBOARD.o
 .data          0x03ff5010        0x0 obj/ADCABSTRACT.o
 .data          0x03ff5010        0x0 obj/ADC_NEC.o
 .data          0x03ff5010        0x0 obj/ADC_SAU7000.o
 .data          0x03ff5010        0x0 obj/UARTABSTRACT.o
 .data          0x03ff5010        0x0 obj/UARTNEC.o
 .data          0x03ff5010        0x0 obj/UARTFPGA.o
 .data          0x03ff5010        0x0 obj/PROTOCOLSTDUART.o
 .data          0x03ff5010        0x0 obj/PROTOCOLSAUANDPC.o
 .data          0x03ff5010        0x0 obj/PROTOCOL_uC.o
 .data          0x03ff5010        0x0 obj/PROTOCOLSAUANDEMGZ.o
 .data          0x03ff5010        0x0 obj/iWRAP_BLUEGIGA.o
 .data          0x03ff5010        0x0 obj/iWRAP_BLUEGIGA_SPP.o
 .data          0x03ff5010        0x4 obj/SAU7000_MANAGER.o
 .data          0x03ff5014        0x0 obj/DPYDRV.o
 .data          0x03ff5014        0x0 obj/CHRSET.o
 .data          0x03ff5014        0x0 obj/GRAPH.o
 .data          0x03ff5014        0xf obj/APPMENU.o
                0x03ff5014                CMenuGeneralInfo::m_COMM_icoType
                0x03ff5015                CMenuGeneralInfo::m_strSAUstate
 .data          0x03ff5023        0x0 obj/ICONS.o
 .data          0x03ff5023        0x0 obj/EEPROM_SPI.o
 .data          0x03ff5023        0x0 obj/SAU7000_ADuC_SOURCE.o
 .data          0x03ff5023        0x0 obj/PROTOCOLADuCfwUPGRADE.o
 .data          0x03ff5023        0x0 obj/ADuC_UPGRADEMANAGER.o
 .data          0x03ff5023        0x0 obj/TIMER_NEC.o
 .data          0x03ff5023        0x0 obj/PWMABSTRACT.o
 .data          0x03ff5023        0x0 obj/PWM_NEC.o
 .data          0x03ff5023        0x0 obj/WTH.o
 .data          0x03ff5023        0x0 obj/IR_Toshiba_protocol.o
 .data          0x03ff5023        0x0 obj/IR_RC5_Standard_protocol.o
 .data          0x03ff5023        0x0 obj/IR_remote.o
 .data          0x03ff5023        0x0 obj/SPI_ABSTRACT.o
 .data          0x03ff5023        0x0 obj/SPI_NEC.o
 .data          0x03ff5023        0x0 obj/TMC262_DRV.o
 .data          0x03ff5023        0x0 obj/WTP.o
 .data          0x03ff5023        0x0 obj/SSPIE_HARDWARE.o
 .data          0x03ff5023        0x0 obj/SSPIE_CORE.o
 .data          0x03ff5023        0x0 obj/SSPIE_INTRFACE.o
 .data          0x03ff5023        0x0 obj/SSPIE_MAIN.o
 .data          0x03ff5023        0x0 obj/SSPIE_SSPIEm.o
 .data          0x03ff5023        0x0 obj/SSPIE_UTIL.o
 .data          0x03ff5023        0x0 obj/ADuCSETTING.o
 .data          0x03ff5023        0x0 c:\gcc850\lib\libc.a(lib_a-atoi.o)
 .data          0x03ff5023        0x0 c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
 .data          0x03ff5023        0x0 c:\gcc850\lib\libc.a(lib_a-memcpy.o)
 .data          0x03ff5023        0x0 c:\gcc850\lib\libc.a(lib_a-strcat.o)
 .data          0x03ff5023        0x0 c:\gcc850\lib\libc.a(lib_a-strcmp.o)
 .data          0x03ff5023        0x0 c:\gcc850\lib\libc.a(lib_a-strcpy.o)
 .data          0x03ff5023        0x0 c:\gcc850\lib\libc.a(lib_a-strlen.o)
 .data          0x03ff5023        0x0 c:\gcc850\lib\libc.a(lib_a-strncpy.o)
 .data          0x03ff5023        0x0 c:\gcc850\lib\libc.a(lib_a-strtol.o)
 .data          0x03ff5023        0x0 c:\gcc850\lib\libc.a(lib_a-toupper.o)
 *fill*         0x03ff5023        0x1 00
 .data          0x03ff5024        0x8 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
                0x03ff5028                ___ctype_ptr__
                0x03ff5024                ___ctype_ptr
 .data          0x03ff502c      0x400 c:\gcc850\lib\libc.a(lib_a-impure.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_mulsi3.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_divsi3.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_udivsi3.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_modsi3.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_umodsi3.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_save_31c.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_addsub_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_mul_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_div_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_ne_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_gt_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_ge_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_lt_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_le_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_si_to_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_sf_to_si.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_save_26c.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_save_27c.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_save_28c.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_muldi3.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_clzsi2.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_pack_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_unpack_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
 .data          0x03ff542c        0x0 c:\gcc850\lib\libgcc.a(_clz.o)
 *(.gnu.linkonce.d*)
                0x03ff542c                . = ALIGN (0x4)
                0x03ff542c                __data_end = .
                0x00152048                PROVIDE (__datarom_end, __rodata_end)

.got
 *(.got.plt)
 *(.got)

.dynamic
 *(.dynamic)

.tdata          0x03ff542c        0x0
                0x03ff542c                PROVIDE (__ep, .)
 *(.tbyte)
 *(.tcommon_byte)
 *(.tdata)
 *(.tbss)
 *(.tcommon)

.sdata          0x03ff542c        0x4
                0x03ffd42c                PROVIDE (__gp, (. + 0x8000))
 *(.sdata)
 .sdata         0x03ff542c        0x4 c:\gcc850\lib\libc.a(lib_a-impure.o)
                0x03ff542c                __impure_ptr
                0x03ff5430                __sbss_start = .
 *(.sbss)
 *(.scommon)

.rosdata        0x03ff5430        0x4
 *(.rosdata)
 .rosdata       0x03ff5430        0x4 c:\gcc850\lib\libc.a(lib_a-impure.o)
                0x03ff5430                __global_impure_ptr
                0x03ff5430                _edata = DEFINED (__sbss_start)?__sbss_start:.
                0x03ff5430                PROVIDE (edata, _edata)

.bss            0x03ff5434     0x101c
                0x03ff5430                __bss_start = DEFINED (__sbss_start)?__sbss_start:.
 *(.dynbss)
 *(.bss)
 .bss           0x03ff5434        0x0 obj/startup.o
 .bss           0x03ff5434        0x0 obj/crt0.o
 .bss           0x03ff5434        0x2 obj/crt1.o
 *fill*         0x03ff5436        0x2 00
 .bss           0x03ff5438      0x168 obj/main.o
                0x03ff5534                _powerSamplePeriod
                0x03ff54c8                _pUART_ADuC4
                0x03ff547c                _prsProtocol_78
                0x03ff5470                _prsProtocol_12
                0x03ff5474                _prsProtocol_34
                0x03ff5538                _milliSec
                0x03ff549c                _pUART0
                0x03ff5488                _bluetoothProtocol
                0x03ff5564                _g_pGen2ChanGainOffset
                0x03ff5514                _remoteControl
                0x03ff5520                _timerP1
                0x03ff54fc                _timerP4
                0x03ff5458                _displaySetting
                0x03ff553c                _g_pGen1ChanGainOffset
                0x03ff5530                _adcNec
                0x03ff5464                _sauPcProtocol
                0x03ff543c                _pLogo
                0x03ff550c                _pwMeasureTimer
                0x03ff5598                _fp_m
                0x03ff5444                _pADuCstatus
                0x03ff5448                _pageMessages
                0x03ff5518                _spi2
                0x03ff54c0                _pUART_ADuC2
                0x03ff54cc                _pUART_ADuC5
                0x03ff54ac                _pUART_BLUE
                0x03ff5450                _pageInfo
                0x03ff54a4                _pUART2
                0x03ff54f4                _timerP2
                0x03ff546c                _VVProtocol
                0x03ff5510                _IRprotocol
                0x03ff54d4                _pUART_ADuC
                0x03ff5480                _genProtocol
                0x03ff5460                _prsChan
                0x03ff54a0                _pUART1
                0x03ff5498                _sau7000
                0x03ff5504                _wth
                0x03ff54a8                _pUART_PC
                0x03ff5468                _VinfProtocol
                0x03ff5590                _timeout
                0x03ff54b8                _pUART_ADuC0
                0x03ff54c4                _pUART_ADuC3
                0x03ff54f0                _pUART_ADuCupgrade
                0x03ff5490                _myKeyboard
                0x03ff5454                _pageADuCfrqCal
                0x03ff54d0                _pUART_ADuC6
                0x03ff558c                _stop_cpu
                0x03ff548c                _ADuCfwUpgradeProtocol
                0x03ff551c                _TMC262_driver
                0x03ff5508                _timerQ
                0x03ff5438                _pageMenu
                0x03ff5500                _pwmTimerP4
                0x03ff552c                _wtp
                0x03ff54b4                _pUART_EMG
                0x03ff5478                _prsProtocol_56
                0x03ff5524                _timerP3
                0x03ff545c                _weightChan
                0x03ff54b0                _pUART_BUBBLE
                0x03ff5440                _pMain
                0x03ff544c                _pageSwitchOff
                0x03ff5594                _msec_test
                0x03ff54f8                _pwmTimerP2
                0x03ff5494                _ADuCUpgradeMng
                0x03ff5484                _emgProtocol
                0x03ff54bc                _pUART_ADuC1
                0x03ff5528                _pwmTimerP1
 .bss           0x03ff55a0       0xf8 obj/IRQSG2.o
 .bss           0x03ff5698        0x2 obj/ERROR.o
 *fill*         0x03ff569a        0x2 00
 .bss           0x03ff569c       0x14 obj/ALLOC.o
 .bss           0x03ff56b0      0x3e8 obj/NEW.o
 .bss           0x03ff5a98        0x0 obj/STRCLASS.o
 .bss           0x03ff5a98        0x0 obj/PRINT.o
 .bss           0x03ff5a98        0x8 obj/SWTIM.o
                0x03ff5a98                _globalTimer
 .bss           0x03ff5aa0       0x32 obj/util.o
 .bss           0x03ff5ad2        0x0 obj/sioSG2.o
 *fill*         0x03ff5ad2        0x2 00
 .bss           0x03ff5ad4       0x30 obj/SOUND.o
 .bss           0x03ff5b04        0x0 obj/KEYABSTRACT.o
 .bss           0x03ff5b04        0x0 obj/KEYBOARD.o
 .bss           0x03ff5b04        0x0 obj/ADCABSTRACT.o
 .bss           0x03ff5b04        0x0 obj/ADC_NEC.o
 .bss           0x03ff5b04        0x0 obj/ADC_SAU7000.o
 .bss           0x03ff5b04        0x0 obj/UARTABSTRACT.o
 .bss           0x03ff5b04        0x0 obj/UARTNEC.o
 .bss           0x03ff5b04        0x4 obj/UARTFPGA.o
                0x03ff5b04                _cntTxTot
 .bss           0x03ff5b08        0x0 obj/PROTOCOLSTDUART.o
 .bss           0x03ff5b08        0x0 obj/PROTOCOLSAUANDPC.o
 .bss           0x03ff5b08        0x0 obj/PROTOCOL_uC.o
 .bss           0x03ff5b08        0x0 obj/PROTOCOLSAUANDEMGZ.o
 .bss           0x03ff5b08        0x0 obj/iWRAP_BLUEGIGA.o
 .bss           0x03ff5b08        0x0 obj/iWRAP_BLUEGIGA_SPP.o
 .bss           0x03ff5b08        0x8 obj/SAU7000_MANAGER.o
                0x03ff5b08                _fp
 .bss           0x03ff5b10      0x450 obj/DPYDRV.o
                0x03ff5b4c                _tp0_fc
                0x03ff5b50                _tp0_value
                0x03ff5b10                _textInfo
                0x03ff5b20                _graphInfo
 .bss           0x03ff5f60       0x30 obj/CHRSET.o
 .bss           0x03ff5f90       0x6c obj/GRAPH.o
                0x03ff5fa4                _linesettings
                0x03ff5fb8                _ac
                0x03ff5f90                _defaultpalette
                0x03ff5fb0                _fillsettings
 .bss           0x03ff5ffc       0x10 obj/APPMENU.o
                0x03ff6009                CMenuGeneralInfo::m_blinkCount
                0x03ff6004                CMenuGeneralInfo::m_drawnIco
                0x03ff6000                CMenuGeneralInfo::m_icoCOM
                0x03ff5ffc                CMenuGeneralInfo::m_refcnt
                0x03ff6008                CMenuGeneralInfo::m_icoBlink
 .bss           0x03ff600c        0x0 obj/ICONS.o
 .bss           0x03ff600c        0x0 obj/EEPROM_SPI.o
 .bss           0x03ff600c        0x0 obj/SAU7000_ADuC_SOURCE.o
 .bss           0x03ff600c        0x0 obj/PROTOCOLADuCfwUPGRADE.o
 .bss           0x03ff600c        0x0 obj/ADuC_UPGRADEMANAGER.o
 .bss           0x03ff600c        0x0 obj/TIMER_NEC.o
 .bss           0x03ff600c        0x0 obj/PWMABSTRACT.o
 .bss           0x03ff600c        0x0 obj/PWM_NEC.o
 .bss           0x03ff600c        0x0 obj/WTH.o
 .bss           0x03ff600c        0x0 obj/IR_Toshiba_protocol.o
 .bss           0x03ff600c        0x0 obj/IR_RC5_Standard_protocol.o
 .bss           0x03ff600c        0x0 obj/IR_remote.o
 .bss           0x03ff600c        0x0 obj/SPI_ABSTRACT.o
 .bss           0x03ff600c        0x0 obj/SPI_NEC.o
 .bss           0x03ff600c        0x0 obj/TMC262_DRV.o
 .bss           0x03ff600c        0x0 obj/WTP.o
 .bss           0x03ff600c      0x208 obj/SSPIE_HARDWARE.o
                0x03ff6014                _dataBuffer
                0x03ff600c                _a_uiCheckFailedRow
                0x03ff6010                _a_uiRowCount
 .bss           0x03ff6214       0xcc obj/SSPIE_CORE.o
                0x03ff62df                _currentChannel
                0x03ff6214                _algoBuffer
                0x03ff62dc                _stack
 .bss           0x03ff62e0      0x16c obj/SSPIE_INTRFACE.o
                0x03ff62f0                _dataSize
                0x03ff62f4                _dataIndex
                0x03ff642c                _d_requestNewData
                0x03ff62e0                _algoPtr
                0x03ff6428                _d_currentAddress
                0x03ff62e4                _algoSize
                0x03ff6320                _d_toc
                0x03ff6438                _d_CSU
                0x03ff6420                _d_tocNumber
                0x03ff62e8                _algoIndex
                0x03ff6424                _d_offset
                0x03ff6440                _d_SSPIDatautilVersion
                0x03ff6448                _c_frameCounter
                0x03ff6446                _c_frameSize
                0x03ff6444                _c_currentCounter
                0x03ff6430                _d_currentSize
                0x03ff62f8                _g_dataBufferArr
                0x03ff6422                _d_isDataInput
                0x03ff6442                _compression
                0x03ff6443                _c_compByte
                0x03ff62ec                _dataPtr
                0x03ff6434                _d_currentDataSetIndex
 .bss           0x03ff644c        0x0 obj/SSPIE_MAIN.o
 .bss           0x03ff644c        0x0 obj/SSPIE_SSPIEm.o
 .bss           0x03ff644c        0x4 obj/SSPIE_UTIL.o
 .bss           0x03ff6450        0x0 obj/ADuCSETTING.o
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-atoi.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-memcpy.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-strcat.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-strcmp.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-strcpy.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-strlen.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-strncpy.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-strtol.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-toupper.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libc.a(lib_a-impure.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_mulsi3.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_divsi3.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_udivsi3.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_modsi3.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_umodsi3.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_save_31c.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_addsub_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_mul_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_div_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_ne_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_gt_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_ge_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_lt_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_le_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_si_to_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_sf_to_si.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_save_26c.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_save_27c.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_save_28c.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_muldi3.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_clzsi2.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_pack_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_unpack_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
 .bss           0x03ff6450        0x0 c:\gcc850\lib\libgcc.a(_clz.o)
 *(COMMON)
                0x03ff6450                _end = .
                0x03ff6450                PROVIDE (end, .)
                0x03ff6450                . = ALIGN (0x4)
                0x03ff6450                __base_small_heap = .
                0x03ff6450                PROVIDE (_base_small_heap, .)

.stack          0x03ffb000     0x2000
                0x03ffb000                __end_small_heap = .
                0x03ffb000                PROVIDE (_end_small_heap, __end_small_heap)
                0x03ffb000                __stack = .
 *(.stack)
 .stack         0x03ffb000     0x2000 obj/startup.o
                0x03ffb000                __system_stack
                0x03ffd000                __end_stack = .
                0x03ffd000                PROVIDE (_end_stack, __end_stack)

.xdata          0x00180000        0x0
                0x00180000                __xdata_start = .
 *(.xdata)
                0x00180000                __xdata = .
                0x00180000                __xdata_end = .

.stab           0x00000000    0x925c8
 *(.stab)
 .stab          0x00000000      0x840 obj/crt1.o
 .stab          0x00000840     0x6804 obj/main.o
                               0x6810 (size before relaxing)
 .stab          0x00007044     0x3d80 obj/IRQSG2.o
                               0x3d8c (size before relaxing)
 .stab          0x0000adc4      0x87c obj/ERROR.o
                                0x888 (size before relaxing)
 .stab          0x0000b640      0xe4c obj/ALLOC.o
                                0xe58 (size before relaxing)
 .stab          0x0000c48c      0x9c0 obj/NEW.o
                                0x9cc (size before relaxing)
 .stab          0x0000ce4c     0x1158 obj/STRCLASS.o
                               0x1164 (size before relaxing)
 .stab          0x0000dfa4     0x16b0 obj/PRINT.o
                               0x16bc (size before relaxing)
 .stab          0x0000f654      0xb34 obj/SWTIM.o
                                0xb40 (size before relaxing)
 .stab          0x00010188     0x1920 obj/util.o
                               0x192c (size before relaxing)
 .stab          0x00011aa8     0x1e90 obj/sioSG2.o
                               0x1e9c (size before relaxing)
 .stab          0x00013938     0x1524 obj/SOUND.o
                               0x1530 (size before relaxing)
 .stab          0x00014e5c     0x1584 obj/KEYABSTRACT.o
                               0x1590 (size before relaxing)
 .stab          0x000163e0     0x22b0 obj/KEYBOARD.o
                               0x22bc (size before relaxing)
 .stab          0x00018690      0xa80 obj/ADCABSTRACT.o
                                0xa8c (size before relaxing)
 .stab          0x00019110     0x19f8 obj/ADC_NEC.o
                               0x1a04 (size before relaxing)
 .stab          0x0001ab08     0x41ac obj/ADC_SAU7000.o
                               0x41b8 (size before relaxing)
 .stab          0x0001ecb4     0x2acc obj/UARTABSTRACT.o
                               0x2ad8 (size before relaxing)
 .stab          0x00021780     0x12c0 obj/UARTNEC.o
                               0x12cc (size before relaxing)
 .stab          0x00022a40     0x15d8 obj/UARTFPGA.o
                               0x15e4 (size before relaxing)
 .stab          0x00024018     0x36e4 obj/PROTOCOLSTDUART.o
                               0x36f0 (size before relaxing)
 .stab          0x000276fc     0x6078 obj/PROTOCOLSAUANDPC.o
                               0x6084 (size before relaxing)
 .stab          0x0002d774     0x8808 obj/PROTOCOL_uC.o
                               0x8814 (size before relaxing)
 .stab          0x00035f7c     0x3b7c obj/PROTOCOLSAUANDEMGZ.o
                               0x3b88 (size before relaxing)
 .stab          0x00039af8     0x89c4 obj/iWRAP_BLUEGIGA.o
                               0x89d0 (size before relaxing)
 .stab          0x000424bc     0x4404 obj/iWRAP_BLUEGIGA_SPP.o
                               0x4410 (size before relaxing)
 .stab          0x000468c0     0xe5b0 obj/SAU7000_MANAGER.o
                               0xe5bc (size before relaxing)
 .stab          0x00054e70     0x49b0 obj/DPYDRV.o
                               0x49bc (size before relaxing)
 .stab          0x00059820      0xc78 obj/CHRSET.o
                                0xc84 (size before relaxing)
 .stab          0x0005a498     0x35a0 obj/GRAPH.o
                               0x35ac (size before relaxing)
 .stab          0x0005da38     0x5478 obj/APPMENU.o
                               0x5484 (size before relaxing)
 .stab          0x00062eb0      0x8b8 obj/ICONS.o
                                0x8c4 (size before relaxing)
 .stab          0x00063768      0xf6c obj/EEPROM_SPI.o
                                0xf78 (size before relaxing)
 .stab          0x000646d4      0x7d4 obj/SAU7000_ADuC_SOURCE.o
                                0x7e0 (size before relaxing)
 .stab          0x00064ea8     0x246c obj/PROTOCOLADuCfwUPGRADE.o
                               0x2478 (size before relaxing)
 .stab          0x00067314     0x1ae8 obj/ADuC_UPGRADEMANAGER.o
                               0x1af4 (size before relaxing)
 .stab          0x00068dfc     0x7098 obj/TIMER_NEC.o
                               0x70a4 (size before relaxing)
 .stab          0x0006fe94     0x11b8 obj/PWMABSTRACT.o
                               0x11c4 (size before relaxing)
 .stab          0x0007104c     0x3690 obj/PWM_NEC.o
                               0x369c (size before relaxing)
 .stab          0x000746dc     0x23dc obj/WTH.o
                               0x23e8 (size before relaxing)
 .stab          0x00076ab8     0x1f14 obj/IR_Toshiba_protocol.o
                               0x1f20 (size before relaxing)
 .stab          0x000789cc     0x2268 obj/IR_RC5_Standard_protocol.o
                               0x2274 (size before relaxing)
 .stab          0x0007ac34     0x2664 obj/IR_remote.o
                               0x2670 (size before relaxing)
 .stab          0x0007d298     0x12b4 obj/SPI_ABSTRACT.o
                               0x12c0 (size before relaxing)
 .stab          0x0007e54c     0x2394 obj/SPI_NEC.o
                               0x23a0 (size before relaxing)
 .stab          0x000808e0     0x20d0 obj/TMC262_DRV.o
                               0x20dc (size before relaxing)
 .stab          0x000829b0     0x2b98 obj/WTP.o
                               0x2ba4 (size before relaxing)
 .stab          0x00085548     0x1464 obj/SSPIE_HARDWARE.o
                               0x1470 (size before relaxing)
 .stab          0x000869ac     0x16d4 obj/SSPIE_CORE.o
                               0x16e0 (size before relaxing)
 .stab          0x00088080     0x1f8c obj/SSPIE_INTRFACE.o
                               0x1f98 (size before relaxing)
 .stab          0x0008a00c      0xb04 obj/SSPIE_MAIN.o
                                0xb10 (size before relaxing)
 .stab          0x0008ab10      0x2dc obj/SSPIE_SSPIEm.o
                                0x2e8 (size before relaxing)
 .stab          0x0008adec      0xd14 obj/SSPIE_UTIL.o
                                0xd20 (size before relaxing)
 .stab          0x0008bb00     0x1950 obj/ADuCSETTING.o
                               0x195c (size before relaxing)
 .stab          0x0008d450      0x45c c:\gcc850\lib\libc.a(lib_a-atoi.o)
                                0x468 (size before relaxing)
 .stab          0x0008d8ac      0x144 c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
                                0x150 (size before relaxing)
 .stab          0x0008d9f0      0x1b0 c:\gcc850\lib\libc.a(lib_a-memcpy.o)
                                0x1bc (size before relaxing)
 .stab          0x0008dba0      0x204 c:\gcc850\lib\libc.a(lib_a-strcat.o)
                                0x408 (size before relaxing)
 .stab          0x0008dda4      0x1e0 c:\gcc850\lib\libc.a(lib_a-strcmp.o)
                                0x408 (size before relaxing)
 .stab          0x0008df84      0x1bc c:\gcc850\lib\libc.a(lib_a-strcpy.o)
                                0x3e4 (size before relaxing)
 .stab          0x0008e140      0x1d4 c:\gcc850\lib\libc.a(lib_a-strlen.o)
                                0x3fc (size before relaxing)
 .stab          0x0008e314      0x270 c:\gcc850\lib\libc.a(lib_a-strncpy.o)
                                0x498 (size before relaxing)
 .stab          0x0008e584      0x5d0 c:\gcc850\lib\libc.a(lib_a-strtol.o)
                                0x828 (size before relaxing)
 .stab          0x0008eb54      0x144 c:\gcc850\lib\libc.a(lib_a-toupper.o)
                                0x150 (size before relaxing)
 .stab          0x0008ec98      0x114 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
                                0x120 (size before relaxing)
 .stab          0x0008edac      0x198 c:\gcc850\lib\libc.a(lib_a-impure.o)
                                0x3d8 (size before relaxing)
 .stab          0x0008ef44      0x36c c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
                                0x378 (size before relaxing)
 .stab          0x0008f2b0      0x864 c:\gcc850\lib\libgcc.a(_addsub_sf.o)
                                0x90c (size before relaxing)
 .stab          0x0008fb14      0x5a0 c:\gcc850\lib\libgcc.a(_mul_sf.o)
                                0x720 (size before relaxing)
 .stab          0x000900b4      0x4ec c:\gcc850\lib\libgcc.a(_div_sf.o)
                                0x66c (size before relaxing)
 .stab          0x000905a0      0x228 c:\gcc850\lib\libgcc.a(_ne_sf.o)
                                0x3a8 (size before relaxing)
 .stab          0x000907c8      0x228 c:\gcc850\lib\libgcc.a(_gt_sf.o)
                                0x3a8 (size before relaxing)
 .stab          0x000909f0      0x228 c:\gcc850\lib\libgcc.a(_ge_sf.o)
                                0x3a8 (size before relaxing)
 .stab          0x00090c18      0x228 c:\gcc850\lib\libgcc.a(_lt_sf.o)
                                0x3a8 (size before relaxing)
 .stab          0x00090e40      0x228 c:\gcc850\lib\libgcc.a(_le_sf.o)
                                0x3a8 (size before relaxing)
 .stab          0x00091068      0x2dc c:\gcc850\lib\libgcc.a(_si_to_sf.o)
                                0x45c (size before relaxing)
 .stab          0x00091344      0x288 c:\gcc850\lib\libgcc.a(_sf_to_si.o)
                                0x408 (size before relaxing)
 .stab          0x000915cc      0x120 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
                                0x2a0 (size before relaxing)
 .stab          0x000916ec      0x2c4 c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
                                0x444 (size before relaxing)
 .stab          0x000919b0      0x198 c:\gcc850\lib\libgcc.a(_clzsi2.o)
                                0x348 (size before relaxing)
 .stab          0x00091b48      0x360 c:\gcc850\lib\libgcc.a(_pack_sf.o)
                                0x4e0 (size before relaxing)
 .stab          0x00091ea8      0x354 c:\gcc850\lib\libgcc.a(_unpack_sf.o)
                                0x4d4 (size before relaxing)
 .stab          0x000921fc      0x294 c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
                                0x414 (size before relaxing)
 .stab          0x00092490      0x138 c:\gcc850\lib\libgcc.a(_clz.o)
                                0x2e8 (size before relaxing)

.stabstr        0x00000000    0xd95ca
 *(.stabstr)
 .stabstr       0x00000000    0xd95ca obj/crt1.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x00000000      0x5e8
 *(.comment)
 .comment       0x00000000       0x12 obj/crt1.o
 .comment       0x00000012       0x12 obj/main.o
 .comment       0x00000024       0x12 obj/IRQSG2.o
 .comment       0x00000036       0x12 obj/ERROR.o
 .comment       0x00000048       0x12 obj/ALLOC.o
 .comment       0x0000005a       0x12 obj/NEW.o
 .comment       0x0000006c       0x12 obj/STRCLASS.o
 .comment       0x0000007e       0x12 obj/PRINT.o
 .comment       0x00000090       0x12 obj/SWTIM.o
 .comment       0x000000a2       0x12 obj/util.o
 .comment       0x000000b4       0x12 obj/sioSG2.o
 .comment       0x000000c6       0x12 obj/SOUND.o
 .comment       0x000000d8       0x12 obj/KEYABSTRACT.o
 .comment       0x000000ea       0x12 obj/KEYBOARD.o
 .comment       0x000000fc       0x12 obj/ADCABSTRACT.o
 .comment       0x0000010e       0x12 obj/ADC_NEC.o
 .comment       0x00000120       0x12 obj/ADC_SAU7000.o
 .comment       0x00000132       0x12 obj/UARTABSTRACT.o
 .comment       0x00000144       0x12 obj/UARTNEC.o
 .comment       0x00000156       0x12 obj/UARTFPGA.o
 .comment       0x00000168       0x12 obj/PROTOCOLSTDUART.o
 .comment       0x0000017a       0x12 obj/PROTOCOLSAUANDPC.o
 .comment       0x0000018c       0x12 obj/PROTOCOL_uC.o
 .comment       0x0000019e       0x12 obj/PROTOCOLSAUANDEMGZ.o
 .comment       0x000001b0       0x12 obj/iWRAP_BLUEGIGA.o
 .comment       0x000001c2       0x12 obj/iWRAP_BLUEGIGA_SPP.o
 .comment       0x000001d4       0x12 obj/SAU7000_MANAGER.o
 .comment       0x000001e6       0x12 obj/DPYDRV.o
 .comment       0x000001f8       0x12 obj/CHRSET.o
 .comment       0x0000020a       0x12 obj/GRAPH.o
 .comment       0x0000021c       0x12 obj/APPMENU.o
 .comment       0x0000022e       0x12 obj/ICONS.o
 .comment       0x00000240       0x12 obj/EEPROM_SPI.o
 .comment       0x00000252       0x12 obj/SAU7000_ADuC_SOURCE.o
 .comment       0x00000264       0x12 obj/PROTOCOLADuCfwUPGRADE.o
 .comment       0x00000276       0x12 obj/ADuC_UPGRADEMANAGER.o
 .comment       0x00000288       0x12 obj/TIMER_NEC.o
 .comment       0x0000029a       0x12 obj/PWMABSTRACT.o
 .comment       0x000002ac       0x12 obj/PWM_NEC.o
 .comment       0x000002be       0x12 obj/WTH.o
 .comment       0x000002d0       0x12 obj/IR_Toshiba_protocol.o
 .comment       0x000002e2       0x12 obj/IR_RC5_Standard_protocol.o
 .comment       0x000002f4       0x12 obj/IR_remote.o
 .comment       0x00000306       0x12 obj/SPI_ABSTRACT.o
 .comment       0x00000318       0x12 obj/SPI_NEC.o
 .comment       0x0000032a       0x12 obj/TMC262_DRV.o
 .comment       0x0000033c       0x12 obj/WTP.o
 .comment       0x0000034e       0x12 obj/SSPIE_HARDWARE.o
 .comment       0x00000360       0x12 obj/SSPIE_CORE.o
 .comment       0x00000372       0x12 obj/SSPIE_INTRFACE.o
 .comment       0x00000384       0x12 obj/SSPIE_MAIN.o
 .comment       0x00000396       0x12 obj/SSPIE_SSPIEm.o
 .comment       0x000003a8       0x12 obj/SSPIE_UTIL.o
 .comment       0x000003ba       0x12 obj/ADuCSETTING.o
 .comment       0x000003cc       0x12 c:\gcc850\lib\libc.a(lib_a-atoi.o)
 .comment       0x000003de       0x12 c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
 .comment       0x000003f0       0x12 c:\gcc850\lib\libc.a(lib_a-memcpy.o)
 .comment       0x00000402       0x12 c:\gcc850\lib\libc.a(lib_a-strcat.o)
 .comment       0x00000414       0x12 c:\gcc850\lib\libc.a(lib_a-strcmp.o)
 .comment       0x00000426       0x12 c:\gcc850\lib\libc.a(lib_a-strcpy.o)
 .comment       0x00000438       0x12 c:\gcc850\lib\libc.a(lib_a-strlen.o)
 .comment       0x0000044a       0x12 c:\gcc850\lib\libc.a(lib_a-strncpy.o)
 .comment       0x0000045c       0x12 c:\gcc850\lib\libc.a(lib_a-strtol.o)
 .comment       0x0000046e       0x12 c:\gcc850\lib\libc.a(lib_a-toupper.o)
 .comment       0x00000480       0x12 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
 .comment       0x00000492       0x12 c:\gcc850\lib\libc.a(lib_a-impure.o)
 .comment       0x000004a4       0x12 c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
 .comment       0x000004b6       0x12 c:\gcc850\lib\libgcc.a(_addsub_sf.o)
 .comment       0x000004c8       0x12 c:\gcc850\lib\libgcc.a(_mul_sf.o)
 .comment       0x000004da       0x12 c:\gcc850\lib\libgcc.a(_div_sf.o)
 .comment       0x000004ec       0x12 c:\gcc850\lib\libgcc.a(_ne_sf.o)
 .comment       0x000004fe       0x12 c:\gcc850\lib\libgcc.a(_gt_sf.o)
 .comment       0x00000510       0x12 c:\gcc850\lib\libgcc.a(_ge_sf.o)
 .comment       0x00000522       0x12 c:\gcc850\lib\libgcc.a(_lt_sf.o)
 .comment       0x00000534       0x12 c:\gcc850\lib\libgcc.a(_le_sf.o)
 .comment       0x00000546       0x12 c:\gcc850\lib\libgcc.a(_si_to_sf.o)
 .comment       0x00000558       0x12 c:\gcc850\lib\libgcc.a(_sf_to_si.o)
 .comment       0x0000056a       0x12 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
 .comment       0x0000057c       0x12 c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
 .comment       0x0000058e       0x12 c:\gcc850\lib\libgcc.a(_clzsi2.o)
 .comment       0x000005a0       0x12 c:\gcc850\lib\libgcc.a(_pack_sf.o)
 .comment       0x000005b2       0x12 c:\gcc850\lib\libgcc.a(_unpack_sf.o)
 .comment       0x000005c4       0x12 c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
 .comment       0x000005d6       0x12 c:\gcc850\lib\libgcc.a(_clz.o)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.zdata
 *(.zdata)
 *(.zbss)
 *(reszdata)
 *(.zcommon)

.rozdata
 *(.rozdata)
 *(romzdata)
 *(romzbss)
LOAD obj/crt0.o
LOAD obj/crt1.o
LOAD obj/main.o
LOAD obj/IRQSG2.o
LOAD obj/ERROR.o
LOAD obj/ALLOC.o
LOAD obj/NEW.o
LOAD obj/STRCLASS.o
LOAD obj/PRINT.o
LOAD obj/SWTIM.o
LOAD obj/util.o
LOAD obj/sioSG2.o
LOAD obj/SOUND.o
LOAD obj/KEYABSTRACT.o
LOAD obj/KEYBOARD.o
LOAD obj/ADCABSTRACT.o
LOAD obj/ADC_NEC.o
LOAD obj/ADC_SAU7000.o
LOAD obj/UARTABSTRACT.o
LOAD obj/UARTNEC.o
LOAD obj/UARTFPGA.o
LOAD obj/PROTOCOLSTDUART.o
LOAD obj/PROTOCOLSAUANDPC.o
LOAD obj/PROTOCOL_uC.o
LOAD obj/PROTOCOLSAUANDEMGZ.o
LOAD obj/iWRAP_BLUEGIGA.o
LOAD obj/iWRAP_BLUEGIGA_SPP.o
LOAD obj/SAU7000_MANAGER.o
LOAD obj/DPYDRV.o
LOAD obj/CHRSET.o
LOAD obj/GRAPH.o
LOAD obj/APPMENU.o
LOAD obj/ICONS.o
LOAD obj/EEPROM_SPI.o
LOAD obj/SAU7000_ADuC_SOURCE.o
LOAD obj/PROTOCOLADuCfwUPGRADE.o
LOAD obj/ADuC_UPGRADEMANAGER.o
LOAD obj/TIMER_NEC.o
LOAD obj/PWMABSTRACT.o
LOAD obj/PWM_NEC.o
LOAD obj/WTH.o
LOAD obj/IR_Toshiba_protocol.o
LOAD obj/IR_RC5_Standard_protocol.o
LOAD obj/IR_remote.o
LOAD obj/SPI_ABSTRACT.o
LOAD obj/SPI_NEC.o
LOAD obj/TMC262_DRV.o
LOAD obj/WTP.o
LOAD obj/SSPIE_HARDWARE.o
LOAD obj/SSPIE_CORE.o
LOAD obj/SSPIE_INTRFACE.o
LOAD obj/SSPIE_MAIN.o
LOAD obj/SSPIE_SSPIEm.o
LOAD obj/SSPIE_UTIL.o
LOAD obj/ADuCSETTING.o
LOAD c:\gcc850\lib\libm.a
LOAD c:\gcc850\lib\libc.a
LOAD c:\gcc850\lib\libgcc.a
OUTPUT(SAU7000.OUT elf32-v850)
