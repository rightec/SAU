Archive member included because of file (symbol)

c:\gcc850\lib\libc.a(lib_a-atoi.o)
                              obj/util.o (_atoi)
c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
                              obj/PRINT.o (_isxdigit)
c:\gcc850\lib\libc.a(lib_a-memcpy.o)
                              obj/util.o (_memcpy)
c:\gcc850\lib\libc.a(lib_a-strcat.o)
                              obj/iWRAP_BLUEGIGA.o (_strcat)
c:\gcc850\lib\libc.a(lib_a-strcmp.o)
                              obj/STRCLASS.o (_strcmp)
c:\gcc850\lib\libc.a(lib_a-strcpy.o)
                              obj/STRCLASS.o (_strcpy)
c:\gcc850\lib\libc.a(lib_a-strlen.o)
                              obj/STRCLASS.o (_strlen)
c:\gcc850\lib\libc.a(lib_a-strncpy.o)
                              obj/iWRAP_BLUEGIGA_SPP.o (_strncpy)
c:\gcc850\lib\libc.a(lib_a-strtol.o)
                              c:\gcc850\lib\libc.a(lib_a-atoi.o) (__strtol_r)
c:\gcc850\lib\libc.a(lib_a-toupper.o)
                              obj/PRINT.o (_toupper)
c:\gcc850\lib\libc.a(lib_a-ctype_.o)
                              c:\gcc850\lib\libc.a(lib_a-isxdigit.o) (___ctype_ptr__)
c:\gcc850\lib\libc.a(lib_a-impure.o)
                              c:\gcc850\lib\libc.a(lib_a-strtol.o) (__impure_ptr)
c:\gcc850\lib\libgcc.a(_mulsi3.o)
                              obj/PRINT.o (___mulsi3)
c:\gcc850\lib\libgcc.a(_divsi3.o)
                              obj/util.o (___divsi3)
c:\gcc850\lib\libgcc.a(_udivsi3.o)
                              obj/main.o (___udivsi3)
c:\gcc850\lib\libgcc.a(_modsi3.o)
                              obj/PRINT.o (___modsi3)
c:\gcc850\lib\libgcc.a(_umodsi3.o)
                              obj/main.o (___umodsi3)
c:\gcc850\lib\libgcc.a(_save_31c.o)
                              c:\gcc850\lib\libc.a(lib_a-atoi.o) (__save_r31)
c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
                              obj/SOUND.o (___fixunssfsi)
c:\gcc850\lib\libgcc.a(_addsub_sf.o)
                              obj/SOUND.o (___subsf3)
c:\gcc850\lib\libgcc.a(_mul_sf.o)
                              obj/main.o (___mulsf3)
c:\gcc850\lib\libgcc.a(_div_sf.o)
                              obj/PRINT.o (___divsf3)
c:\gcc850\lib\libgcc.a(_ne_sf.o)
                              obj/util.o (___nesf2)
c:\gcc850\lib\libgcc.a(_gt_sf.o)
                              obj/PROTOCOL_uC.o (___gtsf2)
c:\gcc850\lib\libgcc.a(_ge_sf.o)
                              obj/PROTOCOL_uC.o (___gesf2)
c:\gcc850\lib\libgcc.a(_lt_sf.o)
                              obj/PROTOCOL_uC.o (___ltsf2)
c:\gcc850\lib\libgcc.a(_le_sf.o)
                              obj/TIMER_NEC.o (___lesf2)
c:\gcc850\lib\libgcc.a(_si_to_sf.o)
                              obj/main.o (___floatsisf)
c:\gcc850\lib\libgcc.a(_sf_to_si.o)
                              obj/PRINT.o (___fixsfsi)
c:\gcc850\lib\libgcc.a(_thenan_sf.o)
                              c:\gcc850\lib\libgcc.a(_addsub_sf.o) (___thenan_sf)
c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
                              obj/SWTIM.o (___floatunsisf)
c:\gcc850\lib\libgcc.a(_save_26c.o)
                              c:\gcc850\lib\libgcc.a(_addsub_sf.o) (__save_r26_r31)
c:\gcc850\lib\libgcc.a(_save_27c.o)
                              c:\gcc850\lib\libgcc.a(_mul_sf.o) (__save_r27_r31)
c:\gcc850\lib\libgcc.a(_save_28c.o)
                              c:\gcc850\lib\libgcc.a(_fixunssfsi.o) (__save_r28_r31)
c:\gcc850\lib\libgcc.a(_muldi3.o)
                              c:\gcc850\lib\libgcc.a(_mul_sf.o) (___muldi3)
c:\gcc850\lib\libgcc.a(_clzsi2.o)
                              c:\gcc850\lib\libgcc.a(_si_to_sf.o) (___clzsi2)
c:\gcc850\lib\libgcc.a(_pack_sf.o)
                              c:\gcc850\lib\libgcc.a(_addsub_sf.o) (___pack_f)
c:\gcc850\lib\libgcc.a(_unpack_sf.o)
                              c:\gcc850\lib\libgcc.a(_addsub_sf.o) (___unpack_f)
c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
                              c:\gcc850\lib\libgcc.a(_ne_sf.o) (___fpcmp_parts_f)
c:\gcc850\lib\libgcc.a(_clz.o)
                              c:\gcc850\lib\libgcc.a(_clzsi2.o) (___clz_tab)

Discarded input sections

 .gnu.linkonce.t._ZN16KeyboardAbstract13getKeysNumberEv
                0x00000000        0x0 obj/KEYBOARD.o
 .gnu.linkonce.t._ZN11AdcAbstract8setPowerEb
                0x00000000        0x0 obj/ADC_NEC.o
 .gnu.linkonce.t._ZN11AdcAbstract9isPoweredEv
                0x00000000        0x0 obj/ADC_NEC.o
 .gnu.linkonce.t._ZN11AdcAbstract9setEnableEb
                0x00000000        0x0 obj/ADC_NEC.o
 .gnu.linkonce.t._ZN11AdcAbstract8isEnableEv
                0x00000000        0x0 obj/ADC_NEC.o
 .gnu.linkonce.r._ZTV11AdcAbstract
                0x00000000        0x0 obj/ADC_NEC.o
 .gnu.linkonce.t._ZN7Adc_NEC9isPoweredEv
                0x00000000        0x0 obj/ADC_SAU7000.o
 .gnu.linkonce.t._ZN7Adc_NEC8isEnableEv
                0x00000000        0x0 obj/ADC_SAU7000.o
 .gnu.linkonce.t._ZN18UartDeviceAbstract6TurnOnEv
                0x00000000        0x0 obj/UARTNEC.o
 .gnu.linkonce.t._ZN18UartDeviceAbstract7TurnOffEv
                0x00000000        0x0 obj/UARTNEC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/PROTOCOLSAUANDPC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/PROTOCOLSAUANDPC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x00000000        0x0 obj/PROTOCOL_uC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/PROTOCOL_uC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/PROTOCOL_uC.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/PROTOCOLSAUANDEMGZ.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/PROTOCOLSAUANDEMGZ.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction6getMsgEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction6getMsgEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA_SPP.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA_SPP.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/iWRAP_BLUEGIGA_SPP.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x00000000        0x0 obj/PROTOCOLADuCfwUPGRADE.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00000000        0x0 obj/PROTOCOLADuCfwUPGRADE.o
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x00000000        0x0 obj/PROTOCOLADuCfwUPGRADE.o
 .gnu.linkonce.t._ZN11pwmAbstract9getPwmFrqEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract12getPwmPeriodEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract13getPwmTonDutyEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract14getPwmToffDutyEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract9setEnableEb
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract9isEnabledEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract19pulseCountIsEnabledEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract20pulseCountingIsEndedEv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract21setPulseCountingEndedEb
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN11pwmAbstract22pulseCountingEnded_ISREv
                0x00000000        0x0 obj/PWM_NEC.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract7managerEv
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract11pop_IR_DataERNS_9IR_data_tE
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract11isDataEmpryEv
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract8setStateENS_18IR_decondingStatesE
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract17getDecodingStatusEv
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN19IR_protocolAbstract25getPreviousDecodingStatusEv
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.r._ZTV19IR_protocolAbstract
                0x00000000        0x0 obj/IR_RC5_Standard_protocol.o
 .gnu.linkonce.t._ZN11KeyAbstract9setEnableEbi
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract11getReadTimeEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract11setReadTimeEi
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract8isEnableEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract13setBeepEnableEb
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract12beepIsEnableEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract21setCountinuousReadingEbi
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract25continuousReadingIsEnableEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract21continuousReadingTimeEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract12setKeyNumberEi
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract9keyNumberEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract8keyStateEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract11setKeyStateENS_9keyStatesE
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract3popERNS_16keyReadingValuesE
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract4pushENS_16keyReadingValuesE
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract5clearEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN11KeyAbstract7managerEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN16KeyboardAbstract13getKeysNumberEv
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.r._ZTV11KeyAbstract
                0x00000000        0x0 obj/IR_remote.o
 .gnu.linkonce.t._ZN12SPI_Abstract4putcEt
                0x00000000        0x0 obj/SPI_NEC.o
 .gnu.linkonce.t._ZN12SPI_Abstract4getcEt
                0x00000000        0x0 obj/SPI_NEC.o
 .gnu.linkonce.t._ZN12SPI_Abstract4busyEv
                0x00000000        0x0 obj/SPI_NEC.o
 .gnu.linkonce.t._ZN13MotorAbstract7managerEv
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract11setVelocityEdb
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract11getVelocityEv
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract9setEnableEb
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract8isEnableEv
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract8isMovingEv
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract5powerEb
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.t._ZN13MotorAbstract9isPoweredEv
                0x00000000        0x0 obj/WTP.o
 .gnu.linkonce.r._ZTV13MotorAbstract
                0x00000000        0x0 obj/WTP.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00007000         0x00038fff
rodata           0x00040000         0x00007fff
message          0x00048000         0x0005ffff
data             0x03ff3000         0x00005fff
stack            0x03ffcfe0         0x00002000
xdata            0x00100000         0x0000ffff
*default*        0x00000000         0xffffffff
ramcode          0x00000000         0xffffffff
tdata            0x00000000         0xffffffff
rosdata          0x00000000         0xffffffff
sdata            0x00000000         0xffffffff
disk             0x00000000         0xffffffff

Linker script and memory map

LOAD obj/startup.o

.init
 *(.init)

.plt
 *(.plt)

.text           0x00007000    0x345d2
                0x00007000                __stext = .
                0x00007000                __ctbp = .
 *(.call_table_data)
                0x00007000                . = ALIGN (0x10)
 *(.text)
 .text          0x00007000      0x7f4 obj/startup.o
                0x00007720                __return_interrupt
                0x000077e8                _cpu_initial
                0x00007000                _irqJump
                0x00007790                __restore_all_interrupt
                0x00007738                __save_all_interrupt
                0x00007700                __save_interrupt
 .text          0x000077f4       0x94 obj/crt0.o
                0x000077f4                _start
 .text          0x00007888       0x56 obj/crt1.o
                0x00007888                ___main
 .text          0x000078de     0x321c obj/main.o
                0x000090ea                UartProcol_init()
                0x000078de                __wait(int)
                0x00008dd0                wtp_Init()
                0x0000a57c                hwsw_init()
                0x00007c6e                fpga_pin_init()
                0x0000794c                FlashLed()
                0x0000a32a                wth_Init()
                0x00008302                GrCpuMemTest(unsigned short*, unsigned short*)
                0x00007918                breakpoint()
                0x00008fbc                page_init()
                0x00009a2e                HwChannels_init()
                0x00007cb6                clearAllBuffers()
                0x00008636                IR_remoteInit()
                0x00007a06                pin_init()
                0x0000a010                fpga_config()
                0x00007d44                _irq_INTUA0R_INTCB4R
                0x0000991a                KeyboardInit()
                0x0000821c                Asciihex_to_num(char*)
                0x000083ea                adc_uC_init()
                0x0000824a                Num_to_Asciihex(unsigned short, char*)
                0x00007e38                _irq_INTUA0T_INTCB4T
                0x0000a880                _main
 .text          0x0000aafa      0xa84 obj/IRQSG2.o
                0x0000b28a                _irq_INTCB1R
                0x0000aafa                _irq_init
                0x0000b164                _irq_INTTP4CC1
                0x0000b1b8                _irq_INTTP5CC0
                0x0000ad5a                _irq_INTP2
                0x0000adaa                _irq_INTP4
                0x0000b0bc                _irq_INTTP3CC0
                0x0000afc0                _irq_INTTP1CC0
                0x0000af6c                _irq_INTTP0CC1
                0x0000ac1a                _irq_RESET
                0x0000aeee                _irq_INTTQ0CC3
                0x0000ab94                _irq_resetVect
                0x0000ad32                _irq_INTP1
                0x0000b4d6                _irq_INTDMA3
                0x0000acba                _irq_ILGOP_TRAPDB
                0x0000b308                _irq_INTCB2T
                0x0000b554                _irq_INTWT
                0x0000b236                _irq_INTCB0R_INTIIC1
                0x0000b4ac                _irq_INTDMA2
                0x0000af42                _irq_INTTP0CC0
                0x0000b03e                _irq_INTTP2CC0
                0x0000b13a                _irq_INTTP4CC0
                0x0000ace2                _irq_INTLVI
                0x0000b18e                _irq_INTTP5OV
                0x0000b092                _irq_INTTP3OV
                0x0000b458                _irq_INTDMA0
                0x0000b42e                _irq_INTAD
                0x0000b1e2                _irq_INTTP5CC1
                0x0000adfa                _irq_INTP6
                0x0000ad82                _irq_INTP3
                0x0000ac42                _irq_NMI
                0x0000b260                _irq_INTCB0T
                0x0000ae4a                _irq_INTTQ0OV
                0x0000afea                _irq_INTTP1CC1
                0x0000b35c                _irq_INTCB3T
                0x0000b404                _irq_INTUA2T
                0x0000b2de                _irq_INTCB2R
                0x0000ab3c                _irq_setVect
                0x0000b500                _irq_INTKR
                0x0000b20c                _irq_INTTM0EQ0
                0x0000ad0a                _irq_INTP0
                0x0000ae9a                _irq_INTTQ0CC1
                0x0000b2b4                _irq_INTCB1T
                0x0000abcc                _irq_chkErrors
                0x0000b3da                _irq_INTUA2R_INTIIC0
                0x0000b068                _irq_INTTP2CC1
                0x0000b332                _irq_INTCB3R
                0x0000add2                _irq_INTP5
                0x0000b0e6                _irq_INTTP3CC1
                0x0000ae22                _irq_INTP7
                0x0000ac6a                _irq_TRAP0
                0x0000b52a                _irq_INTWTI
                0x0000af96                _irq_INTTP1OV
                0x0000b110                _irq_INTTP4OV
                0x0000ac92                _irq_TRAP1
                0x0000b3b0                _irq_INTUA1T
                0x0000aec4                _irq_INTTQ0CC2
                0x0000b014                _irq_INTTP2OV
                0x0000b386                _irq_INTUA1R_INTIIC2
                0x0000af18                _irq_INTTP0OV
                0x0000b482                _irq_INTDMA1
                0x0000ae72                _irq_INTTQ0CC0
 .text          0x0000b57e       0x1e obj/ERROR.o
                0x0000b588                _error_trace
                0x0000b57e                _error_init
 .text          0x0000b59c      0x282 obj/ALLOC.o
                0x0000b59c                _mem_init
                0x0000b64a                _mem_alloc
                0x0000b60c                _mem_count
                0x0000b626                _mem_left
                0x0000b74a                _mem_free
 .text          0x0000b81e       0xa0 obj/NEW.o
                0x0000b840                operator delete(void*)
                0x0000b862                operator new[](unsigned int)
                0x0000b890                operator new(unsigned int)
                0x0000b81e                operator delete[](void*)
 .text          0x0000b8be      0x3e4 obj/STRCLASS.o
                0x0000bb80                String::String(char const*)
                0x0000b8be                String::String()
                0x0000b8e0                String::String()
                0x0000b902                String::operator=(char const*)
                0x0000b9aa                String::init(char*)
                0x0000ba4a                String::String(String const&)
                0x0000bbf2                String::operator=(String const&)
                0x0000baac                String::String(String const&)
                0x0000bb0e                String::String(char const*)
 .text          0x0000bca2      0xaf6 obj/PRINT.o
                0x0000c76e                _sprintf
                0x0000c11a                _vsprintf
                0x0000bfe8                _abort
                0x0000bfea                __strtoul
 .text          0x0000c798      0x10c obj/SWTIM.o
                0x0000c798                Timer::Timer()
                0x0000c7a2                Timer::Timer()
                0x0000c802                IncTimer::getMsec()
                0x0000c7ac                IncTimer::getTime()
                0x0000c83a                DecTimer::Match()
 .text          0x0000c8a4      0x71c obj/util.o
                0x0000c8c4                strset(char*, int)
                0x0000c8dc                HexToInt(int&, char*, int)
                0x0000cae0                skipWhites(unsigned char*)
                0x0000cbd4                addstr(char*, char const*)
                0x0000cb7a                fsumstr(char*, char*, int, int, int)
                0x0000ca5e                ltrim(char*)
                0x0000ca5a                matherr(exception*)
                0x0000ce24                cdaten(char*)
                0x0000cb50                sumstr(char*, char*, int, int)
                0x0000cdca                cdate(char*)
                0x0000cd7c                chgext(char*, char*)
                0x0000caa6                rtrim(char*)
                0x0000c9e4                windowFilter(short*, short*, int, int, int)
                0x0000cb0e                packWhites(unsigned char*)
                0x0000cc04                fmtReal(long, int, int)
                0x0000c8a4                my_pow10(short)
                0x0000ccfc                pperc(char*, double, double)
                0x0000cec8                IntToHex(int, char*, int)
 .text          0x0000cfc0      0x77a obj/sioSG2.o
                0x0000d332                _sio_getc_ch1
                0x0000d1fa                _sio_disable_rx_interrupt_ch1
                0x0000d24a                _sio_disable_tx_interrupt_ch1
                0x0000d1dc                _sio_enable_rx_interrupt_ch2
                0x0000d3c6                _sio_clocksel_ch2
                0x0000d22c                _sio_enable_tx_interrupt_ch2
                0x0000d57e                _sio_fill_ch3
                0x0000d222                _sio_enable_tx_interrupt_ch1
                0x0000d026                _sio_init_ch1
                0x0000d240                _sio_disable_tx_interrupt_ch0
                0x0000d6e6                _sio_getw_ch3
                0x0000d524                _sio_xfr_ch3
                0x0000d1f0                _sio_disable_rx_interrupt_ch0
                0x0000d448                _sio_xfr_ch2
                0x0000d4ea                _sio_getc_ch3
                0x0000d2b0                _sio_getc_ch0
                0x0000d300                _sio_putc_ch1
                0x0000d20e                _sio_disable_rx_interrupt_ch3
                0x0000d1e6                _sio_enable_rx_interrupt_ch3
                0x0000d1c8                _sio_enable_rx_interrupt_ch0
                0x0000d25e                _sio_disable_tx_interrupt_ch3
                0x0000d40e                _sio_getc_ch2
                0x0000d254                _sio_disable_tx_interrupt_ch2
                0x0000d4de                _sio_busy_ch3
                0x0000d236                _sio_enable_tx_interrupt_ch3
                0x0000d27e                _sio_putc_ch0
                0x0000d402                _sio_busy_ch2
                0x0000d63c                _sio_read_ch3
                0x0000d2ea                _sio_clocksel_ch1
                0x0000d268                _sio_clocksel_ch0
                0x0000d5da                _sio_write_ch3
                0x0000d326                _sio_busy_ch1
                0x0000d6a0                _sio_putw_ch3
                0x0000d4b8                _sio_putc_ch3
                0x0000d0f2                _sio_init_ch2
                0x0000d2a4                _sio_busy_ch0
                0x0000d1d2                _sio_enable_rx_interrupt_ch1
                0x0000cfc0                _sio_init_ch0
                0x0000d218                _sio_enable_tx_interrupt_ch0
                0x0000d204                _sio_disable_rx_interrupt_ch2
                0x0000d4a2                _sio_clocksel_ch3
                0x0000d36c                _sio_xfr_ch1
                0x0000d14e                _sio_init_ch3
                0x0000d3dc                _sio_putc_ch2
 .text          0x0000d73a      0x554 obj/SOUND.o
                0x0000d944                _goBuzzer
                0x0000d778                _shutBuzzer
                0x0000d764                _buzzer_isPlaying
                0x0000d73a                buzzer_stop()
                0x0000d80e                buzzer_start()
                0x0000d9e2                _buzzer_init
                0x0000d890                _goBuzzerTimes
                0x0000db54                _buzzerManager
                0x0000d78e                setPWM(unsigned short, unsigned char)
                0x0000d76e                _buzzerSound
 .text          0x0000dc8e      0x452 obj/KEYABSTRACT.o
                0x0000e066                KeyboardAbstract::popKey(int, KeyAbstract::keyReadingValues&)
                0x0000ddec                KeyboardAbstract::setEnable(int, bool, int)
                0x0000deec                KeyboardAbstract::setBeepEnable(int, bool)
                0x0000df9c                KeyboardAbstract::push(int)
                0x0000ddac                KeyboardAbstract::isEnable(int)
                0x0000dcda                KeyboardAbstract::~KeyboardAbstract()
                0x0000e0a8                KeyboardAbstract::clearKey(int)
                0x0000dd36                KeyboardAbstract::setKeyName(int, int)
                0x0000dce8                KeyboardAbstract::~KeyboardAbstract()
                0x0000df2a                KeyboardAbstract::clear()
                0x0000deac                KeyboardAbstract::beepIsEnable(int)
                0x0000dc8e                KeyboardAbstract::KeyboardAbstract(int)
                0x0000e026                KeyboardAbstract::keyState(int)
                0x0000de2c                KeyboardAbstract::continuousReadingIsEnable(int)
                0x0000dcf6                KeyboardAbstract::pop(int&)
                0x0000dcb4                KeyboardAbstract::KeyboardAbstract(int)
                0x0000de6c                KeyboardAbstract::setCountinuousReading(int, bool, int)
                0x0000dd70                KeyboardAbstract::keyName(int)
 .text          0x0000e0e0      0x90e obj/KEYBOARD.o
                0x0000e892                Key::manager()
                0x0000e6c6                Keyboard::Keyboard(int)
                0x0000e39e                Key::pinValue()
                0x0000e61e                Keyboard::~Keyboard()
                0x0000e0e0                Key::~Key()
                0x0000e576                Keyboard::~Keyboard()
                0x0000e0fc                Key::setEnable(bool, int)
                0x0000e2e6                Key::pop(KeyAbstract::keyReadingValues&)
                0x0000e424                Keyboard::manager()
                0x0000e322                Key::push(KeyAbstract::keyReadingValues)
                0x0000e2d6                Key::setCountinuousReading(bool, int)
                0x0000e12e                Key::Key(unsigned char volatile*, unsigned char, kindOfKey)
                0x0000e7ac                Keyboard::Keyboard(int)
                0x0000e3be                Keyboard::setKeyPin(int, unsigned char volatile*, unsigned char)
                0x0000e202                Key::Key(unsigned char volatile*, unsigned char, kindOfKey)
                0x0000e0ee                Key::~Key()
 .text          0x0000e9ee       0x28 obj/ADCABSTRACT.o
                0x0000e9ee                AdcSpiAbstract::AdcSpiAbstract(SPI_Abstract*)
                0x0000ea02                AdcSpiAbstract::AdcSpiAbstract(SPI_Abstract*)
 .text          0x0000ea16      0x844 obj/ADC_NEC.o
                0x0000f17c                Adc_NEC::Adc_NEC(adc_nec_t volatile*, adcConv_nec_t volatile*, adc_nec_interrupt_t volatile*)
                0x0000ed3c                Adc_NEC::setConversionSpeed(Adc_NEC::ConversionSpeed, bool)
                0x0000ef1c                Adc_NEC::setInputChannel(Adc_NEC::AnalogInput, bool)
                0x0000ec00                Adc_NEC::setTriggerModeSpecification(Adc_NEC::TriggerModeSpec, bool)
                0x0000ea16                Adc_NEC::setPower(bool)
                0x0000f208                Adc_NEC::setADIC_interrupt(bool, unsigned char)
                0x0000f0f0                Adc_NEC::Adc_NEC(adc_nec_t volatile*, adcConv_nec_t volatile*, adc_nec_interrupt_t volatile*)
                0x0000ec90                Adc_NEC::setHwTriggerSource(Adc_NEC::HwTriggerSource, bool)
                0x0000edcc                Adc_NEC::setConversionTime(Adc_NEC::ConversionTime, bool)
                0x0000ea40                Adc_NEC::setEnable(bool)
                0x0000eb3a                Adc_NEC::setSpecificationOnExternalTrigger(Adc_NEC::SpecOfExtTrigger, bool)
                0x0000ea74                Adc_NEC::setConversionMode(Adc_NEC::ConversionMode, bool)
 .text          0x0000f25a     0x19f0 obj/ADC_SAU7000.o
                0x00010836                Adc_NEC_SAU7000::manager()
                0x0000f2f2                Adc_NEC_SAU7000::getCurrentAdcData(unsigned short*)
                0x0000f25a                Adc_NEC_SAU7000::getVoltageAdcData(unsigned short*)
                0x0000fe78                Adc_NEC_SAU7000::Adc_NEC_SAU7000(adc_nec_t volatile*, adcConv_nec_t volatile*, adc_nec_interrupt_t volatile*)
                0x0000f422                Adc_NEC_SAU7000::pushCurrentAdcDataToChan(int, unsigned short)
                0x0000f38a                Adc_NEC_SAU7000::pushVoltageAdcDataToChan(int, unsigned short)
                0x0000f4ba                Adc_NEC_SAU7000::Adc_NEC_SAU7000(adc_nec_t volatile*, adcConv_nec_t volatile*, adc_nec_interrupt_t volatile*)
 .text          0x00010c4a      0xa90 obj/UARTABSTRACT.o
                0x000111a6                UartRingBuffer::read_isr(char*, int)
                0x0001113a                UartDeviceAbstract::TransmitData(unsigned char const*, int)
                0x00010f62                UartDeviceAbstract::usec_delay(int)
                0x00011286                UartRingBuffer::read(char*, int)
                0x0001163a                UartDeviceAbstract::UartDeviceAbstract(int, int)
                0x000116c4                UartRingBuffer::UartRingBuffer(int)
                0x000114a0                UartDeviceAbstract::~UartDeviceAbstract()
                0x00010cf6                UartRingBuffer::puts_isr(char*)
                0x00010dfa                UartDeviceAbstract::SetStopBits(UartDeviceAbstract::UARTStopBits, bool)
                0x00011556                UartRingBuffer::resize(int)
                0x0001159a                UartRingBuffer::UartRingBuffer(int)
                0x00010f72                UartRingBuffer::write_isr(char const*, int)
                0x00010c9c                UartRingBuffer::puts(char*)
                0x00010c4a                UartRingBuffer::zeroIndex()
                0x00011170                UartDeviceAbstract::TransmitString(char const*)
                0x0001139e                UartRingBuffer::destroy()
                0x00011366                UartDeviceAbstract::ReceiveData(unsigned char*, int&)
                0x00010c7e                UartRingBuffer::UartRingBuffer()
                0x00010e1e                UartDeviceAbstract::SetBaudRate(UartDeviceAbstract::UARTBaudRate, bool)
                0x00010dd6                UartDeviceAbstract::SetFrameBits(UartDeviceAbstract::UARTFrameBits, bool)
                0x000114f4                UartRingBuffer::~UartRingBuffer()
                0x00010e3a                UartDeviceAbstract::SetHwFlwCtl(UartDeviceAbstract::UARThwFlwCnt, bool)
                0x00010db6                UartDeviceAbstract::SetParity(UartDeviceAbstract::UARTParity, bool)
                0x0001144c                UartDeviceAbstract::~UartDeviceAbstract()
                0x00010f3c                UartDeviceAbstract::ClearReceptionBuffer()
                0x00011512                UartRingBuffer::alloc(int)
                0x00010d50                UartRingBuffer::used()
                0x000113d4                UartRingBuffer::~UartRingBuffer()
                0x00011054                UartRingBuffer::write(char const*, int)
                0x00010e5e                UartDeviceAbstract::TransmitData(unsigned char)
                0x00010c60                UartRingBuffer::UartRingBuffer()
                0x00010ee8                UartDeviceAbstract::ReceiveData(char&)
                0x00010d88                UartRingBuffer::used_isr()
                0x000115b0                UartDeviceAbstract::UartDeviceAbstract(int, int)
                0x000113f2                UartDeviceAbstract::~UartDeviceAbstract()
                0x00010ec6                UartDeviceAbstract::ClearTransmissionBuffer()
 .text          0x000116da      0x546 obj/UARTNEC.o
                0x00011aac                UartNEC::UartNEC(uart_nec_t volatile*, UartDeviceAbstract::UARTParity, UartDeviceAbstract::UARTFrameBits, UartDeviceAbstract::UARTStopBits, UartDeviceAbstract::UARTBaudRate, int, int)
                0x00011b66                UartNEC::UartNEC(uart_nec_t volatile*, UartDeviceAbstract::UARTParity, UartDeviceAbstract::UARTFrameBits, UartDeviceAbstract::UARTStopBits, UartDeviceAbstract::UARTBaudRate, int, int)
                0x0001196c                UartNEC::SetParity(UartDeviceAbstract::UARTParity, bool)
                0x00011880                UartNEC::SetStopBits(UartDeviceAbstract::UARTStopBits, bool)
                0x00011a50                UartNEC::~UartNEC()
                0x00011a76                UartNEC::~UartNEC()
                0x000118f6                UartNEC::SetFrameBits(UartDeviceAbstract::UARTFrameBits, bool)
                0x00011704                UartNEC::SetBaudRate(UartDeviceAbstract::UARTBaudRate, bool)
                0x000116da                UartNEC::HwInit()
                0x00011a2a                UartNEC::~UartNEC()
 .text          0x00011c20      0x740 obj/UARTFPGA.o
                0x0001212e                UartFPGA::~UartFPGA()
                0x00011c20                UartFPGA::SetHwFlwCtl(UartDeviceAbstract::UARThwFlwCnt, bool)
                0x000120f0                UartFPGA::~UartFPGA()
                0x00011c94                UartFPGA::SetBaudRate(UartDeviceAbstract::UARTBaudRate, bool)
                0x000121b0                UartFPGA::UartFPGA(uart_fpga_t volatile*, UartDeviceAbstract::UARTParity, UartDeviceAbstract::UARTFrameBits, UartDeviceAbstract::UARTStopBits, UartDeviceAbstract::UARTBaudRate, UartDeviceAbstract::UARThwFlwCnt, int, int)
                0x00011f5e                UartFPGA::HwInit()
                0x00012008                UartFPGA::TurnOff()
                0x0001216c                UartFPGA::~UartFPGA()
                0x00012288                UartFPGA::UartFPGA(uart_fpga_t volatile*, UartDeviceAbstract::UARTParity, UartDeviceAbstract::UARTFrameBits, UartDeviceAbstract::UARTStopBits, UartDeviceAbstract::UARTBaudRate, UartDeviceAbstract::UARThwFlwCnt, int, int)
                0x00012066                UartFPGA::TurnOn()
                0x00011ddc                UartFPGA::HwTransfer()
 .text          0x00012360      0xd6a obj/PROTOCOLSTDUART.o
                0x00012b4e                stdUartProtocolAbstraction::stdUartProtocolAbstraction(UartDeviceAbstract*)
                0x0001236e                stdUartProtocolAbstraction::~stdUartProtocolAbstraction()
                0x00012648                stdUartProtocolAbstraction::addDataToReceivingBuffer(unsigned char, int)
                0x00012856                stdUartProtocolAbstraction::calculateChecksum(unsigned char*, int)
                0x00012ee8                stdUartProtocolAbstraction::checkTimeOutElapsed()
                0x00012b36                stdUartProtocolAbstraction::setBypassMode(bool, UartDeviceAbstract*)
                0x00012360                stdUartProtocolAbstraction::~stdUartProtocolAbstraction()
                0x00012e4a                stdUartProtocolAbstraction::SendCommand(unsigned char*, int, int)
                0x000125f4                stdUartProtocolAbstraction::addDataToReceivingBuffer(unsigned char*, int, int)
                0x0001258c                stdUartProtocolAbstraction::rstError()
                0x00012778                stdUartProtocolAbstraction::popPacketReceived(int&)
                0x0001237c                stdUartProtocolAbstraction::restoreIntialCondition()
                0x00012f52                stdUartProtocolAbstraction::manager()
                0x000125ec                stdUartProtocolAbstraction::IsTransmissionAvailable()
                0x0001238a                stdUartProtocolAbstraction::setError(int, bool)
                0x0001249e                stdUartProtocolAbstraction::DataAnalyse()
                0x00012cac                stdUartProtocolAbstraction::stdUartProtocolAbstraction(UartDeviceAbstract*)
                0x0001287a                stdUartProtocolAbstraction::popMultiMessage(unsigned char*, int&)
                0x000125a6                stdUartProtocolAbstraction::getLastError()
                0x00012e0a                stdUartProtocolAbstraction::setLastDataReceivedBuffer(int)
                0x0001299e                stdUartProtocolAbstraction::pushMultiMessages(unsigned char*, int)
                0x000125f0                stdUartProtocolAbstraction::IsReceptionAvailable()
                0x00012812                stdUartProtocolAbstraction::getNewPacketReceived()
                0x00012690                stdUartProtocolAbstraction::setReceivedOpCode(int)
                0x000125ac                stdUartProtocolAbstraction::popError()
                0x00012818                stdUartProtocolAbstraction::rstNewPacketReceived()
 .text          0x000130ca     0x233e obj/PROTOCOLSAUANDPC.o
                0x00013b80                SauPcProtocol::sendSauPcWeightSamples(long*, int)
                0x00015044                SauPcProtocol::~SauPcProtocol()
                0x00013cea                SauPcProtocol::sendSauPcAcquisitionStopped(unsigned char)
                0x00013252                SauPcProtocol::getMsg()
                0x00013aca                SauPcProtocol::sendSauPcEmgContactImpSamples(unsigned short*, int)
                0x00013a4c                SauPcProtocol::sendSauPcWtp(unsigned short, unsigned char, unsigned char, unsigned long)
                0x000138a0                SauPcProtocol::sendSauPcJumpedToLoader()
                0x000137ee                SauPcProtocol::sendAcknowledge(unsigned char)
                0x00013952                SauPcProtocol::sendSauPcBubble(unsigned char, unsigned char, bool, bool, bool, bool)
                0x0001338a                SauPcProtocol::sendMotorsCalibrationValues(wtpCalibration_t*, unsigned char)
                0x00013eda                SauPcProtocol::sendSauPcEmgSamples(unsigned short*, int)
                0x00013300                SauPcProtocol::sendOverpressureInfo(short, overpressure_bitF_t, overpressure_bitF_t)
                0x000138f6                SauPcProtocol::sendSauPcRemoteKey(int)
                0x00013f7e                SauPcProtocol::sendSauPcGenSamples(unsigned short*, int)
                0x00013664                SauPcProtocol::sendPrsCalibrationValues(unsigned char)
                0x000131aa                SauPcProtocol::checksum(unsigned char, unsigned char)
                0x000130ca                SauPcProtocol::sendEmgCalibrationValues(unsigned char)
                0x00015094                SauPcProtocol::~SauPcProtocol()
                0x000150e4                SauPcProtocol::SauPcProtocol(UartDeviceAbstract*, int)
                0x00013c50                SauPcProtocol::sendSauPcErrors(unsigned char*, int)
                0x000130ce                SauPcProtocol::checkOpCode(unsigned char)
                0x000139ce                SauPcProtocol::sendSauPcWth(unsigned char, unsigned short, unsigned char, unsigned char, unsigned short)
                0x0001378a                SauPcProtocol::sendDisplaySetting(unsigned char, unsigned char, unsigned char)
                0x00013d9c                SauPcProtocol::sendSauPcStatus(unsigned char*, int)
                0x00013292                SauPcProtocol::sendWtpSpeedCalibration(unsigned long, unsigned char)
                0x0001353e                SauPcProtocol::sendWeightCalibrationValues(unsigned char)
                0x00015276                SauPcProtocol::SauPcProtocol(UartDeviceAbstract*, int)
                0x00014022                SauPcProtocol::sendSauPcInfo(unsigned short*, unsigned char, unsigned short, char*, char*, char*)
                0x000131de                SauPcProtocol::sendMsg(int)
                0x0001345a                SauPcProtocol::sendGenericCalibrationValues(unsigned char)
                0x00013d46                SauPcProtocol::sendSauPcAcquisitionStarted()
                0x00014284                SauPcProtocol::manager()
                0x00014c5a                SauPcProtocol::DataAnalyse()
                0x00013e36                SauPcProtocol::sendSauPcPrsSamples(short*, int)
                0x0001384a                SauPcProtocol::sendSauPc_emgz_JumpedToLoader()
 .text          0x00015408     0x308c obj/PROTOCOL_uC.o
                0x00015ff6                ADuC_PRS_protocol::packetLost_01_handler()
                0x000155d4                uC_Protocol::__decode_StopAcquisitionCmd()
                0x00015968                uC_Protocol::sendMsg(int)
                0x0001831e                ADuC_GEN_protocol::ADuC_GEN_protocol(UartDeviceAbstract*, int)
                0x0001571c                uC_Protocol::checkOpCode(unsigned char)
                0x00017200                uC_Protocol::__decode_Set_IEXC_Cmd()
                0x00015b80                ADuC_WEIGHT_protocol::samplePacket_01_decode()
                0x00016e8e                uC_Protocol::sendRequest_Info()
                0x000176a2                uC_Protocol::manager()
                0x000157c4                uC_Protocol::checkPacketsLost(unsigned char, unsigned char)
                0x0001605e                ADuC_GEN_protocol::samplePacket_03_decode()
                0x00018378                ADuC_PRS_protocol::ADuC_PRS_protocol(UartDeviceAbstract*, int)
                0x0001602a                ADuC_GEN_protocol::packetLost_03_handler()
                0x0001556c                uC_Protocol::__decode_SatusCmd()
                0x00015682                uC_Protocol::__decode_ErrorCmd()
                0x00018116                uC_Protocol::uC_Protocol(UartDeviceAbstract*, int)
                0x00017c40                uC_Protocol::DataAnalyse()
                0x000170ea                uC_Protocol::__decode_Set_DAC_Cmd()
                0x00015630                uC_Protocol::__decode_NotAckCmd()
                0x00017f68                uC_Protocol::uC_Protocol(UartDeviceAbstract*, int)
                0x000182c4                ADuC_GEN_protocol::ADuC_GEN_protocol(UartDeviceAbstract*, int)
                0x000157dc                uC_Protocol::__decode_Sample_03_Cmd()
                0x00016528                ADuC_WEIGHT_protocol::ADuCDefaultSetting()
                0x00015408                uC_Protocol::__decode_InfoCmd()
                0x00016ef0                uC_Protocol::__decode_Set_PWM_Cmd()
                0x000172a8                uC_Protocol::__decode_Set_ADC_Cmd()
                0x00015602                uC_Protocol::__decode_AckCmd()
                0x000162fe                ADuC_PRS_protocol::ADuCDefaultSetting()
                0x00016baa                uC_Protocol::sendRequest_Setting_PWM()
                0x00016c02                uC_Protocol::sendRequest_Setting_DAC()
                0x00015860                uC_Protocol::__decode_Sample_02_Cmd()
                0x0001844e                ADuC_WEIGHT_protocol::ADuC_WEIGHT_protocol(UartDeviceAbstract*, int)
                0x00016a1c                uC_Protocol::sendSetting_ADC()
                0x000156ca                uC_Protocol::__decode_StartAcquisitionCmd()
                0x000183c0                ADuC_PRS_protocol::ADuC_PRS_protocol(UartDeviceAbstract*, int)
                0x00015714                uC_Protocol::sendSetting()
                0x00016c5a                uC_Protocol::sendRequest_Setting_IEXC()
                0x00016d62                uC_Protocol::sendStartAcquisition()
                0x00017f0a                uC_Protocol::~uC_Protocol()
                0x00015d82                ADuC_PRS_protocol::samplePacket_01_decode()
                0x000168dc                uC_Protocol::sendSetting_DAC()
                0x00015d4e                ADuC_WEIGHT_protocol::packetLost_01_handler()
                0x00016e36                uC_Protocol::sendRequest_Status()
                0x0001674a                uC_Protocol::sendSetting_PWM()
                0x00015a1c                uC_Protocol::enableFrequencyCal(bool)
                0x000159dc                uC_Protocol::getMsg()
                0x00017eac                uC_Protocol::~uC_Protocol()
                0x00016d0a                uC_Protocol::sendStopAcquisition()
                0x00016dc6                uC_Protocol::sendRequestSelfTest(bool, int)
                0x00015a2c                uC_Protocol::calculateSamplingFrq()
                0x00016cb2                uC_Protocol::sendRequest_Setting_ADC()
                0x000160d4                ADuC_GEN_protocol::ADuCDefaultSetting()
                0x00018408                ADuC_WEIGHT_protocol::ADuC_WEIGHT_protocol(UartDeviceAbstract*, int)
                0x000158e4                uC_Protocol::__decode_Sample_01_Cmd()
                0x00015790                uC_Protocol::checksum(unsigned char, unsigned char)
                0x00016988                uC_Protocol::sendSetting_IEXC()
 .text          0x00018494      0x9fc obj/PROTOCOLSAUANDEMGZ.o
                0x000186d8                SauAndEmgzProtocol::sendFilteringSetting(unsigned char, unsigned char, unsigned char)
                0x00018594                SauAndEmgzProtocol::getMsg()
                0x000188d4                SauAndEmgzProtocol::DataAnalyse()
                0x00018c08                SauAndEmgzProtocol::SauAndEmgzProtocol(UartDeviceAbstract*, int)
                0x00018748                SauAndEmgzProtocol::sendStatusRequest()
                0x000184ec                SauAndEmgzProtocol::checksum(unsigned char, unsigned char)
                0x00018494                SauAndEmgzProtocol::checkOpCode(unsigned char)
                0x00018872                SauAndEmgzProtocol::sendInfoRequest()
                0x00018520                SauAndEmgzProtocol::sendMsg(int)
                0x00018d4c                SauAndEmgzProtocol::SauAndEmgzProtocol(UartDeviceAbstract*, int)
                0x00018bc4                SauAndEmgzProtocol::~SauAndEmgzProtocol()
                0x000187aa                SauAndEmgzProtocol::sendStopAcq()
                0x0001880c                SauAndEmgzProtocol::sendStartAcq()
                0x00018606                SauAndEmgzProtocol::sendJumpedToLoaderRequest()
                0x000185ec                SauAndEmgzProtocol::getLastEmgzBoardErrors(unsigned short&, unsigned char&, unsigned short&)
                0x00018668                SauAndEmgzProtocol::sendCheckContactImpedances(bool)
                0x00018be6                SauAndEmgzProtocol::~SauAndEmgzProtocol()
                0x000185d4                SauAndEmgzProtocol::checkPacketsLost(unsigned char, unsigned char)
 .text          0x00018e90     0x42aa obj/iWRAP_BLUEGIGA.o
                0x00019f84                iWRAP_BLUEGIGA_Protocol::NAME(char const*, int)
                0x0001b6aa                iWRAP_BLUEGIGA_Protocol::CLOSE(int, int)
                0x0001b30c                iWRAP_BLUEGIGA_Protocol::SET_BT_ROLE(iWRAP_BLUEGIGA_Protocol::master_slave_policy, iWRAP_BLUEGIGA_Protocol::link_policy, int, int)
                0x00019e3a                iWRAP_BLUEGIGA_Protocol::RESET(int)
                0x0001b58a                iWRAP_BLUEGIGA_Protocol::INQUIRY(int, bool, iWRAP_BLUEGIGA_Protocol::inquiryAccessCode_LAP, int)
                0x0001b500                iWRAP_BLUEGIGA_Protocol::SELECT(int, int)
                0x0001a328                iWRAP_BLUEGIGA_Protocol::SCO_OPEN(int, int)
                0x0001cefa                iWRAP_BLUEGIGA_Protocol::~iWRAP_BLUEGIGA_Protocol()
                0x00019620                iWRAP_BLUEGIGA_Protocol::TESTMODE(int)
                0x000196b8                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_INIT(char const*, int)
                0x0001d042                iWRAP_BLUEGIGA_Protocol::iWRAP_BLUEGIGA_Protocol(UartDeviceAbstract*, int)
                0x00019278                iWRAP_BLUEGIGA_Protocol::TEST(char const*, int)
                0x0001a7a4                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_MASTER(int, int)
                0x0001b72e                iWRAP_BLUEGIGA_Protocol::CALL(char const*, char const*, iWRAP_BLUEGIGA_Protocol::conenct_mode, int, int)
                0x00019864                iWRAP_BLUEGIGA_Protocol::SET_BT_AUTH(char const*, int)
                0x00019a9a                iWRAP_BLUEGIGA_Protocol::SET_BT_BDADDR(int)
                0x0001cf4a                iWRAP_BLUEGIGA_Protocol::iWRAP_BLUEGIGA_Protocol(UartDeviceAbstract*, int)
                0x0001c5d0                iWRAP_BLUEGIGA_Protocol::manager()
                0x000199e4                iWRAP_BLUEGIGA_Protocol::SET_BT_NAME(char const*, int)
                0x00019460                iWRAP_BLUEGIGA_Protocol::SDP_ADD(char const*, char const*, int)
                0x0001a5b6                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_SNIFF(int, int, int)
                0x00019770                iWRAP_BLUEGIGA_Protocol::SET_BT_PAIR(char const*, char const*, int)
                0x0001b9f4                iWRAP_BLUEGIGA_Protocol::DataAnalyse()
                0x0001ae2c                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_BAUD(iWRAP_BLUEGIGA_Protocol::baud_rate, iWRAP_BLUEGIGA_Protocol::parity, iWRAP_BLUEGIGA_Protocol::stop_bits, int)
                0x0001b090                iWRAP_BLUEGIGA_Protocol::SET_BT_POWER(int, int, bool, int)
                0x0001a2a2                iWRAP_BLUEGIGA_Protocol::BOOT(iWRAP_BLUEGIGA_Protocol::boot_mode, int)
                0x00019138                iWRAP_BLUEGIGA_Protocol::ESCAPE_SEQUENCE(int)
                0x0001b1de                iWRAP_BLUEGIGA_Protocol::SET_BT_SNIFF(int, int)
                0x00019332                iWRAP_BLUEGIGA_Protocol::SCO_ENABLE(int)
                0x0001b268                iWRAP_BLUEGIGA_Protocol::SET_BT_SNIFF(int, int, int, int, int)
                0x0001a6e8                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_PARK(int, int, int, int)
                0x0001ad84                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_CD(unsigned char, bool, int)
                0x0001ceaa                iWRAP_BLUEGIGA_Protocol::~iWRAP_BLUEGIGA_Protocol()
                0x0001a554                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_MSC(int, char const*, int)
                0x0001a746                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_SLAVE(int, int)
                0x00018f5c                iWRAP_BLUEGIGA_Protocol::sendMsg(int)
                0x0001af8c                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_AUTOCALL(char const*, int, char const*, int)
                0x0001b3ac                iWRAP_BLUEGIGA_Protocol::SET_BT_PAGEMODE(iWRAP_BLUEGIGA_Protocol::page_mode, int, iWRAP_BLUEGIGA_Protocol::page_scan_mode, int)
                0x0001a14c                iWRAP_BLUEGIGA_Protocol::PING(int, int)
                0x0001a860                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_MSC(iWRAP_BLUEGIGA_Protocol::msc_mode, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, int)
                0x0001a686                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_PARK(int, int, int)
                0x00019b2e                iWRAP_BLUEGIGA_Protocol::SET_PROFILE(iWRAP_BLUEGIGA_Protocol::profile_name, char const*, int)
                0x0001ac68                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_ECHO(iWRAP_BLUEGIGA_Protocol::echo_mask, int)
                0x000190ac                iWRAP_BLUEGIGA_Protocol::checkSyntaxErrorTimer()
                0x00019dac                iWRAP_BLUEGIGA_Protocol::INFO(int)
                0x00019c6e                iWRAP_BLUEGIGA_Protocol::SET(int)
                0x0001b144                iWRAP_BLUEGIGA_Protocol::SET_BT_SSP(iWRAP_BLUEGIGA_Protocol::spp_capabilities, iWRAP_BLUEGIGA_Protocol::spp_mitm, int)
                0x0001a450                iWRAP_BLUEGIGA_Protocol::RSSI(int, int)
                0x0001b972                iWRAP_BLUEGIGA_Protocol::waitSyntaxErrorSyncroError(int)
                0x000193d0                iWRAP_BLUEGIGA_Protocol::SLEEP(int)
                0x00019ece                iWRAP_BLUEGIGA_Protocol::PAIR(char const*, int)
                0x0001a9e6                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_BIND(unsigned char, unsigned short, iWRAP_BLUEGIGA_Protocol::direction, char const*, int)
                0x0001ab20                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_MUX(bool, int)
                0x00019032                iWRAP_BLUEGIGA_Protocol::getMsg(iWRAP_BLUEGIGA_Protocol::iWRAP_msg_struct&)
                0x0001a3be                iWRAP_BLUEGIGA_Protocol::TXPOWER(int, int)
                0x00019216                iWRAP_BLUEGIGA_Protocol::AT(int)
                0x0001a1d2                iWRAP_BLUEGIGA_Protocol::ECHO(int, char const*, int)
                0x0001b44e                iWRAP_BLUEGIGA_Protocol::SET_BT_LAP(iWRAP_BLUEGIGA_Protocol::inquiryAccessCode_LAP, int)
                0x00019548                iWRAP_BLUEGIGA_Protocol::SDP(char const*, char const*, int)
                0x00019926                iWRAP_BLUEGIGA_Protocol::SET_BT_CLASS(char const*, int)
                0x00018e90                iWRAP_BLUEGIGA_Protocol::sendMsg(iWRAP_BLUEGIGA_Protocol::iWRAP_msg_struct)
                0x0001a618                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_SNIFF(int, int, int, int, int, int)
                0x0001acf6                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_CONFIG(iWRAP_BLUEGIGA_Protocol::configuration_values, int)
                0x0001a4d4                iWRAP_BLUEGIGA_Protocol::BER(int, int)
                0x0001a03c                iWRAP_BLUEGIGA_Protocol::LIST(int)
                0x0001abc2                iWRAP_BLUEGIGA_Protocol::SET_CONTROL_ESCAPE(char, unsigned short, iWRAP_BLUEGIGA_Protocol::dtr_mode, int)
                0x0001a0c6                iWRAP_BLUEGIGA_Protocol::IC(int)
                0x00019cf6                iWRAP_BLUEGIGA_Protocol::AUTH(char const*, int)
                0x0001a802                iWRAP_BLUEGIGA_Protocol::SET_LINK_ID_ACTIVE(int, int)
 .text          0x0001d13a     0x1590 obj/iWRAP_BLUEGIGA_SPP.o
                0x0001d4a2                iWRAP_BLUEGIGA_SPP::getMsg(iWRAP_BLUEGIGA_SPP::iWRAP_SSP_msg_struct&)
                0x0001d6d6                iWRAP_BLUEGIGA_SPP::BER()
                0x0001d6da                iWRAP_BLUEGIGA_SPP::RSSI()
                0x0001e520                iWRAP_BLUEGIGA_SPP::~iWRAP_BLUEGIGA_SPP()
                0x0001e4fe                iWRAP_BLUEGIGA_SPP::~iWRAP_BLUEGIGA_SPP()
                0x0001d596                iWRAP_BLUEGIGA_SPP::RESET()
                0x0001d7bc                iWRAP_BLUEGIGA_SPP::manager()
                0x0001d5ce                iWRAP_BLUEGIGA_SPP::SET_BT_NAME()
                0x0001d538                iWRAP_BLUEGIGA_SPP::VERIFY_BAUD_RATE()
                0x0001d6d2                iWRAP_BLUEGIGA_SPP::SET_BT_POWER()
                0x0001d6de                iWRAP_BLUEGIGA_SPP::TXPOWER()
                0x0001d602                iWRAP_BLUEGIGA_SPP::SET_PROFILE()
                0x0001d69e                iWRAP_BLUEGIGA_SPP::SET_CONTROL_MSC()
                0x0001d6e2                iWRAP_BLUEGIGA_SPP::strMsg(char*, int&)
                0x0001e606                iWRAP_BLUEGIGA_SPP::iWRAP_BLUEGIGA_SPP(UartDeviceAbstract*, int)
                0x0001d59a                iWRAP_BLUEGIGA_SPP::INFO()
                0x0001e542                iWRAP_BLUEGIGA_SPP::iWRAP_BLUEGIGA_SPP(UartDeviceAbstract*, int)
                0x0001d636                iWRAP_BLUEGIGA_SPP::SET_BT_AUTH()
                0x0001d51c                iWRAP_BLUEGIGA_SPP::changeStatus(iWRAP_BLUEGIGA_SPP::states)
                0x0001d16c                iWRAP_BLUEGIGA_SPP::iWRAP_timeout_and_error_handler(char*, int, bool)
                0x0001d56c                iWRAP_BLUEGIGA_SPP::CLOSE()
                0x0001d66a                iWRAP_BLUEGIGA_SPP::SET_BT_SSP()
                0x0001d300                iWRAP_BLUEGIGA_SPP::sendMsg(iWRAP_BLUEGIGA_SPP::iWRAP_SSP_msg_struct)
                0x0001d776                iWRAP_BLUEGIGA_SPP::CALL(char*)
                0x0001d13a                iWRAP_BLUEGIGA_SPP::reset_machinesState()
                0x0001d3cc                iWRAP_BLUEGIGA_SPP::sendMsg(int)
 .text          0x0001e6ca     0x4544 obj/SAU7000_MANAGER.o
                0x0001e6ca                SAU7000_Manager::~SAU7000_Manager()
                0x0002030a                SAU7000_Manager::IR_remoteManager()
                0x0001e6f6                SAU7000_Manager::checkADuCStatus(unsigned char)
                0x0001f0ec                SAU7000_Manager::writeToEE_weightCalValue()
                0x00020dda                SAU7000_Manager::manager()
                0x0001f36c                SAU7000_Manager::changeBTcheckStatus(SAU7000_Manager::BTchk_status)
                0x0001f024                SAU7000_Manager::writeToEE_genCalValue(int)
                0x0001ec7c                SAU7000_Manager::readToEE_genCalValue(int)
                0x0001e6ce                SAU7000_Manager::rstPrsSamples()
                0x000203cc                SAU7000_Manager::stop_sampling_and_all_peripherals()
                0x0001f3f2                SAU7000_Manager::changeSau7000status(SAU7000_Manager::Sau7000_Status)
                0x0001eee0                SAU7000_Manager::readToEE_prsCalValue()
                0x0001ffb6                SAU7000_Manager::getADuCsStatus()
                0x0001f22c                SAU7000_Manager::writeToEE_prsCalValue()
                0x0002083a                SAU7000_Manager::KeyboardManager()
                0x0001eb2c                SAU7000_Manager::stopWth()
                0x0002020c                SAU7000_Manager::ADuCsNormalMode()
                0x0001ff64                SAU7000_Manager::getADuCsInfo()
                0x0001e6e4                SAU7000_Manager::rstWeightSamples()
                0x0001fa54                SAU7000_Manager::SAU7000_Manager(Keyboard*, SauPcProtocol*)
                0x0001eaa6                SAU7000_Manager::stopWtp()
                0x00020c90                SAU7000_Manager::ADuC_startupChecks_Init()
                0x0001e6cc                SAU7000_Manager::~SAU7000_Manager()
                0x0001f712                SAU7000_Manager::SAU7000_Manager(Keyboard*, SauPcProtocol*)
                0x00020122                SAU7000_Manager::startADuCs()
                0x0001e756                SAU7000_Manager::setOverpressureAdcLimit()
                0x000200a2                SAU7000_Manager::setADuCsAquisitionParameters()
                0x00020b7e                SAU7000_Manager::watchDogManager()
                0x0001fd96                SAU7000_Manager::sendErrorsMsg()
                0x0001ed9c                SAU7000_Manager::readToEE_weightCalValue()
                0x00020008                SAU7000_Manager::stopADuCs()
 .text          0x00022c0e     0x214e obj/DPYDRV.o
                0x00023e16                _ST7565_waitIfBusy
                0x00022c66                _display_testSignals
                0x00022e62                _drv_getTextBlock
                0x00022c38                _drv_getGraphInfo
                0x00022f4e                _drv_putTextChar
                0x000231d0                _drv_vline
                0x00022dca                _drv_setTextCursDir
                0x00023a9c                _drv_setCursDir
                0x00023466                _drv_putimage
                0x00023be4                _drv_puticon
                0x00023df0                _ST7565_delay
                0x00023142                _drv_putpixel
                0x00024054                _display_init
                0x00023aba                _drv_hline
                0x000243d4                _drv_putForeChar
                0x00022c92                _display_brightness
                0x00024656                _drv_putGraphChar
                0x00022e06                _drv_setTextPointer
                0x00023414                _drv_getpixel
                0x00023ffe                _display_contrast
                0x00023e2e                _ST7565_data_wr
                0x00022c5a                _display_chrsetLoad
                0x00022f06                _drv_putGraphBlock
                0x00023e12                _ST7565_data_rd
                0x00022e10                _drv_setTextCursPos
                0x0002308c                _drv_putTextBlock
                0x00022dd4                _drv_setGraphCursPos
                0x00022c0e                _drv_getTextInfo
                0x00023ea6                _ST7565_cmd_wr
                0x00022ebe                _drv_getGraphBlock
                0x00023a98                _drv_putPcxPicture
                0x00023f1e                _display_update
                0x00022e68                _drv_fillGraphBlock
                0x00022c6a                _display_backlight
                0x000230f2                _drv_fillTextBlock
                0x00022e04                _drv_scrollTextScreen
 .text          0x00024d5c      0x246 obj/CHRSET.o
                0x00024e98                _charset_select
                0x00024dd2                _charset_width
                0x00024dfe                _charset_getIndex
                0x00024f46                _charset_init
                0x00024d5c                _charset_getCurrent
                0x00024d66                _charset_register
                0x00024dc0                _charset_height
                0x00024da6                _charset_select_num
 .text          0x00024fa2      0xd70 obj/GRAPH.o
                0x00025436                _bar
                0x00025248                _getimage
                0x00025004                _setbkcolor
                0x000251f8                _setvisualpage
                0x000251a0                _setfillstyle
                0x00024fbe                _getmaxx
                0x000251fa                _setviewport
                0x00025240                _settextjustify
                0x000256cc                _rectangle
                0x00025774                _line
                0x000252e4                _gprintf
                0x0002500e                _getbkcolor
                0x000253ca                _putsmallicon
                0x00025a34                _moverel
                0x00025ca8                _getarccoords
                0x00025980                _fillpoly
                0x000251de                _getaspectratio
                0x000251f6                _setactivepage
                0x000251cc                _getfillsettings
                0x00024fb0                _gety
                0x000251dc                _setaspectratio
                0x00025ab4                _gprintfxy
                0x00025250                _grapherrormsg
                0x00025288                _pieslice
                0x00024ff6                _getmaxcolor
                0x0002540a                _putpcxpicture
                0x00024fe8                _getcolor
                0x0002523e                _settextstyle
                0x000251ce                getfillpattern(unsigned char*)
                0x0002528c                _fillellipse
                0x000258a6                drawpoly(int, int const*, int)
                0x000259e4                _linerel
                0x000256b6                _putpixel
                0x00025420                _putimage
                0x00025246                _floodfill
                0x000251e8                _setrgbpalette
                0x00025244                _arc
                0x00025530                _circle
                0x00024fde                _setcolor
                0x00025242                _setusercharsize
                0x00025b3e                _outtextxy
                0x00025b18                _gputcxy
                0x0002535c                _textheight
                0x00025330                _gputc
                0x000253ec                _puticon
                0x00025a8e                _gputsxy
                0x000251e0                _getpalettesize
                0x000251fc                _getviewsettings
                0x00025c36                _getpixel
                0x000251ea                _setallpalette
                0x0002528a                _sector
                0x0002528e                _gputs
                0x00025c4c                _cleardevice
                0x00024fce                _getmaxy
                0x00025286                _ellipse
                0x0002501e                _setlinestyle
                0x00025cca                setfillpattern(unsigned char const*, int)
                0x000254ca                _bar3d
                0x000251e4                _setpalette
                0x00025998                _lineto
                0x0002524e                _gettextsettings
                0x00025a78                _moveto
                0x00025346                _textwidth
                0x00025be4                _clearviewport
                0x0002501c                _setwritemode
                0x00025372                _outtext
                0x000251e6                _getpalette
                0x000251ec                _getdefaultpalette
                0x00024fa2                _getx
                0x0002524a                _imagesize
                0x0002517e                _getlinesettings
 .text          0x00025d12     0x23e0 obj/APPMENU.o
                0x00025dac                CMenuPage::CMenuPage()
                0x00026ea8                CMenuSwitchOff::CMenuSwitchOff()
                0x00026d30                CMenuMain::setWTPisMoving(bool)
                0x00026ac6                CMenuGeneralInfo::setSAUstate(char const*)
                0x00025d46                CMenuList::CMenuList()
                0x00027cc0                CMenuMessages::Draw()
                0x00026e0c                CMenuGeneralInfo::CMenuGeneralInfo()
                0x000278e4                CMenuADuCfrqCal::Refresh()
                0x000278fa                CMenuADuCstatus::Refresh()
                0x00025e6a                CMenuLogo::Refresh()
                0x00025f22                CMenuPage::~CMenuPage()
                0x00027344                CMenuADuCfrqCal::CMenuADuCfrqCal()
                0x000264a4                CMenuMain::setWTPspeed(int)
                0x0002804c                CMenuList::Entry()
                0x00027796                CMenuInfo::Refresh()
                0x00026322                CMenuMain::setWTHspeed(int)
                0x00027e38                CMenuADuCstatus::Draw()
                0x00026f2c                CMenuSwitchOff::CMenuSwitchOff()
                0x00027c2e                CMenuSwitchOff::Draw()
                0x0002710c                CMenuInfo::CMenuInfo()
                0x00026c56                CMenuMain::setLimitSwitch(CMenuMain::LmtSwStatus, CMenuMain::LmtSwStatus)
                0x0002666c                CMenuADuCfrqCal::setADuCinfo(int, char const*)
                0x00027638                CMenuGeneralInfo::Refresh()
                0x00026e5a                CMenuGeneralInfo::CMenuGeneralInfo()
                0x00027b14                CMenuLogo::Draw()
                0x00027318                CMenuADuCfrqCal::CMenuADuCfrqCal()
                0x000262c2                CMenuMain::writeWtpSpeed()
                0x00027212                CMenuInfo::CMenuInfo()
                0x000265ac                CMenuInfo::addStr(char const*)
                0x00027acc                CMenuList::ChangePage(CMenuPage*)
                0x000260c6                CMenuMessages::setMessage(int, char const*)
                0x0002705e                CMenuMessages::CMenuMessages()
                0x00025dd4                CMenuPage::~CMenuPage()
                0x00027d52                CMenuInfo::Draw()
                0x00026bf6                CMenuMain::drawWthLimitSwitches()
                0x00027f22                CMenuMain::Draw()
                0x00025e26                CMenuLogo::CMenuLogo()
                0x00027910                CMenuMain::Refresh()
                0x00027d68                CMenuADuCfrqCal::Draw()
                0x00025f44                CMenuSwitchOff::setMessage(int, char const*)
                0x00027370                CMenuADuCstatus::CMenuADuCstatus()
                0x00025d7a                CMenuList::BackPage()
                0x00025e6c                CMenuInfo::strClear()
                0x000268a6                CMenuADuCstatus::setADuCstate(int, char const*)
                0x00026d7e                CMenuGeneralInfo::setCOMMico(CMenuGeneralInfo::COMM_icoType, bool)
                0x00027bb0                CMenuGeneralInfo::Draw()
                0x00026b74                CMenuMain::setWTHisMoving(bool)
                0x00025dc6                CMenuPage::~CMenuPage()
                0x00025d12                CMenuList::CMenuList()
                0x000273c8                CMenuMain::CMenuMain()
                0x00025d92                CMenuPage::CMenuPage()
                0x00027780                CMenuMessages::Refresh()
                0x000276e0                CMenuSwitchOff::Refresh()
                0x00025de2                CMenuLogo::CMenuLogo()
                0x00026248                CMenuMain::writeWthSpeed()
                0x00027500                CMenuMain::CMenuMain()
                0x0002739c                CMenuADuCstatus::CMenuADuCstatus()
                0x00026fb0                CMenuMessages::CMenuMessages()
 .text          0x000280f2        0x0 obj/ICONS.o
 .text          0x000280f2      0x5ae obj/EEPROM_SPI.o
                0x00028674                init_eeprom_spi()
                0x0002859c                ee_spi_read(unsigned char, unsigned char*, int)
                0x00028298                ee_spi_write(unsigned char, unsigned char*, int)
 .text          0x000286a0        0x0 obj/SAU7000_ADuC_SOURCE.o
 .text          0x000286a0      0x9fc obj/PROTOCOLADuCfwUPGRADE.o
                0x0002902e                ADuCfwUpgrade_protocol::ADuCfwUpgrade_protocol(UartDeviceAbstract*, int)
                0x00028f7c                ADuCfwUpgrade_protocol::~ADuCfwUpgrade_protocol()
                0x00028ade                ADuCfwUpgrade_protocol::sendSyncro()
                0x000286a0                ADuCfwUpgrade_protocol::getMsg()
                0x00028fc0                ADuCfwUpgrade_protocol::ADuCfwUpgrade_protocol(UartDeviceAbstract*, int)
                0x00028b0a                ADuCfwUpgrade_protocol::DataAnalyse()
                0x0002895c                ADuCfwUpgrade_protocol::programFlash(unsigned long, unsigned char*, unsigned char)
                0x00028ca6                ADuCfwUpgrade_protocol::manager()
                0x00028f9e                ADuCfwUpgrade_protocol::~ADuCfwUpgrade_protocol()
                0x00028754                ADuCfwUpgrade_protocol::rstProtocol()
                0x00028a22                ADuCfwUpgrade_protocol::erasePage(unsigned long, unsigned char, int)
                0x0002887e                ADuCfwUpgrade_protocol::verifyFlash(unsigned long, unsigned char*, unsigned char)
                0x00028ab0                ADuCfwUpgrade_protocol::eraseDevice()
                0x00028806                ADuCfwUpgrade_protocol::runDevice()
                0x000286e0                ADuCfwUpgrade_protocol::sendMsg(int)
                0x000287a2                ADuCfwUpgrade_protocol::ADuC_upgr_getInfoCmdDecode()
 .text          0x0002909c      0x69a obj/ADuC_UPGRADEMANAGER.o
                0x00029312                ADuCUpgradeManger::upgrade()
                0x000293a6                ADuCUpgradeManger::manager()
                0x000290dc                ADuCUpgradeManger::~ADuCUpgradeManger()
                0x0002937e                ADuCUpgradeManger::erase()
                0x00029104                ADuCUpgradeManger::getLoaderRevision()
                0x00029662                ADuCUpgradeManger::syncronize()
                0x00029288                ADuCUpgradeManger::run()
                0x000290bc                ADuCUpgradeManger::ADuCUpgradeManger(ADuCfwUpgrade_protocol*)
                0x000290de                ADuCUpgradeManger::~ADuCUpgradeManger()
                0x000290e0                ADuCUpgradeManger::getProductID()
                0x00029162                ADuCUpgradeManger::ADuC_hwSerialLoader()
                0x000292a6                ADuCUpgradeManger::verify()
                0x00029116                ADuCUpgradeManger::keepReset()
                0x0002968a                ADuCUpgradeManger::abort()
                0x000290f2                ADuCUpgradeManger::getMemorySize()
                0x0002909c                ADuCUpgradeManger::ADuCUpgradeManger(ADuCfwUpgrade_protocol*)
                0x000296c6                ADuCUpgradeManger::startUpgrade()
                0x00029126                ADuCUpgradeManger::cycle_delay(int)
                0x00029210                ADuCUpgradeManger::ADuC_hwReset()
                0x00029272                ADuCUpgradeManger::hwReset()
 .text          0x00029736     0x2852 obj/TIMER_NEC.o
                0x0002a120                Timer_NEC_P024::setFrequency(double, Timer_NEC::CCRn)
                0x00029748                Timer_NEC::Timer_NEC(NEC_timer_Generic_t volatile*)
                0x0002b146                Timer_NEC_Q::setTxnOL3(Timer_NEC::TxnOL3, bool)
                0x0002b0f6                Timer_NEC_Q::setTxnOE2(Timer_NEC::TxnOE2, bool)
                0x0002a5e8                Timer_NEC_P024::setPrescaler(Timer_NEC_P024::Prescalers, bool)
                0x0002a75a                Timer_NEC_P024::setCCR1(unsigned short, bool, bool)
                0x000297fa                Timer_NEC::setTimerMode(Timer_NEC::TimerMode, bool)
                0x00029b36                Timer_NEC::setValidEdgeExtCountTIxn1(Timer_NEC::ValidEdgeExtCountTIxn1, bool)
                0x0002b26e                Timer_NEC_Q::setValidEdgeCaptureTrigTIxn3(Timer_NEC::ValidEdgeCaptureTrigTIxn3, bool)
                0x0002a0b4                Timer_NEC_P024::Timer_NEC_P024(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x00029edc                Timer_NEC_P::setPeriod(double, Timer_NEC::CCRn)
                0x0002ac32                Timer_NEC_P135::calculateFrequency(Timer_NEC::CCRn)
                0x0002b77c                Timer_NEC_Q::setPrescaler(Timer_NEC_Q::Prescalers, bool, bool)
                0x0002b198                Timer_NEC_Q::setTxnOE3(Timer_NEC::TxnOE3, bool)
                0x00029a2a                Timer_NEC::setValidEdgeCaptureTrigTIxn1(Timer_NEC::ValidEdgeCaptureTrigTIxn1, bool)
                0x00029e14                Timer_NEC_P::Timer_NEC_P(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x000299da                Timer_NEC::setTxnOE0(Timer_NEC::TxnOE0, bool)
                0x0002a87c                Timer_NEC_P135::setFrequency(double, Timer_NEC::CCRn)
                0x0002a07c                Timer_NEC_P024::Timer_NEC_P024(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x0002b4be                Timer_NEC_Q::setCCR2(unsigned short, bool, bool)
                0x0002993a                Timer_NEC::setTxnOE1(Timer_NEC::TxnOE1, bool)
                0x0002b550                Timer_NEC_Q::setCCR3(unsigned short, bool, bool)
                0x0002998a                Timer_NEC::setTxnOL0(Timer_NEC::TxnOL0, bool)
                0x0002b686                Timer_NEC_Q::setCCIC1_interrupt(bool, unsigned char)
                0x0002b42c                Timer_NEC_Q::setCCR1(unsigned short, bool, bool)
                0x00029d76                Timer_NEC::setCCR(Timer_NEC::CCRn, unsigned short)
                0x0002975a                Timer_NEC::setTxnEST(Timer_NEC::TxnEST, bool)
                0x0002a4d6                Timer_NEC_P024::calculateFrequency(Timer_NEC::CCRn)
                0x0002a0ec                Timer_NEC_P024::setEnable(bool)
                0x000298ea                Timer_NEC::setTxnOL1(Timer_NEC::TxnOL1, bool)
                0x0002b39a                Timer_NEC_Q::setCCR0(unsigned short, bool, bool)
                0x00029c92                Timer_NEC::setTxnCCR0_selection(Timer_NEC::TxnCCR0_selection, bool)
                0x0002b634                Timer_NEC_Q::setCCIC0_interrupt(bool, unsigned char)
                0x00029736                Timer_NEC::Timer_NEC(NEC_timer_Generic_t volatile*)
                0x0002ba5c                Timer_NEC_Q::setFrequency(double, Timer_NEC::CCRn)
                0x00029bbc                Timer_NEC::setValidEdgeExtCountTIxn0(Timer_NEC::ValidEdgeExtCountTIxn0, bool)
                0x0002b072                Timer_NEC_Q::setEnable(bool)
                0x0002b72a                Timer_NEC_Q::setCCIC3_interrupt(bool, unsigned char)
                0x0002b94a                Timer_NEC_Q::calculateFrequency(Timer_NEC::CCRn)
                0x00029e78                Timer_NEC_P::Timer_NEC_P(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x000297aa                Timer_NEC::setTxnEEE(Timer_NEC::TxnEEE, bool)
                0x00029f36                Timer_NEC_P::setCCR0(unsigned short, bool, bool)
                0x0002af98                Timer_NEC_Q::Timer_NEC_Q(NEC_timerQ_t volatile*, NEC_timerQ_Int_t volatile*)
                0x0002ae38                Timer_NEC_P135::setCCR0(unsigned short, bool, bool)
                0x0002b6d8                Timer_NEC_Q::setCCIC2_interrupt(bool, unsigned char)
                0x00029ab0                Timer_NEC::setValidEdgeCaptureTrigTIxn0(Timer_NEC::ValidEdgeCaptureTrigTIxn0, bool)
                0x0002a02a                Timer_NEC_P::setCCIC1_interrupt(bool, unsigned char)
                0x0002a7d8                Timer_NEC_P135::Timer_NEC_P135(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x0002a6dc                Timer_NEC_P024::setCCR0(unsigned short, bool, bool)
                0x0002ad44                Timer_NEC_P135::setPrescaler(Timer_NEC_P135::Prescalers, bool)
                0x0002b0a6                Timer_NEC_Q::setTxnOL2(Timer_NEC::TxnOL2, bool)
                0x00029fd8                Timer_NEC_P::setCCIC0_interrupt(bool, unsigned char)
                0x0002affc                Timer_NEC_Q::setPeriod(double, Timer_NEC::CCRn)
                0x00029ce2                Timer_NEC::getCCR(Timer_NEC::CCRn)
                0x0002a810                Timer_NEC_P135::Timer_NEC_P135(NEC_timerP_t volatile*, NEC_timerP_Int_t volatile*)
                0x0002a848                Timer_NEC_P135::setEnable(bool)
                0x0002af34                Timer_NEC_Q::Timer_NEC_Q(NEC_timerQ_t volatile*, NEC_timerQ_Int_t volatile*)
                0x0002b2f8                Timer_NEC_Q::setTxnCCR2_selection(Timer_NEC::TxnCCR2_selection, bool)
                0x0002b1e8                Timer_NEC_Q::setValidEdgeCaptureTrigTIxn2(Timer_NEC::ValidEdgeCaptureTrigTIxn2, bool)
                0x0002b5e2                Timer_NEC_Q::setOVIC_interrupt(bool, unsigned char)
                0x00029c42                Timer_NEC::setTxnCCR1_selection(Timer_NEC::TxnCCR1_selection, bool)
                0x0002b348                Timer_NEC_Q::setTxnCCR3_selection(Timer_NEC::TxnCCR3_selection, bool)
                0x0002aeb6                Timer_NEC_P135::setCCR1(unsigned short, bool, bool)
                0x00029f86                Timer_NEC_P::setOVIC_interrupt(bool, unsigned char)
                0x00029f5e                Timer_NEC_P::setCCR1(unsigned short, bool, bool)
 .text          0x0002bf88      0x194 obj/PWMABSTRACT.o
                0x0002bff0                pwmAbstract::setPwmTonDuty(unsigned short)
                0x0002c0f6                pwmAbstract::setPwmToffDuty(unsigned short)
                0x0002c016                pwmAbstract::pwmAbstract(TimerAbstract*)
                0x0002c086                pwmAbstract::pwmAbstract(TimerAbstract*)
                0x0002bf88                pwmAbstract::~pwmAbstract()
                0x0002bfca                pwmAbstract::setPwmPeriod(double)
                0x0002bfa4                pwmAbstract::setPwmFrq(double)
                0x0002bf96                pwmAbstract::~pwmAbstract()
 .text          0x0002c11c      0xd40 obj/PWM_NEC.o
                0x0002cdc8                NECpwmTimer::NECpwmTimer(Timer_NEC*, unsigned short)
                0x0002c2c0                NECpwMeasurentTimer::getTime(unsigned long)
                0x0002c3c0                NECpwMeasurentTimer::rstTimerOverflow()
                0x0002cbb8                NECpwmTimer::setPwmToffDuty(unsigned short)
                0x0002c8be                NECpwMeasurentTimer::pulseMeasureAvailableHigh()
                0x0002ca0e                NECpwMeasurentTimer::setMeasurementState(pwMeasurementAbstract::MeasurementState)
                0x0002c616                NECpwMeasurentTimer::getPulseMeasurement(pwMeasurementAbstract::PulseWidthMeasurement&)
                0x0002c3f0                NECpwMeasurentTimer::setTimeBase(unsigned long, pwMeasurementAbstract::TimeUnit)
                0x0002c8ca                NECpwMeasurentTimer::manager()
                0x0002c11c                NECpwmTimer::setPwmFrq(double)
                0x0002ca14                NECpwMeasurentTimer::NECpwMeasurentTimer(Timer_NEC*, Timer_NEC::CCRn)
                0x0002c270                NECpwmTimer::setPulseCountEnable(bool)
                0x0002c970                NECpwMeasurentTimer::pushCountLow(unsigned long)
                0x0002cc54                NECpwmTimer::setPwmTonDuty(unsigned short)
                0x0002c17a                NECpwmTimer::setPwmPeriod(double)
                0x0002c96c                NECpwMeasurentTimer::popCountLow(unsigned long&)
                0x0002cd34                NECpwmTimer::NECpwmTimer(Timer_NEC*, unsigned short)
                0x0002ccf0                NECpwmTimer::~NECpwmTimer()
                0x0002c2b2                NECpwMeasurentTimer::~NECpwMeasurentTimer()
                0x0002c8b2                NECpwMeasurentTimer::pulseMeasureAvailableLow()
                0x0002c1d8                NECpwmTimer::setEnable(bool, bool)
                0x0002c2a4                NECpwMeasurentTimer::~NECpwMeasurentTimer()
                0x0002c76a                NECpwMeasurentTimer::getPulseMeasurementLow(unsigned long&)
                0x0002ca08                NECpwMeasurentTimer::whatMeasuring()
                0x0002c3c6                NECpwMeasurentTimer::setEnable(bool)
                0x0002c804                NECpwMeasurentTimer::getPulseMeasurementHigh(unsigned long&)
                0x0002c89e                NECpwMeasurentTimer::pulseMeasureAvailable()
                0x0002cae6                NECpwMeasurentTimer::NECpwMeasurentTimer(Timer_NEC*, Timer_NEC::CCRn)
                0x0002cd12                NECpwmTimer::~NECpwmTimer()
                0x0002c8cc                NECpwMeasurentTimer::popCountHigh(unsigned long&)
                0x0002c8d0                NECpwMeasurentTimer::pushCountHigh(unsigned long)
 .text          0x0002ce5c      0xc50 obj/WTH.o
                0x0002d41c                WthMenfis::checkLimitSwitchesStatus()
                0x0002d410                WthMenfis::setLmtSwLowStatus(WthAbstract::LimitSwitchStatus)
                0x0002d780                WthMenfis::WthMenfis(pwmAbstract*, pwmAbstract*)
                0x0002ce6a                WthMenfis::~WthMenfis()
                0x0002ce78                WthMenfis::setLinearVelocity(double, bool)
                0x0002d416                WthMenfis::setLmtSwHighStatus(WthAbstract::LimitSwitchStatus)
                0x0002d874                WthMenfis::manger()
                0x0002cf9c                WthMenfis::setEnable(bool, bool)
                0x0002ce5c                WthMenfis::~WthMenfis()
                0x0002d2e6                WthMenfis::setStep(double)
                0x0002d284                WthMenfis::power(bool)
                0x0002d68c                WthMenfis::WthMenfis(pwmAbstract*, pwmAbstract*)
 .text          0x0002daac      0xb32 obj/IR_Toshiba_protocol.o
                0x0002dcf8                Toshiba_IR_protocol::dcdData_bit_hadler(pwMeasurementAbstract::PulseWidthMeasurement)
                0x0002db24                Toshiba_IR_protocol::Toshiba_IR_protocol(pwMeasurementAbstract*)
                0x0002dbaa                Toshiba_IR_protocol::~Toshiba_IR_protocol()
                0x0002dc2e                Toshiba_IR_protocol::pushError(IR_protocolAbstract::IR_protocolErrors)
                0x0002db9c                Toshiba_IR_protocol::~Toshiba_IR_protocol()
                0x0002df16                Toshiba_IR_protocol::pushData(IR_protocolAbstract::IR_data_t)
                0x0002e440                Toshiba_IR_protocol::manager()
                0x0002dbb8                Toshiba_IR_protocol::decodeBit(pwMeasurementAbstract::PulseWidthMeasurement)
                0x0002dd40                Toshiba_IR_protocol::IRd_waitingStx_handler()
                0x0002dbe4                Toshiba_IR_protocol::pop_IR_Data(IR_protocolAbstract::IR_data_t&)
                0x0002daac                Toshiba_IR_protocol::Toshiba_IR_protocol(pwMeasurementAbstract*)
                0x0002df86                Toshiba_IR_protocol::IRd_decodingData_handler()
                0x0002e34a                Toshiba_IR_protocol::IRd_waitingEtx_handler()
                0x0002dcb6                Toshiba_IR_protocol::bitError()
 .text          0x0002e5de      0xb2a obj/IR_RC5_Standard_protocol.o
                0x0002ea72                RC5_Standard_IR_protocol::IRd_waitingStx_handler()
                0x0002e5de                RC5_Standard_IR_protocol::RC5_Standard_IR_protocol(pwMeasurementAbstract*)
                0x0002ea14                RC5_Standard_IR_protocol::dcdData_bit_hadler()
                0x0002e6ee                RC5_Standard_IR_protocol::~RC5_Standard_IR_protocol()
                0x0002ef18                RC5_Standard_IR_protocol::manager()
                0x0002edf8                RC5_Standard_IR_protocol::IRd_decodingData_handler()
                0x0002e70a                RC5_Standard_IR_protocol::decodeBit()
                0x0002e6fc                RC5_Standard_IR_protocol::~RC5_Standard_IR_protocol()
                0x0002e666                RC5_Standard_IR_protocol::RC5_Standard_IR_protocol(pwMeasurementAbstract*)
                0x0002e8ea                RC5_Standard_IR_protocol::pop_IR_Data(IR_protocolAbstract::IR_data_t&)
                0x0002e934                RC5_Standard_IR_protocol::pushError(IR_protocolAbstract::IR_protocolErrors)
                0x0002ed88                RC5_Standard_IR_protocol::pushData(IR_protocolAbstract::IR_data_t)
                0x0002e9bc                RC5_Standard_IR_protocol::bitError()
 .text          0x0002f108      0xa38 obj/IR_remote.o
                0x0002f2ca                IR_Key::IR_Key()
                0x0002f43c                IR_Remote::manager()
                0x0002f164                IR_Key::setCountinuousReading(bool, int)
                0x0002f1ae                IR_Key::setKeyState(KeyAbstract::keyStates)
                0x0002f68a                IR_Remote::~IR_Remote()
                0x0002f108                IR_Key::~IR_Key()
                0x0002f9a2                IR_Key::manager()
                0x0002f210                IR_Key::IR_Key()
                0x0002f3c0                IR_Key::push(KeyAbstract::keyReadingValues)
                0x0002f384                IR_Key::pop(KeyAbstract::keyReadingValues&)
                0x0002f124                IR_Key::setEnable(bool, int)
                0x0002f7da                IR_Remote::IR_Remote(int, IR_protocolAbstract*)
                0x0002f8be                IR_Remote::IR_Remote(int, IR_protocolAbstract*)
                0x0002f116                IR_Key::~IR_Key()
                0x0002f732                IR_Remote::~IR_Remote()
 .text          0x0002fb40      0x168 obj/SPI_ABSTRACT.o
                0x0002fb80                SPI_Abstract::setCommunicationType(SPI_Abstract::CommunicationType, bool)
                0x0002fbc0                SPI_Abstract::setBitTransferLenght(SPI_Abstract::BitTransferLenght, bool)
                0x0002fb60                SPI_Abstract::setTransferModeSpecification(SPI_Abstract::TransferModeSpecification, bool)
                0x0002fba0                SPI_Abstract::setCommunicationClock(SPI_Abstract::CommunicationClock, bool)
                0x0002fbe0                SPI_Abstract::SPI_Abstract()
                0x0002fc44                SPI_Abstract::SPI_Abstract()
                0x0002fb40                SPI_Abstract::setTransferModeDirection(SPI_Abstract::TransferModeDirection, bool)
 .text          0x0002fca8      0xa34 obj/SPI_NEC.o
                0x000301ce                SPI_NEC::setCommunicationClock(SPI_Abstract::CommunicationClock, bool)
                0x0002fca8                SPI_NEC::setPowerEnable(bool)
                0x0002fe88                SPI_Interrupt_NEC::rx_getc(unsigned char&)
                0x000304fc                SPI_NEC::SPI_NEC(spi_nec_t volatile*)
                0x0002fde2                SPI_Interrupt_NEC::setRxInterrupt(bool, unsigned char)
                0x0002fd0e                SPI_NEC::setReceptionEnable(bool)
                0x0003001c                SPI_Interrupt_NEC::tx_write(unsigned char*, int)
                0x00030388                SPI_NEC::setTransferModeSpecification(SPI_Abstract::TransferModeSpecification, bool)
                0x0002fe34                SPI_Interrupt_NEC::tx_getc_isr()
                0x00030588                SPI_Interrupt_NEC::SPI_Interrupt_NEC(spi_nec_t volatile*, unsigned char volatile*, unsigned char volatile*, int, int)
                0x0002ff26                SPI_Interrupt_NEC::busy()
                0x0002ffd0                SPI_Interrupt_NEC::rx_read(unsigned char*, int)
                0x00030470                SPI_NEC::SPI_NEC(spi_nec_t volatile*)
                0x0002fcdc                SPI_NEC::setTransmissionEnable(bool)
                0x0002fd5a                SPI_Poller_NEC::getc(unsigned short)
                0x0002fedc                SPI_Interrupt_NEC::startTrasmission()
                0x000302e8                SPI_NEC::setCommunicationType(SPI_Abstract::CommunicationType, bool)
                0x0002fd80                SPI_Poller_NEC::busy()
                0x00030086                SPI_NEC::setBitTransferLenght(SPI_Abstract::BitTransferLenght, bool)
                0x0002ff62                SPI_Interrupt_NEC::tx_putc(unsigned char)
                0x00030632                SPI_Interrupt_NEC::SPI_Interrupt_NEC(spi_nec_t volatile*, unsigned char volatile*, unsigned char volatile*, int, int)
                0x0002fd40                SPI_Poller_NEC::putc(unsigned short)
                0x0002fe68                SPI_Interrupt_NEC::tx_isempty_isr()
                0x000303fc                SPI_NEC::setTransferModeDirection(SPI_Abstract::TransferModeDirection, bool)
                0x0002fd90                SPI_Interrupt_NEC::setTxInterrupt(bool, unsigned char)
                0x0002ff36                SPI_Interrupt_NEC::rx_putc_isr(unsigned char)
 .text          0x000306dc      0x84e obj/TMC262_DRV.o
                0x00030ee4                TMC262_StepperDriver::read_DRVSTARTUS(TMC262_StepperDriver::DRVCONF_ValueToRead)
                0x00030bdc                TMC262_StepperDriver::write_DRVCTRL()
                0x000306dc                TMC262_StepperDriver::Init()
                0x00030b4a                TMC262_StepperDriver::write_DRVCONF()
                0x00030c9a                TMC262_StepperDriver::write_CHOPCONF()
                0x00030da4                TMC262_StepperDriver::write_SMARTEN()
                0x00030a98                TMC262_StepperDriver::decodeDRVSTATUS(unsigned long)
                0x000307ae                TMC262_StepperDriver::setEnable(bool)
                0x000307b4                TMC262_StepperDriver::TMC262_StepperDriver(SPI_Abstract*)
                0x000308b2                TMC262_StepperDriver::TMC262_StepperDriver(SPI_Abstract*)
                0x000309b0                TMC262_StepperDriver::transmitData(unsigned long)
                0x00030e1c                TMC262_StepperDriver::write_SGSFCONF()
                0x00030e7c                TMC262_StepperDriver::manager()
 .text          0x00030f2a      0xc8e obj/WTP.o
                0x00030f2a                WtpMenfis::driverInit()
                0x00031070                WtpMenfis::accRampInitialParameters()
                0x00031a08                WtpMenfis::setEnable(bool)
                0x00031b00                WtpMenfis::manager()
                0x0003113c                WtpMenfis::accelerationRamp()
                0x0003174a                WtpMenfis::setVelocityPulse(unsigned long)
                0x000313c0                WtpMenfis::WtpMenfis(pwmAbstract*, TMC262_StepperDriver*, Timer_NEC*)
                0x000311ea                WtpMenfis::readCalibrationValue()
                0x0003104e                WtpMenfis::power(bool)
                0x00031800                WtpMenfis::setVelocity(double, bool)
                0x000316b0                WtpMenfis::writeCalibrationValue(wtpCalibration_t*)
                0x00031538                WtpMenfis::WtpMenfis(pwmAbstract*, TMC262_StepperDriver*, Timer_NEC*)
 .text          0x00031bb8      0x6e4 obj/SSPIE_HARDWARE.o
                0x00031bd0                wait(int)
                0x00031bbc                SPI_final()
                0x00031c0a                TRANS_starttranx(unsigned char)
                0x00032266                dbgu_putint(int, int)
                0x00031c50                TRANS_cstoggle(unsigned char)
                0x00031c20                TRANS_endtranx()
                0x00031e5c                TRANS_transceive_stream(int, unsigned char*, int, int, unsigned char*, int, unsigned char*)
                0x00031c34                TRANS_runClk()
                0x00031d64                TRANS_receiveBytes(unsigned char*, int)
                0x00031bb8                dbgu_init()
                0x00031c76                TRANS_transmitBytes(unsigned char*, int)
                0x0003224e                SPI_init()
 .text          0x0003229c     0x15be obj/SSPIE_CORE.o
                0x00032460                SSPIEm_process(unsigned char*, unsigned int)
                0x0003229c                getCurrentChannel()
                0x000322e8                VME_getNumber(unsigned char*, unsigned int, unsigned int*, unsigned int*)
                0x000323b2                proc_HCOMMENT(unsigned char*, unsigned int, unsigned int*, checksum*)
                0x000322a6                VME_getByte(unsigned char*, unsigned char*, unsigned int, unsigned int*)
                0x000327b8                proc_LOOP(unsigned char*, unsigned int, unsigned int*, unsigned int)
                0x0003331c                SSPIEm_init(unsigned int)
                0x00032bc4                proc_TRANS(unsigned char*, unsigned int, unsigned int*, unsigned char, unsigned char)
                0x000329ba                proc_REPEAT(unsigned char*, unsigned int, unsigned int*, unsigned int)
 .text          0x0003385a      0xdea obj/SSPIE_INTRFACE.o
                0x0003397e                get_compression()
                0x00033974                set_compression(unsigned char)
                0x00033988                dataGetByte(unsigned char*, short, checksum*)
                0x00033890                algoInit()
                0x0003385a                algoPreset(unsigned char*, unsigned int)
                0x00033c1e                dataLoadTOC(short)
                0x000338f8                algoFinal()
                0x000338b8                algoGetByte(unsigned char*)
                0x00033914                dataPreset(unsigned char*, unsigned int)
                0x0003396a                getRequestNewData()
                0x00033e38                dataReadthroughComment()
                0x0003394e                dataFinal()
                0x00033a54                decomp_getByte(unsigned char*)
                0x00033f88                dataRequestSet(unsigned char)
                0x0003413e                HLDataGetByte(unsigned char, unsigned char*, unsigned int)
                0x00033ec4                dataReset(unsigned char)
                0x000344f0                dataInit()
                0x00033b70                decomp_initFrame(int)
                0x00033a12                decomp_getNum()
 .text          0x00034644      0x2cc obj/SSPIE_MAIN.o
                0x000347d6                SSPIE_main()
                0x00034644                printError(int)
 .text          0x00034910       0x58 obj/SSPIE_SSPIEm.o
                0x00034932                SSPIEm_preset(unsigned char*, unsigned int, unsigned char*, unsigned int)
                0x00034910                SSPIEm(unsigned int)
 .text          0x00034968      0x152 obj/SSPIE_UTIL.o
                0x000349ac                setMessage(int, char const*)
                0x00034976                getCheckSum(checksum*)
                0x00034a5c                print_out_string(char const*)
                0x0003498e                putChunk(checksum*, unsigned int)
                0x00034968                init_CS(checksum*, short, short)
 .text          0x00034aba      0x630 obj/ADuCSETTING.o
                0x00034c48                ADuCsetting::checkSettingConsistency_DAC()
                0x00034b90                ADuCsetting::Init_DAC()
                0x00034abe                ADuCsetting::Init_ADC()
                0x00034c12                ADuCsetting::ADuCsetting()
                0x00034bb6                ADuCsetting::Init_PWM()
                0x00034c8a                ADuCsetting::get_ADC_P_NumBytesToSend()
                0x00034cce                ADuCsetting::checkSettingConsistency_ADC()
                0x00034be0                ADuCsetting::ADuCsetting()
                0x00034c44                ADuCsetting::checkSettingConsistency_IEXC()
                0x00034b7a                ADuCsetting::Init_IEXC()
                0x000350a2                ADuCsetting::checkSettingConsistency()
                0x00034abc                ADuCsetting::~ADuCsetting()
                0x00034cac                ADuCsetting::get_ADC_A_NumBytesToSend()
                0x00034c86                ADuCsetting::checkSettingConsistency_PWM()
                0x00034aba                ADuCsetting::~ADuCsetting()
 .text          0x000350ea       0x20 c:\gcc850\lib\libc.a(lib_a-atoi.o)
                0x000350fa                _atoi
                0x000350ea                __atoi_r
 .text          0x0003510a       0x14 c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
                0x0003510a                _isxdigit
 .text          0x0003511e       0x20 c:\gcc850\lib\libc.a(lib_a-memcpy.o)
                0x0003511e                _memcpy
 .text          0x0003513e       0x38 c:\gcc850\lib\libc.a(lib_a-strcat.o)
                0x0003513e                _strcat
 .text          0x00035176       0x34 c:\gcc850\lib\libc.a(lib_a-strcmp.o)
                0x00035176                _strcmp
 .text          0x000351aa       0x20 c:\gcc850\lib\libc.a(lib_a-strcpy.o)
                0x000351aa                _strcpy
 .text          0x000351ca       0x1a c:\gcc850\lib\libc.a(lib_a-strlen.o)
                0x000351ca                _strlen
 .text          0x000351e4       0x4e c:\gcc850\lib\libc.a(lib_a-strncpy.o)
                0x000351e4                _strncpy
 .text          0x00035232      0x226 c:\gcc850\lib\libc.a(lib_a-strtol.o)
                0x0003543e                _strtol
                0x00035232                __strtol_r
 .text          0x00035458       0x18 c:\gcc850\lib\libc.a(lib_a-toupper.o)
                0x00035458                _toupper
 .text          0x00035470        0x0 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
 .text          0x00035470        0x0 c:\gcc850\lib\libc.a(lib_a-impure.o)
 .text          0x00035470       0x3e c:\gcc850\lib\libgcc.a(_mulsi3.o)
                0x00035470                ___mulsi3
 .text          0x000354ae       0x32 c:\gcc850\lib\libgcc.a(_divsi3.o)
                0x000354ae                ___divsi3
 .text          0x000354e0       0x36 c:\gcc850\lib\libgcc.a(_udivsi3.o)
                0x000354e0                ___udivsi3
 .text          0x00035516       0x2a c:\gcc850\lib\libgcc.a(_modsi3.o)
                0x00035516                ___modsi3
 .text          0x00035540       0x2a c:\gcc850\lib\libgcc.a(_umodsi3.o)
                0x00035540                ___umodsi3
 *fill*         0x0003556a        0x2 00
 .text          0x0003556c       0x18 c:\gcc850\lib\libgcc.a(_save_31c.o)
                0x00035578                __return_r31
                0x0003556c                __save_r31
 .text          0x00035584       0x36 c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
                0x00035584                ___fixunssfsi
 .text          0x000355ba      0x25e c:\gcc850\lib\libgcc.a(_addsub_sf.o)
                0x00035760                ___subsf3
                0x000357c2                ___addsf3
 .text          0x00035818      0x174 c:\gcc850\lib\libgcc.a(_mul_sf.o)
                0x00035818                ___mulsf3
 .text          0x0003598c      0x11c c:\gcc850\lib\libgcc.a(_div_sf.o)
                0x0003598c                ___divsf3
 .text          0x00035aa8       0x66 c:\gcc850\lib\libgcc.a(_ne_sf.o)
                0x00035aa8                ___nesf2
 .text          0x00035b0e       0x60 c:\gcc850\lib\libgcc.a(_gt_sf.o)
                0x00035b0e                ___gtsf2
 .text          0x00035b6e       0x60 c:\gcc850\lib\libgcc.a(_ge_sf.o)
                0x00035b6e                ___gesf2
 .text          0x00035bce       0x66 c:\gcc850\lib\libgcc.a(_lt_sf.o)
                0x00035bce                ___ltsf2
 .text          0x00035c34       0x66 c:\gcc850\lib\libgcc.a(_le_sf.o)
                0x00035c34                ___lesf2
 .text          0x00035c9a       0x70 c:\gcc850\lib\libgcc.a(_si_to_sf.o)
                0x00035c9a                ___floatsisf
 .text          0x00035d0a       0x82 c:\gcc850\lib\libgcc.a(_sf_to_si.o)
                0x00035d0a                ___fixsfsi
 .text          0x00035d8c        0x0 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
 .text          0x00035d8c       0x7a c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
                0x00035d8c                ___floatunsisf
 *fill*         0x00035e06        0x2 00
 .text          0x00035e08       0x38 c:\gcc850\lib\libgcc.a(_save_26c.o)
                0x00035e24                __return_r26_r31
                0x00035e08                __save_r26_r31
 .text          0x00035e40       0x30 c:\gcc850\lib\libgcc.a(_save_27c.o)
                0x00035e40                __save_r27_r31
                0x00035e58                __return_r27_r31
 .text          0x00035e70       0x28 c:\gcc850\lib\libgcc.a(_save_28c.o)
                0x00035e70                __save_r28_r31
                0x00035e84                __return_r28_r31
 .text          0x00035e98       0xde c:\gcc850\lib\libgcc.a(_muldi3.o)
                0x00035e98                ___muldi3
 .text          0x00035f76       0x58 c:\gcc850\lib\libgcc.a(_clzsi2.o)
                0x00035f76                ___clzsi2
 .text          0x00035fce      0x118 c:\gcc850\lib\libgcc.a(_pack_sf.o)
                0x00035fce                ___pack_f
 .text          0x000360e6       0xaa c:\gcc850\lib\libgcc.a(_unpack_sf.o)
                0x000360e6                ___unpack_f
 .text          0x00036190       0x8c c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
                0x00036190                ___fpcmp_parts_f
 .text          0x0003621c        0x0 c:\gcc850\lib\libgcc.a(_clz.o)
                0x00036220                . = ALIGN (0x10)
 *fill*         0x0003621c        0x4 00
 *(.call_table_text)
 *(.gnu.warning)
 *(.gnu.linkonce.t*)
 .gnu.linkonce.t._ZN9HwChannelIsLi40EE13physicalValueEs
                0x00036220       0x3a obj/main.o
                0x00036220                HwChannel<short, 40>::physicalValue(short)
 .gnu.linkonce.t._ZN9HwChannelIlLi4EE13physicalValueEl
                0x0003625a       0x36 obj/main.o
                0x0003625a                HwChannel<long, 4>::physicalValue(long)
 .gnu.linkonce.t._ZN16PrsHwChanManagerIsLi40EE14getChannelTypeEv
                0x00036290        0xe obj/main.o
                0x00036290                PrsHwChanManager<short, 40>::getChannelType()
 .gnu.linkonce.t._ZN13HwChanManagerIsLi40EE14getChannelTypeEv
                0x0003629e        0x4 obj/main.o
                0x0003629e                HwChanManager<short, 40>::getChannelType()
 .gnu.linkonce.t._ZN13HwChanManagerIlLi4EE14getChannelTypeEv
                0x000362a2        0x4 obj/main.o
                0x000362a2                HwChanManager<long, 4>::getChannelType()
 .gnu.linkonce.t._ZN6StringD0Ev
                0x000362a6       0x4e obj/STRCLASS.o
                0x000362a6                String::~String()
 .gnu.linkonce.t._ZN6StringD1Ev
                0x000362f4       0x26 obj/STRCLASS.o
                0x000362f4                String::~String()
 .gnu.linkonce.t._ZN16KeyboardAbstract7managerEv
                0x0003631a        0x2 obj/KEYABSTRACT.o
                0x0003631a                KeyboardAbstract::manager()
 .gnu.linkonce.t._ZN16KeyboardAbstract13getKeysNumberEv
                0x0003631c        0x6 obj/KEYABSTRACT.o
                0x0003631c                KeyboardAbstract::getKeysNumber()
 .gnu.linkonce.t._ZN11KeyAbstract9setEnableEbi
                0x00036322        0xa obj/KEYBOARD.o
                0x00036322                KeyAbstract::setEnable(bool, int)
 .gnu.linkonce.t._ZN11KeyAbstract11getReadTimeEv
                0x0003632c        0x6 obj/KEYBOARD.o
                0x0003632c                KeyAbstract::getReadTime()
 .gnu.linkonce.t._ZN11KeyAbstract11setReadTimeEi
                0x00036332        0x6 obj/KEYBOARD.o
                0x00036332                KeyAbstract::setReadTime(int)
 .gnu.linkonce.t._ZN11KeyAbstract8isEnableEv
                0x00036338        0x6 obj/KEYBOARD.o
                0x00036338                KeyAbstract::isEnable()
 .gnu.linkonce.t._ZN11KeyAbstract13setBeepEnableEb
                0x0003633e        0x6 obj/KEYBOARD.o
                0x0003633e                KeyAbstract::setBeepEnable(bool)
 .gnu.linkonce.t._ZN11KeyAbstract12beepIsEnableEv
                0x00036344        0x6 obj/KEYBOARD.o
                0x00036344                KeyAbstract::beepIsEnable()
 .gnu.linkonce.t._ZN11KeyAbstract21setCountinuousReadingEbi
                0x0003634a       0x10 obj/KEYBOARD.o
                0x0003634a                KeyAbstract::setCountinuousReading(bool, int)
 .gnu.linkonce.t._ZN11KeyAbstract25continuousReadingIsEnableEv
                0x0003635a        0x6 obj/KEYBOARD.o
                0x0003635a                KeyAbstract::continuousReadingIsEnable()
 .gnu.linkonce.t._ZN11KeyAbstract21continuousReadingTimeEv
                0x00036360        0x6 obj/KEYBOARD.o
                0x00036360                KeyAbstract::continuousReadingTime()
 .gnu.linkonce.t._ZN11KeyAbstract12setKeyNumberEi
                0x00036366        0x6 obj/KEYBOARD.o
                0x00036366                KeyAbstract::setKeyNumber(int)
 .gnu.linkonce.t._ZN11KeyAbstract9keyNumberEv
                0x0003636c        0x6 obj/KEYBOARD.o
                0x0003636c                KeyAbstract::keyNumber()
 .gnu.linkonce.t._ZN11KeyAbstract8keyStateEv
                0x00036372        0x6 obj/KEYBOARD.o
                0x00036372                KeyAbstract::keyState()
 .gnu.linkonce.t._ZN11KeyAbstract11setKeyStateENS_9keyStatesE
                0x00036378        0x6 obj/KEYBOARD.o
                0x00036378                KeyAbstract::setKeyState(KeyAbstract::keyStates)
 .gnu.linkonce.t._ZN11KeyAbstract3popERNS_16keyReadingValuesE
                0x0003637e        0x4 obj/KEYBOARD.o
                0x0003637e                KeyAbstract::pop(KeyAbstract::keyReadingValues&)
 .gnu.linkonce.t._ZN11KeyAbstract4pushENS_16keyReadingValuesE
                0x00036382        0x4 obj/KEYBOARD.o
                0x00036382                KeyAbstract::push(KeyAbstract::keyReadingValues)
 .gnu.linkonce.t._ZN11KeyAbstract5clearEv
                0x00036386       0x1a obj/KEYBOARD.o
                0x00036386                KeyAbstract::clear()
 .gnu.linkonce.t._ZN11KeyAbstract7managerEv
                0x000363a0        0x2 obj/KEYBOARD.o
                0x000363a0                KeyAbstract::manager()
 .gnu.linkonce.t._ZN11AdcAbstract8setPowerEb
                0x000363a2        0x6 obj/ADCABSTRACT.o
                0x000363a2                AdcAbstract::setPower(bool)
 .gnu.linkonce.t._ZN11AdcAbstract9isPoweredEv
                0x000363a8        0x6 obj/ADCABSTRACT.o
                0x000363a8                AdcAbstract::isPowered()
 .gnu.linkonce.t._ZN11AdcAbstract9setEnableEb
                0x000363ae        0x6 obj/ADCABSTRACT.o
                0x000363ae                AdcAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN11AdcAbstract8isEnableEv
                0x000363b4        0x6 obj/ADCABSTRACT.o
                0x000363b4                AdcAbstract::isEnable()
 .gnu.linkonce.t._ZN7Adc_NEC9isPoweredEv
                0x000363ba        0x6 obj/ADC_NEC.o
                0x000363ba                Adc_NEC::isPowered()
 .gnu.linkonce.t._ZN7Adc_NEC8isEnableEv
                0x000363c0        0x6 obj/ADC_NEC.o
                0x000363c0                Adc_NEC::isEnable()
 .gnu.linkonce.t._ZN9HwChannelItLi16EE13physicalValueEt
                0x000363c6       0x3a obj/ADC_SAU7000.o
                0x000363c6                HwChannel<unsigned short, 16>::physicalValue(unsigned short)
 .gnu.linkonce.t._ZN9HwChannelItLi5EE13physicalValueEt
                0x00036400       0x3a obj/ADC_SAU7000.o
                0x00036400                HwChannel<unsigned short, 5>::physicalValue(unsigned short)
 .gnu.linkonce.t._ZN20CurrentHwChanManagerItLi16EE14getChannelTypeEv
                0x0003643a        0xe obj/ADC_SAU7000.o
                0x0003643a                CurrentHwChanManager<unsigned short, 16>::getChannelType()
 .gnu.linkonce.t._ZN20VoltageHwChanManagerItLi16EE14getChannelTypeEv
                0x00036448        0xe obj/ADC_SAU7000.o
                0x00036448                VoltageHwChanManager<unsigned short, 16>::getChannelType()
 .gnu.linkonce.t._ZN13HwChanManagerItLi16EE14getChannelTypeEv
                0x00036456        0x4 obj/ADC_SAU7000.o
                0x00036456                HwChanManager<unsigned short, 16>::getChannelType()
 .gnu.linkonce.t._ZN20CurrentHwChanManagerItLi5EE14getChannelTypeEv
                0x0003645a        0xe obj/ADC_SAU7000.o
                0x0003645a                CurrentHwChanManager<unsigned short, 5>::getChannelType()
 .gnu.linkonce.t._ZN20VoltageHwChanManagerItLi5EE14getChannelTypeEv
                0x00036468        0xe obj/ADC_SAU7000.o
                0x00036468                VoltageHwChanManager<unsigned short, 5>::getChannelType()
 .gnu.linkonce.t._ZN13HwChanManagerItLi5EE14getChannelTypeEv
                0x00036476        0x4 obj/ADC_SAU7000.o
                0x00036476                HwChanManager<unsigned short, 5>::getChannelType()
 .gnu.linkonce.t._ZN18UartDeviceAbstract6TurnOnEv
                0x0003647a        0x8 obj/UARTABSTRACT.o
                0x0003647a                UartDeviceAbstract::TurnOn()
 .gnu.linkonce.t._ZN18UartDeviceAbstract7TurnOffEv
                0x00036482        0x6 obj/UARTABSTRACT.o
                0x00036482                UartDeviceAbstract::TurnOff()
 .gnu.linkonce.t._ZN18UartDeviceAbstract6HwInitEv
                0x00036488        0x8 obj/UARTABSTRACT.o
                0x00036488                UartDeviceAbstract::HwInit()
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction7sendMsgEi
                0x00036490        0x4 obj/PROTOCOLSTDUART.o
                0x00036490                stdUartProtocolAbstraction::sendMsg(int)
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction6getMsgEv
                0x00036494        0x4 obj/PROTOCOLSTDUART.o
                0x00036494                stdUartProtocolAbstraction::getMsg()
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction6TurnOnEv
                0x00036498       0x2a obj/PROTOCOLSTDUART.o
                0x00036498                stdUartProtocolAbstraction::TurnOn()
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction7TurnOffEv
                0x000364c2       0x2a obj/PROTOCOLSTDUART.o
                0x000364c2                stdUartProtocolAbstraction::TurnOff()
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x000364ec       0x28 obj/PROTOCOLSTDUART.o
                0x000364ec                stdUartProtocolAbstraction::SetBaudRate(UartDeviceAbstract::UARTBaudRate)
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction20ClearReceptionBufferEv
                0x00036514       0x1a obj/PROTOCOLSTDUART.o
                0x00036514                stdUartProtocolAbstraction::ClearReceptionBuffer()
 .gnu.linkonce.t._ZN26stdUartProtocolAbstraction23ClearTransmissionBufferEv
                0x0003652e       0x1a obj/PROTOCOLSTDUART.o
                0x0003652e                stdUartProtocolAbstraction::ClearTransmissionBuffer()
 .gnu.linkonce.t._ZN13SauPcProtocol6TurnOnEv
                0x00036548       0x2a obj/PROTOCOLSAUANDPC.o
                0x00036548                SauPcProtocol::TurnOn()
 .gnu.linkonce.t._ZN13SauPcProtocol7TurnOffEv
                0x00036572       0x2a obj/PROTOCOLSAUANDPC.o
                0x00036572                SauPcProtocol::TurnOff()
 .gnu.linkonce.t._ZN13SauPcProtocol13setUartDeviceEP18UartDeviceAbstract
                0x0003659c        0x6 obj/PROTOCOLSAUANDPC.o
                0x0003659c                SauPcProtocol::setUartDevice(UartDeviceAbstract*)
 .gnu.linkonce.t._ZN13SauPcProtocol11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x000365a2       0x28 obj/PROTOCOLSAUANDPC.o
                0x000365a2                SauPcProtocol::SetBaudRate(UartDeviceAbstract::UARTBaudRate)
 .gnu.linkonce.t._ZN13SauPcProtocol11SetHwFlwCtlEN18UartDeviceAbstract12UARThwFlwCntE
                0x000365ca       0x2c obj/PROTOCOLSAUANDPC.o
                0x000365ca                SauPcProtocol::SetHwFlwCtl(UartDeviceAbstract::UARThwFlwCnt)
 .gnu.linkonce.t._ZN11uC_Protocol6TurnOnEv
                0x000365f6       0x2a obj/PROTOCOL_uC.o
                0x000365f6                uC_Protocol::TurnOn()
 .gnu.linkonce.t._ZN11uC_Protocol7TurnOffEv
                0x00036620       0x2a obj/PROTOCOL_uC.o
                0x00036620                uC_Protocol::TurnOff()
 .gnu.linkonce.t._ZN11uC_Protocol30acquisitionStartedPackedDecodeEv
                0x0003664a        0x4 obj/PROTOCOL_uC.o
                0x0003664a                uC_Protocol::acquisitionStartedPackedDecode()
 .gnu.linkonce.t._ZN11uC_Protocol22samplePacket_01_decodeEv
                0x0003664e        0x4 obj/PROTOCOL_uC.o
                0x0003664e                uC_Protocol::samplePacket_01_decode()
 .gnu.linkonce.t._ZN11uC_Protocol22samplePacket_02_decodeEv
                0x00036652        0x4 obj/PROTOCOL_uC.o
                0x00036652                uC_Protocol::samplePacket_02_decode()
 .gnu.linkonce.t._ZN11uC_Protocol22samplePacket_03_decodeEv
                0x00036656        0x4 obj/PROTOCOL_uC.o
                0x00036656                uC_Protocol::samplePacket_03_decode()
 .gnu.linkonce.t._ZN11uC_Protocol21packetLost_01_handlerEv
                0x0003665a        0x4 obj/PROTOCOL_uC.o
                0x0003665a                uC_Protocol::packetLost_01_handler()
 .gnu.linkonce.t._ZN11uC_Protocol21packetLost_02_handlerEv
                0x0003665e        0x4 obj/PROTOCOL_uC.o
                0x0003665e                uC_Protocol::packetLost_02_handler()
 .gnu.linkonce.t._ZN11uC_Protocol21packetLost_03_handlerEv
                0x00036662        0x4 obj/PROTOCOL_uC.o
                0x00036662                uC_Protocol::packetLost_03_handler()
 .gnu.linkonce.t._ZN11uC_Protocol18ADuCDefaultSettingEv
                0x00036666        0x2 obj/PROTOCOL_uC.o
                0x00036666                uC_Protocol::ADuCDefaultSetting()
 .gnu.linkonce.t._ZN18SauAndEmgzProtocol6TurnOnEv
                0x00036668       0x2a obj/PROTOCOLSAUANDEMGZ.o
                0x00036668                SauAndEmgzProtocol::TurnOn()
 .gnu.linkonce.t._ZN18SauAndEmgzProtocol7TurnOffEv
                0x00036692       0x2a obj/PROTOCOLSAUANDEMGZ.o
                0x00036692                SauAndEmgzProtocol::TurnOff()
 .gnu.linkonce.t._ZN18SauAndEmgzProtocol11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x000366bc       0x28 obj/PROTOCOLSAUANDEMGZ.o
                0x000366bc                SauAndEmgzProtocol::SetBaudRate(UartDeviceAbstract::UARTBaudRate)
 .gnu.linkonce.t._ZN18SauAndEmgzProtocol7managerEv
                0x000366e4      0x756 obj/PROTOCOLSAUANDEMGZ.o
                0x000366e4                SauAndEmgzProtocol::manager()
 .gnu.linkonce.t._ZN23iWRAP_BLUEGIGA_Protocol6TurnOnEv
                0x00036e3a       0x2a obj/iWRAP_BLUEGIGA.o
                0x00036e3a                iWRAP_BLUEGIGA_Protocol::TurnOn()
 .gnu.linkonce.t._ZN23iWRAP_BLUEGIGA_Protocol7TurnOffEv
                0x00036e64       0x2a obj/iWRAP_BLUEGIGA.o
                0x00036e64                iWRAP_BLUEGIGA_Protocol::TurnOff()
 .gnu.linkonce.t._ZN23iWRAP_BLUEGIGA_Protocol11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x00036e8e       0x28 obj/iWRAP_BLUEGIGA.o
                0x00036e8e                iWRAP_BLUEGIGA_Protocol::SetBaudRate(UartDeviceAbstract::UARTBaudRate)
 .gnu.linkonce.t._ZN18iWRAP_BLUEGIGA_SPP6TurnOnEv
                0x00036eb6       0x2a obj/iWRAP_BLUEGIGA_SPP.o
                0x00036eb6                iWRAP_BLUEGIGA_SPP::TurnOn()
 .gnu.linkonce.t._ZN18iWRAP_BLUEGIGA_SPP7TurnOffEv
                0x00036ee0       0x2a obj/iWRAP_BLUEGIGA_SPP.o
                0x00036ee0                iWRAP_BLUEGIGA_SPP::TurnOff()
 .gnu.linkonce.t._ZN18iWRAP_BLUEGIGA_SPP11SetBaudRateEN18UartDeviceAbstract12UARTBaudRateE
                0x00036f0a       0x28 obj/iWRAP_BLUEGIGA_SPP.o
                0x00036f0a                iWRAP_BLUEGIGA_SPP::SetBaudRate(UartDeviceAbstract::UARTBaudRate)
 .gnu.linkonce.t._ZN15SAU7000_Manager21checkSauAduCsMessagesEv
                0x00036f32      0x826 obj/SAU7000_MANAGER.o
                0x00036f32                SAU7000_Manager::checkSauAduCsMessages()
 .gnu.linkonce.t._ZN15SAU7000_Manager16checkCOMM_statusEv
                0x00037758      0x416 obj/SAU7000_MANAGER.o
                0x00037758                SAU7000_Manager::checkCOMM_status()
 .gnu.linkonce.t._ZN15SAU7000_Manager31SauPcMsg_stopAcquisitionHandlerEh
                0x00037b6e       0xc4 obj/SAU7000_MANAGER.o
                0x00037b6e                SAU7000_Manager::SauPcMsg_stopAcquisitionHandler(unsigned char)
 .gnu.linkonce.t._ZN15SAU7000_Manager26Sau7000status_idle_HandlerEv
                0x00037c32       0x9e obj/SAU7000_MANAGER.o
                0x00037c32                SAU7000_Manager::Sau7000status_idle_Handler()
 .gnu.linkonce.t._ZN15SAU7000_Manager24checkSauEmgBoardMessagesEv
                0x00037cd0      0x71a obj/SAU7000_MANAGER.o
                0x00037cd0                SAU7000_Manager::checkSauEmgBoardMessages()
 .gnu.linkonce.t._ZN15SAU7000_Manager30checkBluetoothProtocolMessagesEv
                0x000383ea      0x5ca obj/SAU7000_MANAGER.o
                0x000383ea                SAU7000_Manager::checkBluetoothProtocolMessages()
 .gnu.linkonce.t._ZN15SAU7000_Manager35Sau7000status_startupChecks_HandlerEv
                0x000389b4      0x66a obj/SAU7000_MANAGER.o
                0x000389b4                SAU7000_Manager::Sau7000status_startupChecks_Handler()
 .gnu.linkonce.t._ZN15SAU7000_Manager40Sau7000status_checkADuCfwUpgrade_HandlerEv
                0x0003901e      0x43c obj/SAU7000_MANAGER.o
                0x0003901e                SAU7000_Manager::Sau7000status_checkADuCfwUpgrade_Handler()
 .gnu.linkonce.t._ZN15SAU7000_Manager26checkSauPcProtocolMessagesEv
                0x0003945a     0x17f2 obj/SAU7000_MANAGER.o
                0x0003945a                SAU7000_Manager::checkSauPcProtocolMessages()
 .gnu.linkonce.t._ZN9CMenuPage4DrawEv
                0x0003ac4c        0x2 obj/APPMENU.o
                0x0003ac4c                CMenuPage::Draw()
 .gnu.linkonce.t._ZN9CMenuPage7RefreshEv
                0x0003ac4e        0x2 obj/APPMENU.o
                0x0003ac4e                CMenuPage::Refresh()
 .gnu.linkonce.t._ZN16CMenuGeneralInfoD1Ev
                0x0003ac50       0x22 obj/APPMENU.o
                0x0003ac50                CMenuGeneralInfo::~CMenuGeneralInfo()
 .gnu.linkonce.t._ZN14CMenuSwitchOffD1Ev
                0x0003ac72       0x22 obj/APPMENU.o
                0x0003ac72                CMenuSwitchOff::~CMenuSwitchOff()
 .gnu.linkonce.t._ZN13CMenuMessagesD1Ev
                0x0003ac94       0x22 obj/APPMENU.o
                0x0003ac94                CMenuMessages::~CMenuMessages()
 .gnu.linkonce.t._ZN9CMenuInfoD1Ev
                0x0003acb6       0x22 obj/APPMENU.o
                0x0003acb6                CMenuInfo::~CMenuInfo()
 .gnu.linkonce.t._ZN15CMenuADuCfrqCalD1Ev
                0x0003acd8       0x22 obj/APPMENU.o
                0x0003acd8                CMenuADuCfrqCal::~CMenuADuCfrqCal()
 .gnu.linkonce.t._ZN15CMenuADuCstatusD1Ev
                0x0003acfa       0x22 obj/APPMENU.o
                0x0003acfa                CMenuADuCstatus::~CMenuADuCstatus()
 .gnu.linkonce.t._ZN9CMenuMainD1Ev
                0x0003ad1c       0x22 obj/APPMENU.o
                0x0003ad1c                CMenuMain::~CMenuMain()
 .gnu.linkonce.t._ZN9CMenuLogoD1Ev
                0x0003ad3e       0x22 obj/APPMENU.o
                0x0003ad3e                CMenuLogo::~CMenuLogo()
 .gnu.linkonce.t._ZN16CMenuGeneralInfoD0Ev
                0x0003ad60       0x32 obj/APPMENU.o
                0x0003ad60                CMenuGeneralInfo::~CMenuGeneralInfo()
 .gnu.linkonce.t._ZN9CMenuLogoD0Ev
                0x0003ad92       0x32 obj/APPMENU.o
                0x0003ad92                CMenuLogo::~CMenuLogo()
 .gnu.linkonce.t._ZN9CMenuMainD0Ev
                0x0003adc4       0x32 obj/APPMENU.o
                0x0003adc4                CMenuMain::~CMenuMain()
 .gnu.linkonce.t._ZN15CMenuADuCstatusD0Ev
                0x0003adf6       0x32 obj/APPMENU.o
                0x0003adf6                CMenuADuCstatus::~CMenuADuCstatus()
 .gnu.linkonce.t._ZN15CMenuADuCfrqCalD0Ev
                0x0003ae28       0x32 obj/APPMENU.o
                0x0003ae28                CMenuADuCfrqCal::~CMenuADuCfrqCal()
 .gnu.linkonce.t._ZN9CMenuInfoD0Ev
                0x0003ae5a       0x32 obj/APPMENU.o
                0x0003ae5a                CMenuInfo::~CMenuInfo()
 .gnu.linkonce.t._ZN13CMenuMessagesD0Ev
                0x0003ae8c       0x32 obj/APPMENU.o
                0x0003ae8c                CMenuMessages::~CMenuMessages()
 .gnu.linkonce.t._ZN14CMenuSwitchOffD0Ev
                0x0003aebe       0x32 obj/APPMENU.o
                0x0003aebe                CMenuSwitchOff::~CMenuSwitchOff()
 .gnu.linkonce.t._ZN22ADuCfwUpgrade_protocol6TurnOnEv
                0x0003aef0       0x2a obj/PROTOCOLADuCfwUPGRADE.o
                0x0003aef0                ADuCfwUpgrade_protocol::TurnOn()
 .gnu.linkonce.t._ZN22ADuCfwUpgrade_protocol7TurnOffEv
                0x0003af1a       0x2a obj/PROTOCOLADuCfwUPGRADE.o
                0x0003af1a                ADuCfwUpgrade_protocol::TurnOff()
 .gnu.linkonce.t._ZN13TimerAbstract9setEnableEb
                0x0003af44        0x6 obj/TIMER_NEC.o
                0x0003af44                TimerAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN13TimerAbstract8isEnableEv
                0x0003af4a        0x6 obj/TIMER_NEC.o
                0x0003af4a                TimerAbstract::isEnable()
 .gnu.linkonce.t._ZN13TimerAbstract16setBaseFrequencyEd
                0x0003af50        0x6 obj/TIMER_NEC.o
                0x0003af50                TimerAbstract::setBaseFrequency(double)
 .gnu.linkonce.t._ZN13TimerAbstract16getBaseFrequencyEv
                0x0003af56        0x6 obj/TIMER_NEC.o
                0x0003af56                TimerAbstract::getBaseFrequency()
 .gnu.linkonce.t._ZN13TimerAbstract12setFrequencyEd
                0x0003af5c       0x46 obj/TIMER_NEC.o
                0x0003af5c                TimerAbstract::setFrequency(double)
 .gnu.linkonce.t._ZN13TimerAbstract12getFrequencyEv
                0x0003afa2        0x6 obj/TIMER_NEC.o
                0x0003afa2                TimerAbstract::getFrequency()
 .gnu.linkonce.t._ZN13TimerAbstract9setPeriodEd
                0x0003afa8       0x46 obj/TIMER_NEC.o
                0x0003afa8                TimerAbstract::setPeriod(double)
 .gnu.linkonce.t._ZN13TimerAbstract9getPeriodEv
                0x0003afee        0x6 obj/TIMER_NEC.o
                0x0003afee                TimerAbstract::getPeriod()
 .gnu.linkonce.t._ZN9Timer_NEC9setEnableEb
                0x0003aff4        0x6 obj/TIMER_NEC.o
                0x0003aff4                Timer_NEC::setEnable(bool)
 .gnu.linkonce.t._ZN9Timer_NEC8isEnableEv
                0x0003affa        0x6 obj/TIMER_NEC.o
                0x0003affa                Timer_NEC::isEnable()
 .gnu.linkonce.t._ZN9Timer_NEC16setBaseFrequencyEd
                0x0003b000        0x6 obj/TIMER_NEC.o
                0x0003b000                Timer_NEC::setBaseFrequency(double)
 .gnu.linkonce.t._ZN9Timer_NEC16getBaseFrequencyEv
                0x0003b006        0x6 obj/TIMER_NEC.o
                0x0003b006                Timer_NEC::getBaseFrequency()
 .gnu.linkonce.t._ZN9Timer_NEC12setFrequencyEdNS_4CCRnE
                0x0003b00c       0x46 obj/TIMER_NEC.o
                0x0003b00c                Timer_NEC::setFrequency(double, Timer_NEC::CCRn)
 .gnu.linkonce.t._ZN9Timer_NEC12getFrequencyEv
                0x0003b052        0x6 obj/TIMER_NEC.o
                0x0003b052                Timer_NEC::getFrequency()
 .gnu.linkonce.t._ZN9Timer_NEC18calculateFrequencyENS_4CCRnE
                0x0003b058        0x6 obj/TIMER_NEC.o
                0x0003b058                Timer_NEC::calculateFrequency(Timer_NEC::CCRn)
 .gnu.linkonce.t._ZN9Timer_NEC9setPeriodEdNS_4CCRnE
                0x0003b05e       0x46 obj/TIMER_NEC.o
                0x0003b05e                Timer_NEC::setPeriod(double, Timer_NEC::CCRn)
 .gnu.linkonce.t._ZN9Timer_NEC9getPeriodEv
                0x0003b0a4        0x6 obj/TIMER_NEC.o
                0x0003b0a4                Timer_NEC::getPeriod()
 .gnu.linkonce.t._ZN9Timer_NEC7setCCR0Etbb
                0x0003b0aa        0x4 obj/TIMER_NEC.o
                0x0003b0aa                Timer_NEC::setCCR0(unsigned short, bool, bool)
 .gnu.linkonce.t._ZN9Timer_NEC7getCCR0Ev
                0x0003b0ae        0x4 obj/TIMER_NEC.o
                0x0003b0ae                Timer_NEC::getCCR0()
 .gnu.linkonce.t._ZN9Timer_NEC7setCCR1Etbb
                0x0003b0b2        0x4 obj/TIMER_NEC.o
                0x0003b0b2                Timer_NEC::setCCR1(unsigned short, bool, bool)
 .gnu.linkonce.t._ZN9Timer_NEC7getCCR1Ev
                0x0003b0b6        0x4 obj/TIMER_NEC.o
                0x0003b0b6                Timer_NEC::getCCR1()
 .gnu.linkonce.t._ZN9Timer_NEC7setCCR2Etbb
                0x0003b0ba        0x4 obj/TIMER_NEC.o
                0x0003b0ba                Timer_NEC::setCCR2(unsigned short, bool, bool)
 .gnu.linkonce.t._ZN9Timer_NEC7getCCR2Ev
                0x0003b0be        0x4 obj/TIMER_NEC.o
                0x0003b0be                Timer_NEC::getCCR2()
 .gnu.linkonce.t._ZN9Timer_NEC7setCCR3Etbb
                0x0003b0c2        0x4 obj/TIMER_NEC.o
                0x0003b0c2                Timer_NEC::setCCR3(unsigned short, bool, bool)
 .gnu.linkonce.t._ZN9Timer_NEC7getCCR3Ev
                0x0003b0c6        0x4 obj/TIMER_NEC.o
                0x0003b0c6                Timer_NEC::getCCR3()
 .gnu.linkonce.t._ZN9Timer_NEC6getCNTEv
                0x0003b0ca        0x4 obj/TIMER_NEC.o
                0x0003b0ca                Timer_NEC::getCNT()
 .gnu.linkonce.t._ZN9Timer_NEC17setOVIC_interruptEbh
                0x0003b0ce        0x2 obj/TIMER_NEC.o
                0x0003b0ce                Timer_NEC::setOVIC_interrupt(bool, unsigned char)
 .gnu.linkonce.t._ZN9Timer_NEC18setCCIC0_interruptEbh
                0x0003b0d0        0x2 obj/TIMER_NEC.o
                0x0003b0d0                Timer_NEC::setCCIC0_interrupt(bool, unsigned char)
 .gnu.linkonce.t._ZN9Timer_NEC18setCCIC1_interruptEbh
                0x0003b0d2        0x2 obj/TIMER_NEC.o
                0x0003b0d2                Timer_NEC::setCCIC1_interrupt(bool, unsigned char)
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnESTEv
                0x0003b0d4        0x6 obj/TIMER_NEC.o
                0x0003b0d4                Timer_NEC::getTxnEST()
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnEEEEv
                0x0003b0da        0x6 obj/TIMER_NEC.o
                0x0003b0da                Timer_NEC::getTxnEEE()
 .gnu.linkonce.t._ZN9Timer_NEC12getTimerModeEv
                0x0003b0e0        0x6 obj/TIMER_NEC.o
                0x0003b0e0                Timer_NEC::getTimerMode()
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnOL1Ev
                0x0003b0e6        0x6 obj/TIMER_NEC.o
                0x0003b0e6                Timer_NEC::getTxnOL1()
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnOE1Ev
                0x0003b0ec        0x6 obj/TIMER_NEC.o
                0x0003b0ec                Timer_NEC::getTxnOE1()
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnOL0Ev
                0x0003b0f2        0x6 obj/TIMER_NEC.o
                0x0003b0f2                Timer_NEC::getTxnOL0()
 .gnu.linkonce.t._ZN9Timer_NEC9getTxnOE0Ev
                0x0003b0f8        0x6 obj/TIMER_NEC.o
                0x0003b0f8                Timer_NEC::getTxnOE0()
 .gnu.linkonce.t._ZN9Timer_NEC28getValidEdgeCaptureTrigTIxn1Ev
                0x0003b0fe        0x6 obj/TIMER_NEC.o
                0x0003b0fe                Timer_NEC::getValidEdgeCaptureTrigTIxn1()
 .gnu.linkonce.t._ZN9Timer_NEC28getValidEdgeCaptureTrigTIxn0Ev
                0x0003b104        0x6 obj/TIMER_NEC.o
                0x0003b104                Timer_NEC::getValidEdgeCaptureTrigTIxn0()
 .gnu.linkonce.t._ZN11Timer_NEC_P9setEnableEb
                0x0003b10a        0x6 obj/TIMER_NEC.o
                0x0003b10a                Timer_NEC_P::setEnable(bool)
 .gnu.linkonce.t._ZN11Timer_NEC_P12setFrequencyEdN9Timer_NEC4CCRnE
                0x0003b110       0x46 obj/TIMER_NEC.o
                0x0003b110                Timer_NEC_P::setFrequency(double, Timer_NEC::CCRn)
 .gnu.linkonce.t._ZN11Timer_NEC_P18calculateFrequencyEN9Timer_NEC4CCRnE
                0x0003b156        0x6 obj/TIMER_NEC.o
                0x0003b156                Timer_NEC_P::calculateFrequency(Timer_NEC::CCRn)
 .gnu.linkonce.t._ZN11Timer_NEC_P7getCCR0Ev
                0x0003b15c        0xa obj/TIMER_NEC.o
                0x0003b15c                Timer_NEC_P::getCCR0()
 .gnu.linkonce.t._ZN11Timer_NEC_P7getCCR1Ev
                0x0003b166        0xa obj/TIMER_NEC.o
                0x0003b166                Timer_NEC_P::getCCR1()
 .gnu.linkonce.t._ZN11Timer_NEC_P6getCNTEv
                0x0003b170        0xa obj/TIMER_NEC.o
                0x0003b170                Timer_NEC_P::getCNT()
 .gnu.linkonce.t._ZN14Timer_NEC_P02412getPrescalerEv
                0x0003b17a        0x6 obj/TIMER_NEC.o
                0x0003b17a                Timer_NEC_P024::getPrescaler()
 .gnu.linkonce.t._ZN14Timer_NEC_P13512getPrescalerEv
                0x0003b180        0x6 obj/TIMER_NEC.o
                0x0003b180                Timer_NEC_P135::getPrescaler()
 .gnu.linkonce.t._ZN11Timer_NEC_Q12getPrescalerEv
                0x0003b186        0x6 obj/TIMER_NEC.o
                0x0003b186                Timer_NEC_Q::getPrescaler()
 .gnu.linkonce.t._ZN11Timer_NEC_Q7getCCR0Ev
                0x0003b18c        0xa obj/TIMER_NEC.o
                0x0003b18c                Timer_NEC_Q::getCCR0()
 .gnu.linkonce.t._ZN11Timer_NEC_Q7getCCR1Ev
                0x0003b196        0xa obj/TIMER_NEC.o
                0x0003b196                Timer_NEC_Q::getCCR1()
 .gnu.linkonce.t._ZN11Timer_NEC_Q7getCCR2Ev
                0x0003b1a0        0xa obj/TIMER_NEC.o
                0x0003b1a0                Timer_NEC_Q::getCCR2()
 .gnu.linkonce.t._ZN11Timer_NEC_Q7getCCR3Ev
                0x0003b1aa        0xa obj/TIMER_NEC.o
                0x0003b1aa                Timer_NEC_Q::getCCR3()
 .gnu.linkonce.t._ZN11Timer_NEC_Q6getCNTEv
                0x0003b1b4        0xa obj/TIMER_NEC.o
                0x0003b1b4                Timer_NEC_Q::getCNT()
 .gnu.linkonce.t._ZN11pwmAbstract7managerEv
                0x0003b1be        0x2 obj/PWMABSTRACT.o
                0x0003b1be                pwmAbstract::manager()
 .gnu.linkonce.t._ZN11pwmAbstract9getPwmFrqEv
                0x0003b1c0       0x26 obj/PWMABSTRACT.o
                0x0003b1c0                pwmAbstract::getPwmFrq()
 .gnu.linkonce.t._ZN11pwmAbstract12getPwmPeriodEv
                0x0003b1e6       0x26 obj/PWMABSTRACT.o
                0x0003b1e6                pwmAbstract::getPwmPeriod()
 .gnu.linkonce.t._ZN11pwmAbstract13getPwmTonDutyEv
                0x0003b20c        0x6 obj/PWMABSTRACT.o
                0x0003b20c                pwmAbstract::getPwmTonDuty()
 .gnu.linkonce.t._ZN11pwmAbstract14getPwmToffDutyEv
                0x0003b212        0x6 obj/PWMABSTRACT.o
                0x0003b212                pwmAbstract::getPwmToffDuty()
 .gnu.linkonce.t._ZN11pwmAbstract9setEnableEb
                0x0003b218       0x2a obj/PWMABSTRACT.o
                0x0003b218                pwmAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN11pwmAbstract9isEnabledEv
                0x0003b242       0x26 obj/PWMABSTRACT.o
                0x0003b242                pwmAbstract::isEnabled()
 .gnu.linkonce.t._ZN11pwmAbstract19pulseCountIsEnabledEv
                0x0003b268        0x6 obj/PWMABSTRACT.o
                0x0003b268                pwmAbstract::pulseCountIsEnabled()
 .gnu.linkonce.t._ZN11pwmAbstract19setPulseCountEnableEb
                0x0003b26e        0xa obj/PWMABSTRACT.o
                0x0003b26e                pwmAbstract::setPulseCountEnable(bool)
 .gnu.linkonce.t._ZN11pwmAbstract20pulseCountingIsEndedEv
                0x0003b278        0x6 obj/PWMABSTRACT.o
                0x0003b278                pwmAbstract::pulseCountingIsEnded()
 .gnu.linkonce.t._ZN11pwmAbstract21setPulseCountingEndedEb
                0x0003b27e        0x6 obj/PWMABSTRACT.o
                0x0003b27e                pwmAbstract::setPulseCountingEnded(bool)
 .gnu.linkonce.t._ZN11pwmAbstract22pulseCountingEnded_ISREv
                0x0003b284        0x8 obj/PWMABSTRACT.o
                0x0003b284                pwmAbstract::pulseCountingEnded_ISR()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract9setEnableEb
                0x0003b28c       0x2a obj/PWM_NEC.o
                0x0003b28c                pwMeasurementAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract8isEnableEv
                0x0003b2b6       0x26 obj/PWM_NEC.o
                0x0003b2b6                pwMeasurementAbstract::isEnable()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract11setTimeBaseEmNS_8TimeUnitE
                0x0003b2dc        0xa obj/PWM_NEC.o
                0x0003b2dc                pwMeasurementAbstract::setTimeBase(unsigned long, pwMeasurementAbstract::TimeUnit)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract11getBaseTimeEv
                0x0003b2e6        0x6 obj/PWM_NEC.o
                0x0003b2e6                pwMeasurementAbstract::getBaseTime()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract11getTimeUnitEv
                0x0003b2ec        0x6 obj/PWM_NEC.o
                0x0003b2ec                pwMeasurementAbstract::getTimeUnit()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract19getPulseMeasurementERNS_21PulseWidthMeasurementE
                0x0003b2f2        0x4 obj/PWM_NEC.o
                0x0003b2f2                pwMeasurementAbstract::getPulseMeasurement(pwMeasurementAbstract::PulseWidthMeasurement&)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract22getPulseMeasurementLowERm
                0x0003b2f6        0x4 obj/PWM_NEC.o
                0x0003b2f6                pwMeasurementAbstract::getPulseMeasurementLow(unsigned long&)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract23getPulseMeasurementHighERm
                0x0003b2fa        0x4 obj/PWM_NEC.o
                0x0003b2fa                pwMeasurementAbstract::getPulseMeasurementHigh(unsigned long&)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract21pulseMeasureAvailableEv
                0x0003b2fe        0x4 obj/PWM_NEC.o
                0x0003b2fe                pwMeasurementAbstract::pulseMeasureAvailable()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract24pulseMeasureAvailableLowEv
                0x0003b302        0x4 obj/PWM_NEC.o
                0x0003b302                pwMeasurementAbstract::pulseMeasureAvailableLow()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract25pulseMeasureAvailableHighEv
                0x0003b306        0x4 obj/PWM_NEC.o
                0x0003b306                pwMeasurementAbstract::pulseMeasureAvailableHigh()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract5clearEv
                0x0003b30a        0x2 obj/PWM_NEC.o
                0x0003b30a                pwMeasurementAbstract::clear()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract7managerEv
                0x0003b30c        0x2 obj/PWM_NEC.o
                0x0003b30c                pwMeasurementAbstract::manager()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract16timeUnitToSecondENS_8TimeUnitE
                0x0003b30e       0x50 obj/PWM_NEC.o
                0x0003b30e                pwMeasurementAbstract::timeUnitToSecond(pwMeasurementAbstract::TimeUnit)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract12popCountHighERm
                0x0003b35e        0x4 obj/PWM_NEC.o
                0x0003b35e                pwMeasurementAbstract::popCountHigh(unsigned long&)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract13pushCountHighEm
                0x0003b362        0x4 obj/PWM_NEC.o
                0x0003b362                pwMeasurementAbstract::pushCountHigh(unsigned long)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract11popCountLowERm
                0x0003b366        0x4 obj/PWM_NEC.o
                0x0003b366                pwMeasurementAbstract::popCountLow(unsigned long&)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract12pushCountLowEm
                0x0003b36a        0x4 obj/PWM_NEC.o
                0x0003b36a                pwMeasurementAbstract::pushCountLow(unsigned long)
 .gnu.linkonce.t._ZN21pwMeasurementAbstract13whatMeasuringEv
                0x0003b36e        0x6 obj/PWM_NEC.o
                0x0003b36e                pwMeasurementAbstract::whatMeasuring()
 .gnu.linkonce.t._ZN21pwMeasurementAbstract19setMeasurementStateENS_16MeasurementStateE
                0x0003b374        0x6 obj/PWM_NEC.o
                0x0003b374                pwMeasurementAbstract::setMeasurementState(pwMeasurementAbstract::MeasurementState)
 .gnu.linkonce.t._ZN11NECpwmTimer7managerEv
                0x0003b37a        0x2 obj/PWM_NEC.o
                0x0003b37a                NECpwmTimer::manager()
 .gnu.linkonce.t._ZN19NECpwMeasurentTimer16newTimerOverFlowEv
                0x0003b37c        0xc obj/PWM_NEC.o
                0x0003b37c                NECpwMeasurentTimer::newTimerOverFlow()
 .gnu.linkonce.t._ZN19NECpwMeasurentTimer16getTimerOverFlowEv
                0x0003b388        0x6 obj/PWM_NEC.o
                0x0003b388                NECpwMeasurentTimer::getTimerOverFlow()
 .gnu.linkonce.t._ZN19NECpwMeasurentTimer5clearEv
                0x0003b38e       0x32 obj/PWM_NEC.o
                0x0003b38e                NECpwMeasurentTimer::clear()
 .gnu.linkonce.t._ZN13MotorAbstract7managerEv
                0x0003b3c0        0x2 obj/WTH.o
                0x0003b3c0                MotorAbstract::manager()
 .gnu.linkonce.t._ZN13MotorAbstract11setVelocityEdb
                0x0003b3c2        0x8 obj/WTH.o
                0x0003b3c2                MotorAbstract::setVelocity(double, bool)
 .gnu.linkonce.t._ZN13MotorAbstract11getVelocityEv
                0x0003b3ca        0x6 obj/WTH.o
                0x0003b3ca                MotorAbstract::getVelocity()
 .gnu.linkonce.t._ZN13MotorAbstract9setEnableEb
                0x0003b3d0        0x6 obj/WTH.o
                0x0003b3d0                MotorAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN13MotorAbstract8isEnableEv
                0x0003b3d6        0x6 obj/WTH.o
                0x0003b3d6                MotorAbstract::isEnable()
 .gnu.linkonce.t._ZN13MotorAbstract8isMovingEv
                0x0003b3dc       0x40 obj/WTH.o
                0x0003b3dc                MotorAbstract::isMoving()
 .gnu.linkonce.t._ZN13MotorAbstract5powerEb
                0x0003b41c        0x6 obj/WTH.o
                0x0003b41c                MotorAbstract::power(bool)
 .gnu.linkonce.t._ZN13MotorAbstract9isPoweredEv
                0x0003b422        0x6 obj/WTH.o
                0x0003b422                MotorAbstract::isPowered()
 .gnu.linkonce.t._ZN11WthAbstract6mangerEv
                0x0003b428        0x2 obj/WTH.o
                0x0003b428                WthAbstract::manger()
 .gnu.linkonce.t._ZN11WthAbstract17setLinearVelocityEdb
                0x0003b42a        0x8 obj/WTH.o
                0x0003b42a                WthAbstract::setLinearVelocity(double, bool)
 .gnu.linkonce.t._ZN11WthAbstract17getLinearVelocityEv
                0x0003b432        0x6 obj/WTH.o
                0x0003b432                WthAbstract::getLinearVelocity()
 .gnu.linkonce.t._ZN11WthAbstract9setEnableEb
                0x0003b438        0x6 obj/WTH.o
                0x0003b438                WthAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN11WthAbstract8isEnableEv
                0x0003b43e        0x6 obj/WTH.o
                0x0003b43e                WthAbstract::isEnable()
 .gnu.linkonce.t._ZN11WthAbstract8isMovingEv
                0x0003b444       0x40 obj/WTH.o
                0x0003b444                WthAbstract::isMoving()
 .gnu.linkonce.t._ZN11WthAbstract7setStepEd
                0x0003b484        0x6 obj/WTH.o
                0x0003b484                WthAbstract::setStep(double)
 .gnu.linkonce.t._ZN11WthAbstract7getStepEv
                0x0003b48a        0x6 obj/WTH.o
                0x0003b48a                WthAbstract::getStep()
 .gnu.linkonce.t._ZN11WthAbstract17getLmtSwLowStatusEv
                0x0003b490        0x6 obj/WTH.o
                0x0003b490                WthAbstract::getLmtSwLowStatus()
 .gnu.linkonce.t._ZN11WthAbstract18getLmtSwHighStatusEv
                0x0003b496        0x6 obj/WTH.o
                0x0003b496                WthAbstract::getLmtSwHighStatus()
 .gnu.linkonce.t._ZN11WthAbstract5powerEb
                0x0003b49c        0x6 obj/WTH.o
                0x0003b49c                WthAbstract::power(bool)
 .gnu.linkonce.t._ZN11WthAbstract9isPoweredEv
                0x0003b4a2        0x6 obj/WTH.o
                0x0003b4a2                WthAbstract::isPowered()
 .gnu.linkonce.t._ZN11WthAbstract17setLmtSwLowStatusENS_17LimitSwitchStatusE
                0x0003b4a8        0x6 obj/WTH.o
                0x0003b4a8                WthAbstract::setLmtSwLowStatus(WthAbstract::LimitSwitchStatus)
 .gnu.linkonce.t._ZN11WthAbstract18setLmtSwHighStatusENS_17LimitSwitchStatusE
                0x0003b4ae        0x6 obj/WTH.o
                0x0003b4ae                WthAbstract::setLmtSwHighStatus(WthAbstract::LimitSwitchStatus)
 .gnu.linkonce.t._ZN19IR_protocolAbstract7managerEv
                0x0003b4b4        0x2 obj/IR_Toshiba_protocol.o
                0x0003b4b4                IR_protocolAbstract::manager()
 .gnu.linkonce.t._ZN19IR_protocolAbstract11pop_IR_DataERNS_9IR_data_tE
                0x0003b4b6        0x4 obj/IR_Toshiba_protocol.o
                0x0003b4b6                IR_protocolAbstract::pop_IR_Data(IR_protocolAbstract::IR_data_t&)
 .gnu.linkonce.t._ZN19IR_protocolAbstract11isDataEmpryEv
                0x0003b4ba        0xc obj/IR_Toshiba_protocol.o
                0x0003b4ba                IR_protocolAbstract::isDataEmpry()
 .gnu.linkonce.t._ZN19IR_protocolAbstract8setStateENS_18IR_decondingStatesE
                0x0003b4c6       0x1a obj/IR_Toshiba_protocol.o
                0x0003b4c6                IR_protocolAbstract::setState(IR_protocolAbstract::IR_decondingStates)
 .gnu.linkonce.t._ZN19IR_protocolAbstract17getDecodingStatusEv
                0x0003b4e0        0x6 obj/IR_Toshiba_protocol.o
                0x0003b4e0                IR_protocolAbstract::getDecodingStatus()
 .gnu.linkonce.t._ZN19IR_protocolAbstract25getPreviousDecodingStatusEv
                0x0003b4e6        0x6 obj/IR_Toshiba_protocol.o
                0x0003b4e6                IR_protocolAbstract::getPreviousDecodingStatus()
 .gnu.linkonce.t._ZN12SPI_Abstract14setPowerEnableEb
                0x0003b4ec        0x6 obj/SPI_ABSTRACT.o
                0x0003b4ec                SPI_Abstract::setPowerEnable(bool)
 .gnu.linkonce.t._ZN12SPI_Abstract13isPowerEnableEv
                0x0003b4f2        0x6 obj/SPI_ABSTRACT.o
                0x0003b4f2                SPI_Abstract::isPowerEnable()
 .gnu.linkonce.t._ZN12SPI_Abstract21setTransmissionEnableEb
                0x0003b4f8        0x6 obj/SPI_ABSTRACT.o
                0x0003b4f8                SPI_Abstract::setTransmissionEnable(bool)
 .gnu.linkonce.t._ZN12SPI_Abstract20isTransmissionEnableEv
                0x0003b4fe        0x6 obj/SPI_ABSTRACT.o
                0x0003b4fe                SPI_Abstract::isTransmissionEnable()
 .gnu.linkonce.t._ZN12SPI_Abstract18setReceptionEnableEb
                0x0003b504        0x6 obj/SPI_ABSTRACT.o
                0x0003b504                SPI_Abstract::setReceptionEnable(bool)
 .gnu.linkonce.t._ZN12SPI_Abstract17isReceptionEnableEv
                0x0003b50a        0x6 obj/SPI_ABSTRACT.o
                0x0003b50a                SPI_Abstract::isReceptionEnable()
 .gnu.linkonce.t._ZN12SPI_Abstract24getTransferModeDirectionEv
                0x0003b510        0x6 obj/SPI_ABSTRACT.o
                0x0003b510                SPI_Abstract::getTransferModeDirection()
 .gnu.linkonce.t._ZN12SPI_Abstract28getTransferModeSpecificationEv
                0x0003b516        0x6 obj/SPI_ABSTRACT.o
                0x0003b516                SPI_Abstract::getTransferModeSpecification()
 .gnu.linkonce.t._ZN12SPI_Abstract20getCommunicationTypeEv
                0x0003b51c        0x6 obj/SPI_ABSTRACT.o
                0x0003b51c                SPI_Abstract::getCommunicationType()
 .gnu.linkonce.t._ZN12SPI_Abstract21getCommunicationClockEv
                0x0003b522        0x6 obj/SPI_ABSTRACT.o
                0x0003b522                SPI_Abstract::getCommunicationClock()
 .gnu.linkonce.t._ZN12SPI_Abstract20getBitTransferLenghtEv
                0x0003b528        0x6 obj/SPI_ABSTRACT.o
                0x0003b528                SPI_Abstract::getBitTransferLenght()
 .gnu.linkonce.t._ZN12SPI_Abstract4putcEt
                0x0003b52e        0x4 obj/SPI_ABSTRACT.o
                0x0003b52e                SPI_Abstract::putc(unsigned short)
 .gnu.linkonce.t._ZN12SPI_Abstract4getcEt
                0x0003b532        0x4 obj/SPI_ABSTRACT.o
                0x0003b532                SPI_Abstract::getc(unsigned short)
 .gnu.linkonce.t._ZN12SPI_Abstract4busyEv
                0x0003b536        0x4 obj/SPI_ABSTRACT.o
                0x0003b536                SPI_Abstract::busy()
 .gnu.linkonce.t._ZN7SPI_NEC13isPowerEnableEv
                0x0003b53a        0x6 obj/SPI_NEC.o
                0x0003b53a                SPI_NEC::isPowerEnable()
 .gnu.linkonce.t._ZN7SPI_NEC20isTransmissionEnableEv
                0x0003b540        0x6 obj/SPI_NEC.o
                0x0003b540                SPI_NEC::isTransmissionEnable()
 .gnu.linkonce.t._ZN7SPI_NEC17isReceptionEnableEv
                0x0003b546        0x6 obj/SPI_NEC.o
                0x0003b546                SPI_NEC::isReceptionEnable()
 .gnu.linkonce.t._ZN7SPI_NEC24getTransferModeDirectionEv
                0x0003b54c        0x6 obj/SPI_NEC.o
                0x0003b54c                SPI_NEC::getTransferModeDirection()
 .gnu.linkonce.t._ZN7SPI_NEC28getTransferModeSpecificationEv
                0x0003b552        0x6 obj/SPI_NEC.o
                0x0003b552                SPI_NEC::getTransferModeSpecification()
 .gnu.linkonce.t._ZN7SPI_NEC20getCommunicationTypeEv
                0x0003b558        0x6 obj/SPI_NEC.o
                0x0003b558                SPI_NEC::getCommunicationType()
 .gnu.linkonce.t._ZN7SPI_NEC21getCommunicationClockEv
                0x0003b55e        0x6 obj/SPI_NEC.o
                0x0003b55e                SPI_NEC::getCommunicationClock()
 .gnu.linkonce.t._ZN7SPI_NEC20getBitTransferLenghtEv
                0x0003b564        0x6 obj/SPI_NEC.o
                0x0003b564                SPI_NEC::getBitTransferLenght()
 .gnu.linkonce.t._ZN11WtpAbstract7managerEv
                0x0003b56a        0x2 obj/WTP.o
                0x0003b56a                WtpAbstract::manager()
 .gnu.linkonce.t._ZN11WtpAbstract11setVelocityEdb
                0x0003b56c        0x8 obj/WTP.o
                0x0003b56c                WtpAbstract::setVelocity(double, bool)
 .gnu.linkonce.t._ZN11WtpAbstract11getVelocityEv
                0x0003b574        0x6 obj/WTP.o
                0x0003b574                WtpAbstract::getVelocity()
 .gnu.linkonce.t._ZN11WtpAbstract9setEnableEb
                0x0003b57a        0x6 obj/WTP.o
                0x0003b57a                WtpAbstract::setEnable(bool)
 .gnu.linkonce.t._ZN11WtpAbstract8isEnableEv
                0x0003b580        0x6 obj/WTP.o
                0x0003b580                WtpAbstract::isEnable()
 .gnu.linkonce.t._ZN11WtpAbstract8isMovingEv
                0x0003b586       0x40 obj/WTP.o
                0x0003b586                WtpAbstract::isMoving()
 .gnu.linkonce.t._ZN11WtpAbstract5powerEb
                0x0003b5c6        0x6 obj/WTP.o
                0x0003b5c6                WtpAbstract::power(bool)
 .gnu.linkonce.t._ZN11WtpAbstract9isPoweredEv
                0x0003b5cc        0x6 obj/WTP.o
                0x0003b5cc                WtpAbstract::isPowered()

.ctors          0x0003b5d4       0x14
                0x0003b5e0                . = ALIGN (0x10)
 *fill*         0x0003b5d4        0xc 00
                0x0003b5e0                ___ctors = .
 *(.ctors)
 .ctors         0x0003b5e0        0x4 obj/SWTIM.o
 .ctors         0x0003b5e4        0x4 obj/SOUND.o
                0x0003b5e8                ___ctors_end = .

.dtors          0x0003b5e8        0x0
                0x0003b5e8                ___dtors = .
 *(.dtors)
                0x0003b5e8                ___dtors_end = .
                0x0003c000                . = ALIGN (0x1000)
                0x0003c000                __etext = .
                0x0003c000                PROVIDE (_etext, .)

.ramcode        0x00000000        0x0 load address 0x0003c000
                0x00000000                __ramcode_start = .
 *(.ramcode)
                0x00000000                . = ALIGN (0x4)
                0x00000000                __ramcode_end = .

.rodata         0x00040000     0x2014
                0x00040000                __rodata_start = .
 *(.rodata)
 .rodata        0x00040000      0x1e4 obj/main.o
                0x0004011f                _sAppName
                0x00040128                _sAppRevision
                0x0004013a                _sAppDate
                0x00040146                _fpgaWantedBitstream
                0x00040131                _sHwVersion
                0x00040154                _sAppDateLength
                0x00040150                _sHwVersionLength
                0x0004014c                _sAppRevisionLength
                0x00040148                _sAppNameLength
 .rodata        0x000401e4        0x1 obj/STRCLASS.o
 *fill*         0x000401e5        0x1 00
 .rodata        0x000401e6       0x5c obj/PRINT.o
 *fill*         0x00040242        0x2 00
 .rodata        0x00040244       0xb8 obj/util.o
 .rodata        0x000402fc       0x11 obj/PROTOCOLSAUANDPC.o
 .rodata        0x0004030d       0x33 obj/PROTOCOL_uC.o
 .rodata        0x00040340      0x3c7 obj/iWRAP_BLUEGIGA.o
 .rodata        0x00040707       0x1d obj/iWRAP_BLUEGIGA_SPP.o
 .rodata        0x00040724      0x2ab obj/SAU7000_MANAGER.o
 *fill*         0x000409cf        0x1 00
 .rodata        0x000409d0       0x24 obj/CHRSET.o
 .rodata        0x000409f4       0x33 obj/GRAPH.o
 .rodata        0x00040a27       0xaa obj/APPMENU.o
 .rodata        0x00040ad1       0x18 obj/SSPIE_HARDWARE.o
 .rodata        0x00040ae9        0x3 obj/SSPIE_CORE.o
 .rodata        0x00040aec      0x212 obj/SSPIE_MAIN.o
 .rodata        0x00040cfe        0x8 obj/SSPIE_UTIL.o
 .rodata        0x00040d06      0x281 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
                0x00040d06                __ctype_
 .rodata        0x00040f87        0x2 c:\gcc850\lib\libc.a(lib_a-impure.o)
 *fill*         0x00040f89        0x3 00
 .rodata        0x00040f8c       0x10 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
                0x00040f8c                ___thenan_sf
 .rodata        0x00040f9c      0x100 c:\gcc850\lib\libgcc.a(_clz.o)
                0x00040f9c                ___clz_tab
 *(.gnu.linkonce.r*)
 .gnu.linkonce.r._ZTV20GenericHwChanManagerIlLi4EE
                0x0004109c        0xc obj/main.o
                0x0004109c                vtable for GenericHwChanManager<long, 4>
 .gnu.linkonce.r._ZTV13HwChanManagerIlLi4EE
                0x000410a8        0xc obj/main.o
                0x000410a8                vtable for HwChanManager<long, 4>
 .gnu.linkonce.r._ZTV16GenericHwChannelIlLi4EE
                0x000410b4        0xc obj/main.o
                0x000410b4                vtable for GenericHwChannel<long, 4>
 .gnu.linkonce.r._ZTV9HwChannelIlLi4EE
                0x000410c0        0xc obj/main.o
                0x000410c0                vtable for HwChannel<long, 4>
 .gnu.linkonce.r._ZTV16PrsHwChanManagerIsLi40EE
                0x000410cc        0xc obj/main.o
                0x000410cc                vtable for PrsHwChanManager<short, 40>
 .gnu.linkonce.r._ZTV13HwChanManagerIsLi40EE
                0x000410d8        0xc obj/main.o
                0x000410d8                vtable for HwChanManager<short, 40>
 .gnu.linkonce.r._ZTV12PrsHwChannelIsLi40EE
                0x000410e4        0xc obj/main.o
                0x000410e4                vtable for PrsHwChannel<short, 40>
 .gnu.linkonce.r._ZTV9HwChannelIsLi40EE
                0x000410f0        0xc obj/main.o
                0x000410f0                vtable for HwChannel<short, 40>
 .gnu.linkonce.r._ZTV6String
                0x000410fc       0x10 obj/STRCLASS.o
                0x000410fc                vtable for String
 .gnu.linkonce.r._ZTV16KeyboardAbstract
                0x0004110c       0x48 obj/KEYABSTRACT.o
                0x0004110c                vtable for KeyboardAbstract
 .gnu.linkonce.r._ZTV8Keyboard
                0x00041154       0x48 obj/KEYBOARD.o
                0x00041154                vtable for Keyboard
 .gnu.linkonce.r._ZTV3Key
                0x0004119c       0x4c obj/KEYBOARD.o
                0x0004119c                vtable for Key
 .gnu.linkonce.r._ZTV11KeyAbstract
                0x000411e8       0x4c obj/KEYBOARD.o
                0x000411e8                vtable for KeyAbstract
 .gnu.linkonce.r._ZTV14AdcSpiAbstract
                0x00041234       0x18 obj/ADCABSTRACT.o
                0x00041234                vtable for AdcSpiAbstract
 .gnu.linkonce.r._ZTV11AdcAbstract
                0x0004124c       0x18 obj/ADCABSTRACT.o
                0x0004124c                vtable for AdcAbstract
 .gnu.linkonce.r._ZTV7Adc_NEC
                0x00041264       0x18 obj/ADC_NEC.o
                0x00041264                vtable for Adc_NEC
 .gnu.linkonce.r._ZTV15Adc_NEC_SAU7000
                0x0004127c       0x18 obj/ADC_SAU7000.o
                0x0004127c                vtable for Adc_NEC_SAU7000
 .gnu.linkonce.r._ZTV20VoltageHwChanManagerItLi5EE
                0x00041294        0xc obj/ADC_SAU7000.o
                0x00041294                vtable for VoltageHwChanManager<unsigned short, 5>
 .gnu.linkonce.r._ZTV13HwChanManagerItLi5EE
                0x000412a0        0xc obj/ADC_SAU7000.o
                0x000412a0                vtable for HwChanManager<unsigned short, 5>
 .gnu.linkonce.r._ZTV16VoltageHwChannelItLi5EE
                0x000412ac        0xc obj/ADC_SAU7000.o
                0x000412ac                vtable for VoltageHwChannel<unsigned short, 5>
 .gnu.linkonce.r._ZTV9HwChannelItLi5EE
                0x000412b8        0xc obj/ADC_SAU7000.o
                0x000412b8                vtable for HwChannel<unsigned short, 5>
 .gnu.linkonce.r._ZTV20CurrentHwChanManagerItLi5EE
                0x000412c4        0xc obj/ADC_SAU7000.o
                0x000412c4                vtable for CurrentHwChanManager<unsigned short, 5>
 .gnu.linkonce.r._ZTV16CurrentHwChannelItLi5EE
                0x000412d0        0xc obj/ADC_SAU7000.o
                0x000412d0                vtable for CurrentHwChannel<unsigned short, 5>
 .gnu.linkonce.r._ZTV20VoltageHwChanManagerItLi16EE
                0x000412dc        0xc obj/ADC_SAU7000.o
                0x000412dc                vtable for VoltageHwChanManager<unsigned short, 16>
 .gnu.linkonce.r._ZTV13HwChanManagerItLi16EE
                0x000412e8        0xc obj/ADC_SAU7000.o
                0x000412e8                vtable for HwChanManager<unsigned short, 16>
 .gnu.linkonce.r._ZTV16VoltageHwChannelItLi16EE
                0x000412f4        0xc obj/ADC_SAU7000.o
                0x000412f4                vtable for VoltageHwChannel<unsigned short, 16>
 .gnu.linkonce.r._ZTV9HwChannelItLi16EE
                0x00041300        0xc obj/ADC_SAU7000.o
                0x00041300                vtable for HwChannel<unsigned short, 16>
 .gnu.linkonce.r._ZTV20CurrentHwChanManagerItLi16EE
                0x0004130c        0xc obj/ADC_SAU7000.o
                0x0004130c                vtable for CurrentHwChanManager<unsigned short, 16>
 .gnu.linkonce.r._ZTV16CurrentHwChannelItLi16EE
                0x00041318        0xc obj/ADC_SAU7000.o
                0x00041318                vtable for CurrentHwChannel<unsigned short, 16>
 .gnu.linkonce.r._ZTV18UartDeviceAbstract
                0x00041324       0x30 obj/UARTABSTRACT.o
                0x00041324                vtable for UartDeviceAbstract
 .gnu.linkonce.r._ZTV7UartNEC
                0x00041354       0x30 obj/UARTNEC.o
                0x00041354                vtable for UartNEC
 .gnu.linkonce.r._ZTV8UartFPGA
                0x00041384       0x30 obj/UARTFPGA.o
                0x00041384                vtable for UartFPGA
 .gnu.linkonce.r._ZTV26stdUartProtocolAbstraction
                0x000413b4       0x38 obj/PROTOCOLSTDUART.o
                0x000413b4                vtable for stdUartProtocolAbstraction
 .gnu.linkonce.r._ZTV13SauPcProtocol
                0x000413ec       0x40 obj/PROTOCOLSAUANDPC.o
                0x000413ec                vtable for SauPcProtocol
 .gnu.linkonce.r._ZTV17ADuC_GEN_protocol
                0x0004142c       0x5c obj/PROTOCOL_uC.o
                0x0004142c                vtable for ADuC_GEN_protocol
 .gnu.linkonce.r._ZTV17ADuC_PRS_protocol
                0x00041488       0x5c obj/PROTOCOL_uC.o
                0x00041488                vtable for ADuC_PRS_protocol
 .gnu.linkonce.r._ZTV20ADuC_WEIGHT_protocol
                0x000414e4       0x5c obj/PROTOCOL_uC.o
                0x000414e4                vtable for ADuC_WEIGHT_protocol
 .gnu.linkonce.r._ZTV11uC_Protocol
                0x00041540       0x5c obj/PROTOCOL_uC.o
                0x00041540                vtable for uC_Protocol
 .gnu.linkonce.r._ZTV18SauAndEmgzProtocol
                0x0004159c       0x38 obj/PROTOCOLSAUANDEMGZ.o
                0x0004159c                vtable for SauAndEmgzProtocol
 .gnu.linkonce.r._ZTV23iWRAP_BLUEGIGA_Protocol
                0x000415d4       0x40 obj/iWRAP_BLUEGIGA.o
                0x000415d4                vtable for iWRAP_BLUEGIGA_Protocol
 .gnu.linkonce.r._ZTV18iWRAP_BLUEGIGA_SPP
                0x00041614       0x40 obj/iWRAP_BLUEGIGA_SPP.o
                0x00041614                vtable for iWRAP_BLUEGIGA_SPP
 .gnu.linkonce.r._ZTV14CMenuSwitchOff
                0x00041654       0x18 obj/APPMENU.o
                0x00041654                vtable for CMenuSwitchOff
 .gnu.linkonce.r._ZTV13CMenuMessages
                0x0004166c       0x18 obj/APPMENU.o
                0x0004166c                vtable for CMenuMessages
 .gnu.linkonce.r._ZTV9CMenuInfo
                0x00041684       0x18 obj/APPMENU.o
                0x00041684                vtable for CMenuInfo
 .gnu.linkonce.r._ZTV15CMenuADuCfrqCal
                0x0004169c       0x18 obj/APPMENU.o
                0x0004169c                vtable for CMenuADuCfrqCal
 .gnu.linkonce.r._ZTV15CMenuADuCstatus
                0x000416b4       0x18 obj/APPMENU.o
                0x000416b4                vtable for CMenuADuCstatus
 .gnu.linkonce.r._ZTV9CMenuMain
                0x000416cc       0x18 obj/APPMENU.o
                0x000416cc                vtable for CMenuMain
 .gnu.linkonce.r._ZTV9CMenuLogo
                0x000416e4       0x18 obj/APPMENU.o
                0x000416e4                vtable for CMenuLogo
 .gnu.linkonce.r._ZTV16CMenuGeneralInfo
                0x000416fc       0x18 obj/APPMENU.o
                0x000416fc                vtable for CMenuGeneralInfo
 .gnu.linkonce.r._ZTV9CMenuPage
                0x00041714       0x18 obj/APPMENU.o
                0x00041714                vtable for CMenuPage
 .gnu.linkonce.r._ZTV22ADuCfwUpgrade_protocol
                0x0004172c       0x38 obj/PROTOCOLADuCfwUPGRADE.o
                0x0004172c                vtable for ADuCfwUpgrade_protocol
 .gnu.linkonce.r._ZTV11Timer_NEC_Q
                0x00041764       0xd0 obj/TIMER_NEC.o
                0x00041764                vtable for Timer_NEC_Q
 .gnu.linkonce.r._ZTV14Timer_NEC_P135
                0x00041834       0xc8 obj/TIMER_NEC.o
                0x00041834                vtable for Timer_NEC_P135
 .gnu.linkonce.r._ZTV14Timer_NEC_P024
                0x000418fc       0xc8 obj/TIMER_NEC.o
                0x000418fc                vtable for Timer_NEC_P024
 .gnu.linkonce.r._ZTV11Timer_NEC_P
                0x000419c4       0xc0 obj/TIMER_NEC.o
                0x000419c4                vtable for Timer_NEC_P
 .gnu.linkonce.r._ZTV9Timer_NEC
                0x00041a84       0xc0 obj/TIMER_NEC.o
                0x00041a84                vtable for Timer_NEC
 .gnu.linkonce.r._ZTV13TimerAbstract
                0x00041b44       0x28 obj/TIMER_NEC.o
                0x00041b44                vtable for TimerAbstract
 .gnu.linkonce.r._ZTV11pwmAbstract
                0x00041b6c       0x48 obj/PWMABSTRACT.o
                0x00041b6c                vtable for pwmAbstract
 .gnu.linkonce.r._ZTV19NECpwMeasurentTimer
                0x00041bb4       0x64 obj/PWM_NEC.o
                0x00041bb4                vtable for NECpwMeasurentTimer
 .gnu.linkonce.r._ZTV11NECpwmTimer
                0x00041c18       0x4c obj/PWM_NEC.o
                0x00041c18                vtable for NECpwmTimer
 .gnu.linkonce.r._ZTV21pwMeasurementAbstract
                0x00041c64       0x58 obj/PWM_NEC.o
                0x00041c64                vtable for pwMeasurementAbstract
 .gnu.linkonce.r._ZTV9WthMenfis
                0x00041cbc       0x50 obj/WTH.o
                0x00041cbc                vtable for WthMenfis
 .gnu.linkonce.r._ZTV11WthAbstract
                0x00041d0c       0x4c obj/WTH.o
                0x00041d0c                vtable for WthAbstract
 .gnu.linkonce.r._ZTV13MotorAbstract
                0x00041d58       0x28 obj/WTH.o
                0x00041d58                vtable for MotorAbstract
 .gnu.linkonce.r._ZTV19Toshiba_IR_protocol
                0x00041d80       0x20 obj/IR_Toshiba_protocol.o
                0x00041d80                vtable for Toshiba_IR_protocol
 .gnu.linkonce.r._ZTV19IR_protocolAbstract
                0x00041da0       0x20 obj/IR_Toshiba_protocol.o
                0x00041da0                vtable for IR_protocolAbstract
 .gnu.linkonce.r._ZTV24RC5_Standard_IR_protocol
                0x00041dc0       0x20 obj/IR_RC5_Standard_protocol.o
                0x00041dc0                vtable for RC5_Standard_IR_protocol
 .gnu.linkonce.r._ZTV9IR_Remote
                0x00041de0       0x48 obj/IR_remote.o
                0x00041de0                vtable for IR_Remote
 .gnu.linkonce.r._ZTV6IR_Key
                0x00041e28       0x4c obj/IR_remote.o
                0x00041e28                vtable for IR_Key
 .gnu.linkonce.r._ZTV12SPI_Abstract
                0x00041e74       0x54 obj/SPI_ABSTRACT.o
                0x00041e74                vtable for SPI_Abstract
 .gnu.linkonce.r._ZTV17SPI_Interrupt_NEC
                0x00041ec8       0x54 obj/SPI_NEC.o
                0x00041ec8                vtable for SPI_Interrupt_NEC
 .gnu.linkonce.r._ZTV14SPI_Poller_NEC
                0x00041f1c       0x54 obj/SPI_NEC.o
                0x00041f1c                vtable for SPI_Poller_NEC
 .gnu.linkonce.r._ZTV7SPI_NEC
                0x00041f70       0x54 obj/SPI_NEC.o
                0x00041f70                vtable for SPI_NEC
 .gnu.linkonce.r._ZTV9WtpMenfis
                0x00041fc4       0x28 obj/WTP.o
                0x00041fc4                vtable for WtpMenfis
 .gnu.linkonce.r._ZTV11WtpAbstract
                0x00041fec       0x28 obj/WTP.o
                0x00041fec                vtable for WtpAbstract
 *(.gcc_except_table)
                0x00042014                . = ALIGN (0x4)

.rodata.cst4    0x00042014        0x0
                0x00042014                __rodata.cst4_start = .
 *(.rodata.cst4)
                0x00042014                . = ALIGN (0x4)
                0x00042014                __rodata_end = .
                0x00042014                PROVIDE (_rodata_end, __rodata_end)

.message        0x00048000    0x2aea4
                0x00048000                __message_start = .
 *(.message)
 .message       0x00048000     0x2208 obj/main.o
 .message       0x0004a208      0x240 obj/DPYDRV.o
 .message       0x0004a448       0x40 obj/CHRSET.o
 .message       0x0004a488       0x68 obj/GRAPH.o
 .message       0x0004a4f0      0xdea obj/ICONS.o
                0x0004ac08                _icoWTH_01
                0x0004a8a8                _icoWTP_01
                0x0004aa2e                _icoWTP_04
                0x0004ab32                _icoLMTSW_NOT_REACHED
                0x0004ad8c                _icoWTH_03
                0x0004af10                _icoWTH_05
                0x0004a9ac                _icoWTP_03
                0x0004a75e                _icoUSB
                0x0004acca                _icoWTH_02
                0x0004a4f0                _pictLogo
                0x0004ab46                _icoWTH_00
                0x0004ab3c                _icoLMTSW_REACHED
                0x0004b156                _icoWTH_08
                0x0004a790                _icoNO_USB
                0x0004b218                _icoWTH_09
                0x0004a92a                _icoWTP_02
                0x0004afd2                _icoWTH_06
                0x0004a826                _icoWTP_00
                0x0004aab0                _icoWTP_05
                0x0004b094                _icoWTH_07
                0x0004a7f4                _icoBLANK_24x10
                0x0004a7c2                _icoBT
                0x0004ae4e                _icoWTH_04
 *fill*         0x0004b2da        0x2 00
 .message       0x0004b2dc     0x7498 obj/SAU7000_ADuC_SOURCE.o
                0x0004b2e4                _ADuC_Source
                0x0004b2e0                _ADuC_Source_size
                0x0004b2dc                _ADuC_REV_MAJOR
                0x0004b2dd                _ADuC_REV_MINOR
 .message       0x00052774    0x2072d obj/SSPIE_MAIN.o
                0x00072ea4                . = ALIGN (0x4)
 *fill*         0x00072ea1        0x3 00
                0x00072ea4                __message_end = .
                0x00072ea4                PROVIDE (_intflash_end, __message_end)

.data           0x03ff3000      0x42c load address 0x00042014
                0x03ff3000                . = ALIGN (0x10)
                0x03ff3000                __data_start = .
 *(.data)
 .data          0x03ff3000        0x0 obj/startup.o
 .data          0x03ff3000        0x0 obj/crt0.o
 .data          0x03ff3000        0x0 obj/crt1.o
 .data          0x03ff3000        0x0 obj/main.o
 .data          0x03ff3000        0x2 obj/IRQSG2.o
 .data          0x03ff3002        0x0 obj/ERROR.o
 *fill*         0x03ff3002        0x2 00
 .data          0x03ff3004        0x8 obj/ALLOC.o
 .data          0x03ff300c        0x0 obj/NEW.o
 .data          0x03ff300c        0x0 obj/STRCLASS.o
 .data          0x03ff300c        0x4 obj/PRINT.o
                0x03ff300c                _sprintfMaxCount
 .data          0x03ff3010        0x0 obj/SWTIM.o
 .data          0x03ff3010        0x0 obj/util.o
 .data          0x03ff3010        0x0 obj/sioSG2.o
 .data          0x03ff3010        0x0 obj/SOUND.o
 .data          0x03ff3010        0x0 obj/KEYABSTRACT.o
 .data          0x03ff3010        0x0 obj/KEYBOARD.o
 .data          0x03ff3010        0x0 obj/ADCABSTRACT.o
 .data          0x03ff3010        0x0 obj/ADC_NEC.o
 .data          0x03ff3010        0x0 obj/ADC_SAU7000.o
 .data          0x03ff3010        0x0 obj/UARTABSTRACT.o
 .data          0x03ff3010        0x0 obj/UARTNEC.o
 .data          0x03ff3010        0x0 obj/UARTFPGA.o
 .data          0x03ff3010        0x0 obj/PROTOCOLSTDUART.o
 .data          0x03ff3010        0x0 obj/PROTOCOLSAUANDPC.o
 .data          0x03ff3010        0x0 obj/PROTOCOL_uC.o
 .data          0x03ff3010        0x0 obj/PROTOCOLSAUANDEMGZ.o
 .data          0x03ff3010        0x0 obj/iWRAP_BLUEGIGA.o
 .data          0x03ff3010        0x0 obj/iWRAP_BLUEGIGA_SPP.o
 .data          0x03ff3010        0x4 obj/SAU7000_MANAGER.o
 .data          0x03ff3014        0x0 obj/DPYDRV.o
 .data          0x03ff3014        0x0 obj/CHRSET.o
 .data          0x03ff3014        0x0 obj/GRAPH.o
 .data          0x03ff3014        0xf obj/APPMENU.o
                0x03ff3014                CMenuGeneralInfo::m_COMM_icoType
                0x03ff3015                CMenuGeneralInfo::m_strSAUstate
 .data          0x03ff3023        0x0 obj/ICONS.o
 .data          0x03ff3023        0x0 obj/EEPROM_SPI.o
 .data          0x03ff3023        0x0 obj/SAU7000_ADuC_SOURCE.o
 .data          0x03ff3023        0x0 obj/PROTOCOLADuCfwUPGRADE.o
 .data          0x03ff3023        0x0 obj/ADuC_UPGRADEMANAGER.o
 .data          0x03ff3023        0x0 obj/TIMER_NEC.o
 .data          0x03ff3023        0x0 obj/PWMABSTRACT.o
 .data          0x03ff3023        0x0 obj/PWM_NEC.o
 .data          0x03ff3023        0x0 obj/WTH.o
 .data          0x03ff3023        0x0 obj/IR_Toshiba_protocol.o
 .data          0x03ff3023        0x0 obj/IR_RC5_Standard_protocol.o
 .data          0x03ff3023        0x0 obj/IR_remote.o
 .data          0x03ff3023        0x0 obj/SPI_ABSTRACT.o
 .data          0x03ff3023        0x0 obj/SPI_NEC.o
 .data          0x03ff3023        0x0 obj/TMC262_DRV.o
 .data          0x03ff3023        0x0 obj/WTP.o
 .data          0x03ff3023        0x0 obj/SSPIE_HARDWARE.o
 .data          0x03ff3023        0x0 obj/SSPIE_CORE.o
 .data          0x03ff3023        0x0 obj/SSPIE_INTRFACE.o
 .data          0x03ff3023        0x0 obj/SSPIE_MAIN.o
 .data          0x03ff3023        0x0 obj/SSPIE_SSPIEm.o
 .data          0x03ff3023        0x0 obj/SSPIE_UTIL.o
 .data          0x03ff3023        0x0 obj/ADuCSETTING.o
 .data          0x03ff3023        0x0 c:\gcc850\lib\libc.a(lib_a-atoi.o)
 .data          0x03ff3023        0x0 c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
 .data          0x03ff3023        0x0 c:\gcc850\lib\libc.a(lib_a-memcpy.o)
 .data          0x03ff3023        0x0 c:\gcc850\lib\libc.a(lib_a-strcat.o)
 .data          0x03ff3023        0x0 c:\gcc850\lib\libc.a(lib_a-strcmp.o)
 .data          0x03ff3023        0x0 c:\gcc850\lib\libc.a(lib_a-strcpy.o)
 .data          0x03ff3023        0x0 c:\gcc850\lib\libc.a(lib_a-strlen.o)
 .data          0x03ff3023        0x0 c:\gcc850\lib\libc.a(lib_a-strncpy.o)
 .data          0x03ff3023        0x0 c:\gcc850\lib\libc.a(lib_a-strtol.o)
 .data          0x03ff3023        0x0 c:\gcc850\lib\libc.a(lib_a-toupper.o)
 *fill*         0x03ff3023        0x1 00
 .data          0x03ff3024        0x8 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
                0x03ff3028                ___ctype_ptr__
                0x03ff3024                ___ctype_ptr
 .data          0x03ff302c      0x400 c:\gcc850\lib\libc.a(lib_a-impure.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_mulsi3.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_divsi3.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_udivsi3.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_modsi3.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_umodsi3.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_save_31c.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_addsub_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_mul_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_div_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_ne_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_gt_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_ge_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_lt_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_le_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_si_to_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_sf_to_si.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_save_26c.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_save_27c.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_save_28c.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_muldi3.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_clzsi2.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_pack_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_unpack_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
 .data          0x03ff342c        0x0 c:\gcc850\lib\libgcc.a(_clz.o)
 *(.gnu.linkonce.d*)
                0x03ff342c                . = ALIGN (0x4)
                0x03ff3000                PROVIDE (_data_start, __data_start)

.got
 *(.got.plt)
 *(.got)

.dynamic
 *(.dynamic)

.tdata          0x03ff342c        0x0 load address 0x00042440
                0x03ff342c                PROVIDE (__ep, .)
 *(.tbyte)
 *(.tcommon_byte)
 *(.tdata)
 *(.tbss)
 *(.tcommon)
                0x03ff342c                __tdata_end = .

.rosdata        0x03ff342c        0x4 load address 0x00042440
 *(.rosdata)
 .rosdata       0x03ff342c        0x4 c:\gcc850\lib\libc.a(lib_a-impure.o)
                0x03ff342c                __global_impure_ptr

.sdata          0x03ff3430        0x4 load address 0x00042444
                0x03ffb430                PROVIDE (__gp, (. + 0x8000))
 *(.sdata)
 .sdata         0x03ff3430        0x4 c:\gcc850\lib\libc.a(lib_a-impure.o)
                0x03ff3430                __impure_ptr
                0x03ff3434                __sbss_start = .
 *(.sbss)
 *(.scommon)
                0x03ff3434                __data_end = .
                0x03ff3434                PROVIDE (_data_end, __data_end)
                0x00042448                PROVIDE (__datarom_end, ((((__rodata_end + SIZEOF (.data)) + SIZEOF (.tdata)) + SIZEOF (.rosdata)) + SIZEOF (.sdata)))
                0x03ff3434                _edata = DEFINED (__sbss_start)?__sbss_start:.
                0x03ff3434                PROVIDE (edata, _edata)

.bss            0x03ff3434     0x101c
                0x03ff3434                __bss_start = DEFINED (__sbss_start)?__sbss_start:.
 *(.dynbss)
 *(.bss)
 .bss           0x03ff3434        0x0 obj/startup.o
 .bss           0x03ff3434        0x0 obj/crt0.o
 .bss           0x03ff3434        0x2 obj/crt1.o
 *fill*         0x03ff3436        0x2 00
 .bss           0x03ff3438      0x168 obj/main.o
                0x03ff3534                _powerSamplePeriod
                0x03ff34c8                _pUART_ADuC4
                0x03ff347c                _prsProtocol_78
                0x03ff3470                _prsProtocol_12
                0x03ff3474                _prsProtocol_34
                0x03ff3538                _milliSec
                0x03ff349c                _pUART0
                0x03ff3488                _bluetoothProtocol
                0x03ff3564                _g_pGen2ChanGainOffset
                0x03ff3514                _remoteControl
                0x03ff34fc                _timerP4
                0x03ff3520                _timerP1
                0x03ff3458                _displaySetting
                0x03ff353c                _g_pGen1ChanGainOffset
                0x03ff3530                _adcNec
                0x03ff3464                _sauPcProtocol
                0x03ff343c                _pLogo
                0x03ff350c                _pwMeasureTimer
                0x03ff3598                _fp_m
                0x03ff3444                _pADuCstatus
                0x03ff3448                _pageMessages
                0x03ff3518                _spi2
                0x03ff34c0                _pUART_ADuC2
                0x03ff34cc                _pUART_ADuC5
                0x03ff34ac                _pUART_BLUE
                0x03ff3450                _pageInfo
                0x03ff34a4                _pUART2
                0x03ff34f4                _timerP2
                0x03ff346c                _VVProtocol
                0x03ff3510                _IRprotocol
                0x03ff34d4                _pUART_ADuC
                0x03ff3480                _genProtocol
                0x03ff3460                _prsChan
                0x03ff34a0                _pUART1
                0x03ff3498                _sau7000
                0x03ff3504                _wth
                0x03ff34a8                _pUART_PC
                0x03ff3468                _VinfProtocol
                0x03ff3590                _timeout
                0x03ff34b8                _pUART_ADuC0
                0x03ff34c4                _pUART_ADuC3
                0x03ff34f0                _pUART_ADuCupgrade
                0x03ff3490                _myKeyboard
                0x03ff3454                _pageADuCfrqCal
                0x03ff34d0                _pUART_ADuC6
                0x03ff358c                _stop_cpu
                0x03ff348c                _ADuCfwUpgradeProtocol
                0x03ff351c                _TMC262_driver
                0x03ff3508                _timerQ
                0x03ff3438                _pageMenu
                0x03ff3500                _pwmTimerP4
                0x03ff352c                _wtp
                0x03ff34b4                _pUART_EMG
                0x03ff3478                _prsProtocol_56
                0x03ff3524                _timerP3
                0x03ff345c                _weightChan
                0x03ff34b0                _pUART_BUBBLE
                0x03ff3440                _pMain
                0x03ff344c                _pageSwitchOff
                0x03ff3594                _msec_test
                0x03ff34f8                _pwmTimerP2
                0x03ff3494                _ADuCUpgradeMng
                0x03ff3484                _emgProtocol
                0x03ff34bc                _pUART_ADuC1
                0x03ff3528                _pwmTimerP1
 .bss           0x03ff35a0       0xf8 obj/IRQSG2.o
 .bss           0x03ff3698        0x2 obj/ERROR.o
 *fill*         0x03ff369a        0x2 00
 .bss           0x03ff369c       0x14 obj/ALLOC.o
 .bss           0x03ff36b0      0x3e8 obj/NEW.o
 .bss           0x03ff3a98        0x0 obj/STRCLASS.o
 .bss           0x03ff3a98        0x0 obj/PRINT.o
 .bss           0x03ff3a98        0x8 obj/SWTIM.o
                0x03ff3a98                _globalTimer
 .bss           0x03ff3aa0       0x32 obj/util.o
 .bss           0x03ff3ad2        0x0 obj/sioSG2.o
 *fill*         0x03ff3ad2        0x2 00
 .bss           0x03ff3ad4       0x30 obj/SOUND.o
 .bss           0x03ff3b04        0x0 obj/KEYABSTRACT.o
 .bss           0x03ff3b04        0x0 obj/KEYBOARD.o
 .bss           0x03ff3b04        0x0 obj/ADCABSTRACT.o
 .bss           0x03ff3b04        0x0 obj/ADC_NEC.o
 .bss           0x03ff3b04        0x0 obj/ADC_SAU7000.o
 .bss           0x03ff3b04        0x0 obj/UARTABSTRACT.o
 .bss           0x03ff3b04        0x0 obj/UARTNEC.o
 .bss           0x03ff3b04        0x4 obj/UARTFPGA.o
                0x03ff3b04                _cntTxTot
 .bss           0x03ff3b08        0x0 obj/PROTOCOLSTDUART.o
 .bss           0x03ff3b08        0x0 obj/PROTOCOLSAUANDPC.o
 .bss           0x03ff3b08        0x0 obj/PROTOCOL_uC.o
 .bss           0x03ff3b08        0x0 obj/PROTOCOLSAUANDEMGZ.o
 .bss           0x03ff3b08        0x0 obj/iWRAP_BLUEGIGA.o
 .bss           0x03ff3b08        0x0 obj/iWRAP_BLUEGIGA_SPP.o
 .bss           0x03ff3b08        0x8 obj/SAU7000_MANAGER.o
                0x03ff3b08                _fp
 .bss           0x03ff3b10      0x450 obj/DPYDRV.o
                0x03ff3b4c                _tp0_fc
                0x03ff3b50                _tp0_value
                0x03ff3b10                _textInfo
                0x03ff3b20                _graphInfo
 .bss           0x03ff3f60       0x30 obj/CHRSET.o
 .bss           0x03ff3f90       0x6c obj/GRAPH.o
                0x03ff3fa4                _linesettings
                0x03ff3fb8                _ac
                0x03ff3f90                _defaultpalette
                0x03ff3fb0                _fillsettings
 .bss           0x03ff3ffc       0x10 obj/APPMENU.o
                0x03ff4009                CMenuGeneralInfo::m_blinkCount
                0x03ff4004                CMenuGeneralInfo::m_drawnIco
                0x03ff4000                CMenuGeneralInfo::m_icoCOM
                0x03ff3ffc                CMenuGeneralInfo::m_refcnt
                0x03ff4008                CMenuGeneralInfo::m_icoBlink
 .bss           0x03ff400c        0x0 obj/ICONS.o
 .bss           0x03ff400c        0x0 obj/EEPROM_SPI.o
 .bss           0x03ff400c        0x0 obj/SAU7000_ADuC_SOURCE.o
 .bss           0x03ff400c        0x0 obj/PROTOCOLADuCfwUPGRADE.o
 .bss           0x03ff400c        0x0 obj/ADuC_UPGRADEMANAGER.o
 .bss           0x03ff400c        0x0 obj/TIMER_NEC.o
 .bss           0x03ff400c        0x0 obj/PWMABSTRACT.o
 .bss           0x03ff400c        0x0 obj/PWM_NEC.o
 .bss           0x03ff400c        0x0 obj/WTH.o
 .bss           0x03ff400c        0x0 obj/IR_Toshiba_protocol.o
 .bss           0x03ff400c        0x0 obj/IR_RC5_Standard_protocol.o
 .bss           0x03ff400c        0x0 obj/IR_remote.o
 .bss           0x03ff400c        0x0 obj/SPI_ABSTRACT.o
 .bss           0x03ff400c        0x0 obj/SPI_NEC.o
 .bss           0x03ff400c        0x0 obj/TMC262_DRV.o
 .bss           0x03ff400c        0x0 obj/WTP.o
 .bss           0x03ff400c      0x208 obj/SSPIE_HARDWARE.o
                0x03ff4014                _dataBuffer
                0x03ff400c                _a_uiCheckFailedRow
                0x03ff4010                _a_uiRowCount
 .bss           0x03ff4214       0xcc obj/SSPIE_CORE.o
                0x03ff42df                _currentChannel
                0x03ff4214                _algoBuffer
                0x03ff42dc                _stack
 .bss           0x03ff42e0      0x16c obj/SSPIE_INTRFACE.o
                0x03ff42f0                _dataSize
                0x03ff42f4                _dataIndex
                0x03ff442c                _d_requestNewData
                0x03ff42e0                _algoPtr
                0x03ff4428                _d_currentAddress
                0x03ff42e4                _algoSize
                0x03ff4320                _d_toc
                0x03ff4438                _d_CSU
                0x03ff4420                _d_tocNumber
                0x03ff42e8                _algoIndex
                0x03ff4424                _d_offset
                0x03ff4440                _d_SSPIDatautilVersion
                0x03ff4448                _c_frameCounter
                0x03ff4446                _c_frameSize
                0x03ff4444                _c_currentCounter
                0x03ff4430                _d_currentSize
                0x03ff42f8                _g_dataBufferArr
                0x03ff4422                _d_isDataInput
                0x03ff4442                _compression
                0x03ff4443                _c_compByte
                0x03ff42ec                _dataPtr
                0x03ff4434                _d_currentDataSetIndex
 .bss           0x03ff444c        0x0 obj/SSPIE_MAIN.o
 .bss           0x03ff444c        0x0 obj/SSPIE_SSPIEm.o
 .bss           0x03ff444c        0x4 obj/SSPIE_UTIL.o
 .bss           0x03ff4450        0x0 obj/ADuCSETTING.o
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-atoi.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-memcpy.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-strcat.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-strcmp.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-strcpy.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-strlen.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-strncpy.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-strtol.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-toupper.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libc.a(lib_a-impure.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_mulsi3.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_divsi3.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_udivsi3.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_modsi3.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_umodsi3.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_save_31c.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_addsub_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_mul_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_div_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_ne_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_gt_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_ge_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_lt_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_le_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_si_to_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_sf_to_si.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_save_26c.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_save_27c.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_save_28c.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_muldi3.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_clzsi2.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_pack_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_unpack_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
 .bss           0x03ff4450        0x0 c:\gcc850\lib\libgcc.a(_clz.o)
 *(COMMON)
                0x03ff4450                _end = .
                0x03ff4450                PROVIDE (end, .)
                0x03ff4450                . = ALIGN (0x4)
                0x03ff4450                __base_small_heap = .
                0x03ff4450                PROVIDE (_base_small_heap, .)

.stack          0x03ffcfe0     0x2000
                0x03ffcfe0                __end_small_heap = .
                0x03ffcfe0                PROVIDE (_end_small_heap, __end_small_heap)
                0x03ffcfe0                __stack = .
 *(.stack)
 .stack         0x03ffcfe0     0x2000 obj/startup.o
                0x03ffcfe0                __system_stack
                0x03ffefe0                __end_stack = .
                0x03ffefe0                PROVIDE (_end_stack, __end_stack)

.xdata          0x00100000        0x0
                0x00100000                __xdata_start = .
 *(.xdata)
                0x00100000                __xdata = .
                0x00100000                __xdata_end = .
                0x00100000                . = ALIGN (0x4)
                0x00100000                __base_heap = .
                0x00100000                PROVIDE (_base_heap, .)
                0x00160000                __end_heap = (. + 0x60000)
                0x00160000                PROVIDE (_end_heap, (. + 0x60000))

.disk
 *(.disk)

.stab           0x00000000    0x78408
 *(.stab)
 .stab          0x00000000      0x840 obj/crt1.o
 .stab          0x00000840     0x4fe0 obj/main.o
                               0x4fec (size before relaxing)
 .stab          0x00005820     0x3d80 obj/IRQSG2.o
                               0x3d8c (size before relaxing)
 .stab          0x000095a0      0x87c obj/ERROR.o
                                0x888 (size before relaxing)
 .stab          0x00009e1c      0xcc0 obj/ALLOC.o
                                0xccc (size before relaxing)
 .stab          0x0000aadc      0x990 obj/NEW.o
                                0x99c (size before relaxing)
 .stab          0x0000b46c      0xf78 obj/STRCLASS.o
                                0xf84 (size before relaxing)
 .stab          0x0000c3e4     0x13bc obj/PRINT.o
                               0x13c8 (size before relaxing)
 .stab          0x0000d7a0      0xb58 obj/SWTIM.o
                                0xb64 (size before relaxing)
 .stab          0x0000e2f8     0x1548 obj/util.o
                               0x1554 (size before relaxing)
 .stab          0x0000f840     0x1e0c obj/sioSG2.o
                               0x1e18 (size before relaxing)
 .stab          0x0001164c     0x10e0 obj/SOUND.o
                               0x10ec (size before relaxing)
 .stab          0x0001272c     0x12cc obj/KEYABSTRACT.o
                               0x12d8 (size before relaxing)
 .stab          0x000139f8     0x1d88 obj/KEYBOARD.o
                               0x1d94 (size before relaxing)
 .stab          0x00015780      0xa80 obj/ADCABSTRACT.o
                                0xa8c (size before relaxing)
 .stab          0x00016200     0x16d4 obj/ADC_NEC.o
                               0x16e0 (size before relaxing)
 .stab          0x000178d4     0x3690 obj/ADC_SAU7000.o
                               0x369c (size before relaxing)
 .stab          0x0001af64     0x20dc obj/UARTABSTRACT.o
                               0x20e8 (size before relaxing)
 .stab          0x0001d040     0x1104 obj/UARTNEC.o
                               0x1110 (size before relaxing)
 .stab          0x0001e144     0x1278 obj/UARTFPGA.o
                               0x1284 (size before relaxing)
 .stab          0x0001f3bc     0x2b20 obj/PROTOCOLSTDUART.o
                               0x2b2c (size before relaxing)
 .stab          0x00021edc     0x4aac obj/PROTOCOLSAUANDPC.o
                               0x4ab8 (size before relaxing)
 .stab          0x00026988     0x6048 obj/PROTOCOL_uC.o
                               0x6054 (size before relaxing)
 .stab          0x0002c9d0     0x2f34 obj/PROTOCOLSAUANDEMGZ.o
                               0x2f40 (size before relaxing)
 .stab          0x0002f904     0x6000 obj/iWRAP_BLUEGIGA.o
                               0x600c (size before relaxing)
 .stab          0x00035904     0x3390 obj/iWRAP_BLUEGIGA_SPP.o
                               0x339c (size before relaxing)
 .stab          0x00038c94     0xb700 obj/SAU7000_MANAGER.o
                               0xb70c (size before relaxing)
 .stab          0x00044394     0x3420 obj/DPYDRV.o
                               0x342c (size before relaxing)
 .stab          0x000477b4      0xbf4 obj/CHRSET.o
                                0xc00 (size before relaxing)
 .stab          0x000483a8     0x2e80 obj/GRAPH.o
                               0x2e8c (size before relaxing)
 .stab          0x0004b228     0x4278 obj/APPMENU.o
                               0x4284 (size before relaxing)
 .stab          0x0004f4a0      0x8b8 obj/ICONS.o
                                0x8c4 (size before relaxing)
 .stab          0x0004fd58      0xe94 obj/EEPROM_SPI.o
                                0xea0 (size before relaxing)
 .stab          0x00050bec      0x7d4 obj/SAU7000_ADuC_SOURCE.o
                                0x7e0 (size before relaxing)
 .stab          0x000513c0     0x1e3c obj/PROTOCOLADuCfwUPGRADE.o
                               0x1e48 (size before relaxing)
 .stab          0x000531fc     0x18d8 obj/ADuC_UPGRADEMANAGER.o
                               0x18e4 (size before relaxing)
 .stab          0x00054ad4     0x5244 obj/TIMER_NEC.o
                               0x5250 (size before relaxing)
 .stab          0x00059d18     0x10b0 obj/PWMABSTRACT.o
                               0x10bc (size before relaxing)
 .stab          0x0005adc8     0x2c64 obj/PWM_NEC.o
                               0x2c70 (size before relaxing)
 .stab          0x0005da2c     0x1ecc obj/WTH.o
                               0x1ed8 (size before relaxing)
 .stab          0x0005f8f8     0x1b9c obj/IR_Toshiba_protocol.o
                               0x1ba8 (size before relaxing)
 .stab          0x00061494     0x1e54 obj/IR_RC5_Standard_protocol.o
                               0x1e60 (size before relaxing)
 .stab          0x000632e8     0x2070 obj/IR_remote.o
                               0x207c (size before relaxing)
 .stab          0x00065358     0x111c obj/SPI_ABSTRACT.o
                               0x1128 (size before relaxing)
 .stab          0x00066474     0x1df4 obj/SPI_NEC.o
                               0x1e00 (size before relaxing)
 .stab          0x00068268     0x18cc obj/TMC262_DRV.o
                               0x18d8 (size before relaxing)
 .stab          0x00069b34     0x2964 obj/WTP.o
                               0x2970 (size before relaxing)
 .stab          0x0006c498     0x1188 obj/SSPIE_HARDWARE.o
                               0x1194 (size before relaxing)
 .stab          0x0006d620     0x1458 obj/SSPIE_CORE.o
                               0x1464 (size before relaxing)
 .stab          0x0006ea78     0x1968 obj/SSPIE_INTRFACE.o
                               0x1974 (size before relaxing)
 .stab          0x000703e0      0xa98 obj/SSPIE_MAIN.o
                                0xaa4 (size before relaxing)
 .stab          0x00070e78      0x2d0 obj/SSPIE_SSPIEm.o
                                0x2dc (size before relaxing)
 .stab          0x00071148      0xce4 obj/SSPIE_UTIL.o
                                0xcf0 (size before relaxing)
 .stab          0x00071e2c     0x1464 obj/ADuCSETTING.o
                               0x1470 (size before relaxing)
 .stab          0x00073290      0x45c c:\gcc850\lib\libc.a(lib_a-atoi.o)
                                0x468 (size before relaxing)
 .stab          0x000736ec      0x144 c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
                                0x150 (size before relaxing)
 .stab          0x00073830      0x1b0 c:\gcc850\lib\libc.a(lib_a-memcpy.o)
                                0x1bc (size before relaxing)
 .stab          0x000739e0      0x204 c:\gcc850\lib\libc.a(lib_a-strcat.o)
                                0x408 (size before relaxing)
 .stab          0x00073be4      0x1e0 c:\gcc850\lib\libc.a(lib_a-strcmp.o)
                                0x408 (size before relaxing)
 .stab          0x00073dc4      0x1bc c:\gcc850\lib\libc.a(lib_a-strcpy.o)
                                0x3e4 (size before relaxing)
 .stab          0x00073f80      0x1d4 c:\gcc850\lib\libc.a(lib_a-strlen.o)
                                0x3fc (size before relaxing)
 .stab          0x00074154      0x270 c:\gcc850\lib\libc.a(lib_a-strncpy.o)
                                0x498 (size before relaxing)
 .stab          0x000743c4      0x5d0 c:\gcc850\lib\libc.a(lib_a-strtol.o)
                                0x828 (size before relaxing)
 .stab          0x00074994      0x144 c:\gcc850\lib\libc.a(lib_a-toupper.o)
                                0x150 (size before relaxing)
 .stab          0x00074ad8      0x114 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
                                0x120 (size before relaxing)
 .stab          0x00074bec      0x198 c:\gcc850\lib\libc.a(lib_a-impure.o)
                                0x3d8 (size before relaxing)
 .stab          0x00074d84      0x36c c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
                                0x378 (size before relaxing)
 .stab          0x000750f0      0x864 c:\gcc850\lib\libgcc.a(_addsub_sf.o)
                                0x90c (size before relaxing)
 .stab          0x00075954      0x5a0 c:\gcc850\lib\libgcc.a(_mul_sf.o)
                                0x720 (size before relaxing)
 .stab          0x00075ef4      0x4ec c:\gcc850\lib\libgcc.a(_div_sf.o)
                                0x66c (size before relaxing)
 .stab          0x000763e0      0x228 c:\gcc850\lib\libgcc.a(_ne_sf.o)
                                0x3a8 (size before relaxing)
 .stab          0x00076608      0x228 c:\gcc850\lib\libgcc.a(_gt_sf.o)
                                0x3a8 (size before relaxing)
 .stab          0x00076830      0x228 c:\gcc850\lib\libgcc.a(_ge_sf.o)
                                0x3a8 (size before relaxing)
 .stab          0x00076a58      0x228 c:\gcc850\lib\libgcc.a(_lt_sf.o)
                                0x3a8 (size before relaxing)
 .stab          0x00076c80      0x228 c:\gcc850\lib\libgcc.a(_le_sf.o)
                                0x3a8 (size before relaxing)
 .stab          0x00076ea8      0x2dc c:\gcc850\lib\libgcc.a(_si_to_sf.o)
                                0x45c (size before relaxing)
 .stab          0x00077184      0x288 c:\gcc850\lib\libgcc.a(_sf_to_si.o)
                                0x408 (size before relaxing)
 .stab          0x0007740c      0x120 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
                                0x2a0 (size before relaxing)
 .stab          0x0007752c      0x2c4 c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
                                0x444 (size before relaxing)
 .stab          0x000777f0      0x198 c:\gcc850\lib\libgcc.a(_clzsi2.o)
                                0x348 (size before relaxing)
 .stab          0x00077988      0x360 c:\gcc850\lib\libgcc.a(_pack_sf.o)
                                0x4e0 (size before relaxing)
 .stab          0x00077ce8      0x354 c:\gcc850\lib\libgcc.a(_unpack_sf.o)
                                0x4d4 (size before relaxing)
 .stab          0x0007803c      0x294 c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
                                0x414 (size before relaxing)
 .stab          0x000782d0      0x138 c:\gcc850\lib\libgcc.a(_clz.o)
                                0x2e8 (size before relaxing)

.stabstr        0x00000000    0xd96cb
 *(.stabstr)
 .stabstr       0x00000000    0xd96cb obj/crt1.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x00000000      0x5e8
 *(.comment)
 .comment       0x00000000       0x12 obj/crt1.o
 .comment       0x00000012       0x12 obj/main.o
 .comment       0x00000024       0x12 obj/IRQSG2.o
 .comment       0x00000036       0x12 obj/ERROR.o
 .comment       0x00000048       0x12 obj/ALLOC.o
 .comment       0x0000005a       0x12 obj/NEW.o
 .comment       0x0000006c       0x12 obj/STRCLASS.o
 .comment       0x0000007e       0x12 obj/PRINT.o
 .comment       0x00000090       0x12 obj/SWTIM.o
 .comment       0x000000a2       0x12 obj/util.o
 .comment       0x000000b4       0x12 obj/sioSG2.o
 .comment       0x000000c6       0x12 obj/SOUND.o
 .comment       0x000000d8       0x12 obj/KEYABSTRACT.o
 .comment       0x000000ea       0x12 obj/KEYBOARD.o
 .comment       0x000000fc       0x12 obj/ADCABSTRACT.o
 .comment       0x0000010e       0x12 obj/ADC_NEC.o
 .comment       0x00000120       0x12 obj/ADC_SAU7000.o
 .comment       0x00000132       0x12 obj/UARTABSTRACT.o
 .comment       0x00000144       0x12 obj/UARTNEC.o
 .comment       0x00000156       0x12 obj/UARTFPGA.o
 .comment       0x00000168       0x12 obj/PROTOCOLSTDUART.o
 .comment       0x0000017a       0x12 obj/PROTOCOLSAUANDPC.o
 .comment       0x0000018c       0x12 obj/PROTOCOL_uC.o
 .comment       0x0000019e       0x12 obj/PROTOCOLSAUANDEMGZ.o
 .comment       0x000001b0       0x12 obj/iWRAP_BLUEGIGA.o
 .comment       0x000001c2       0x12 obj/iWRAP_BLUEGIGA_SPP.o
 .comment       0x000001d4       0x12 obj/SAU7000_MANAGER.o
 .comment       0x000001e6       0x12 obj/DPYDRV.o
 .comment       0x000001f8       0x12 obj/CHRSET.o
 .comment       0x0000020a       0x12 obj/GRAPH.o
 .comment       0x0000021c       0x12 obj/APPMENU.o
 .comment       0x0000022e       0x12 obj/ICONS.o
 .comment       0x00000240       0x12 obj/EEPROM_SPI.o
 .comment       0x00000252       0x12 obj/SAU7000_ADuC_SOURCE.o
 .comment       0x00000264       0x12 obj/PROTOCOLADuCfwUPGRADE.o
 .comment       0x00000276       0x12 obj/ADuC_UPGRADEMANAGER.o
 .comment       0x00000288       0x12 obj/TIMER_NEC.o
 .comment       0x0000029a       0x12 obj/PWMABSTRACT.o
 .comment       0x000002ac       0x12 obj/PWM_NEC.o
 .comment       0x000002be       0x12 obj/WTH.o
 .comment       0x000002d0       0x12 obj/IR_Toshiba_protocol.o
 .comment       0x000002e2       0x12 obj/IR_RC5_Standard_protocol.o
 .comment       0x000002f4       0x12 obj/IR_remote.o
 .comment       0x00000306       0x12 obj/SPI_ABSTRACT.o
 .comment       0x00000318       0x12 obj/SPI_NEC.o
 .comment       0x0000032a       0x12 obj/TMC262_DRV.o
 .comment       0x0000033c       0x12 obj/WTP.o
 .comment       0x0000034e       0x12 obj/SSPIE_HARDWARE.o
 .comment       0x00000360       0x12 obj/SSPIE_CORE.o
 .comment       0x00000372       0x12 obj/SSPIE_INTRFACE.o
 .comment       0x00000384       0x12 obj/SSPIE_MAIN.o
 .comment       0x00000396       0x12 obj/SSPIE_SSPIEm.o
 .comment       0x000003a8       0x12 obj/SSPIE_UTIL.o
 .comment       0x000003ba       0x12 obj/ADuCSETTING.o
 .comment       0x000003cc       0x12 c:\gcc850\lib\libc.a(lib_a-atoi.o)
 .comment       0x000003de       0x12 c:\gcc850\lib\libc.a(lib_a-isxdigit.o)
 .comment       0x000003f0       0x12 c:\gcc850\lib\libc.a(lib_a-memcpy.o)
 .comment       0x00000402       0x12 c:\gcc850\lib\libc.a(lib_a-strcat.o)
 .comment       0x00000414       0x12 c:\gcc850\lib\libc.a(lib_a-strcmp.o)
 .comment       0x00000426       0x12 c:\gcc850\lib\libc.a(lib_a-strcpy.o)
 .comment       0x00000438       0x12 c:\gcc850\lib\libc.a(lib_a-strlen.o)
 .comment       0x0000044a       0x12 c:\gcc850\lib\libc.a(lib_a-strncpy.o)
 .comment       0x0000045c       0x12 c:\gcc850\lib\libc.a(lib_a-strtol.o)
 .comment       0x0000046e       0x12 c:\gcc850\lib\libc.a(lib_a-toupper.o)
 .comment       0x00000480       0x12 c:\gcc850\lib\libc.a(lib_a-ctype_.o)
 .comment       0x00000492       0x12 c:\gcc850\lib\libc.a(lib_a-impure.o)
 .comment       0x000004a4       0x12 c:\gcc850\lib\libgcc.a(_fixunssfsi.o)
 .comment       0x000004b6       0x12 c:\gcc850\lib\libgcc.a(_addsub_sf.o)
 .comment       0x000004c8       0x12 c:\gcc850\lib\libgcc.a(_mul_sf.o)
 .comment       0x000004da       0x12 c:\gcc850\lib\libgcc.a(_div_sf.o)
 .comment       0x000004ec       0x12 c:\gcc850\lib\libgcc.a(_ne_sf.o)
 .comment       0x000004fe       0x12 c:\gcc850\lib\libgcc.a(_gt_sf.o)
 .comment       0x00000510       0x12 c:\gcc850\lib\libgcc.a(_ge_sf.o)
 .comment       0x00000522       0x12 c:\gcc850\lib\libgcc.a(_lt_sf.o)
 .comment       0x00000534       0x12 c:\gcc850\lib\libgcc.a(_le_sf.o)
 .comment       0x00000546       0x12 c:\gcc850\lib\libgcc.a(_si_to_sf.o)
 .comment       0x00000558       0x12 c:\gcc850\lib\libgcc.a(_sf_to_si.o)
 .comment       0x0000056a       0x12 c:\gcc850\lib\libgcc.a(_thenan_sf.o)
 .comment       0x0000057c       0x12 c:\gcc850\lib\libgcc.a(_usi_to_sf.o)
 .comment       0x0000058e       0x12 c:\gcc850\lib\libgcc.a(_clzsi2.o)
 .comment       0x000005a0       0x12 c:\gcc850\lib\libgcc.a(_pack_sf.o)
 .comment       0x000005b2       0x12 c:\gcc850\lib\libgcc.a(_unpack_sf.o)
 .comment       0x000005c4       0x12 c:\gcc850\lib\libgcc.a(_fpcmp_parts_sf.o)
 .comment       0x000005d6       0x12 c:\gcc850\lib\libgcc.a(_clz.o)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.zdata
 *(.zdata)
 *(.zbss)
 *(reszdata)
 *(.zcommon)

.rozdata
 *(.rozdata)
 *(romzdata)
 *(romzbss)
LOAD obj/crt0.o
LOAD obj/crt1.o
LOAD obj/main.o
LOAD obj/IRQSG2.o
LOAD obj/ERROR.o
LOAD obj/ALLOC.o
LOAD obj/NEW.o
LOAD obj/STRCLASS.o
LOAD obj/PRINT.o
LOAD obj/SWTIM.o
LOAD obj/util.o
LOAD obj/sioSG2.o
LOAD obj/SOUND.o
LOAD obj/KEYABSTRACT.o
LOAD obj/KEYBOARD.o
LOAD obj/ADCABSTRACT.o
LOAD obj/ADC_NEC.o
LOAD obj/ADC_SAU7000.o
LOAD obj/UARTABSTRACT.o
LOAD obj/UARTNEC.o
LOAD obj/UARTFPGA.o
LOAD obj/PROTOCOLSTDUART.o
LOAD obj/PROTOCOLSAUANDPC.o
LOAD obj/PROTOCOL_uC.o
LOAD obj/PROTOCOLSAUANDEMGZ.o
LOAD obj/iWRAP_BLUEGIGA.o
LOAD obj/iWRAP_BLUEGIGA_SPP.o
LOAD obj/SAU7000_MANAGER.o
LOAD obj/DPYDRV.o
LOAD obj/CHRSET.o
LOAD obj/GRAPH.o
LOAD obj/APPMENU.o
LOAD obj/ICONS.o
LOAD obj/EEPROM_SPI.o
LOAD obj/SAU7000_ADuC_SOURCE.o
LOAD obj/PROTOCOLADuCfwUPGRADE.o
LOAD obj/ADuC_UPGRADEMANAGER.o
LOAD obj/TIMER_NEC.o
LOAD obj/PWMABSTRACT.o
LOAD obj/PWM_NEC.o
LOAD obj/WTH.o
LOAD obj/IR_Toshiba_protocol.o
LOAD obj/IR_RC5_Standard_protocol.o
LOAD obj/IR_remote.o
LOAD obj/SPI_ABSTRACT.o
LOAD obj/SPI_NEC.o
LOAD obj/TMC262_DRV.o
LOAD obj/WTP.o
LOAD obj/SSPIE_HARDWARE.o
LOAD obj/SSPIE_CORE.o
LOAD obj/SSPIE_INTRFACE.o
LOAD obj/SSPIE_MAIN.o
LOAD obj/SSPIE_SSPIEm.o
LOAD obj/SSPIE_UTIL.o
LOAD obj/ADuCSETTING.o
LOAD c:\gcc850\lib\v850e\libm.a
LOAD c:\gcc850\lib\libc.a
LOAD c:\gcc850\lib\libgcc.a
OUTPUT(SAU7000.OUR elf32-v850)
